{"ast":null,"code":"import{collection,getDocs,addDoc,updateDoc,deleteDoc,doc,query,where,orderBy,getDoc}from'firebase/firestore';import{ref,uploadBytesResumable,getDownloadURL,deleteObject}from'firebase/storage';import{db,storage}from'../config/firebase';class VehicleInspectionService{constructor(){this.collection='vehicleInspections';this.storageBasePath='vehicle-inspections';}// Récupérer toutes les inspections avec filtres optionnels\nasync getInspections(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const inspectionsRef=collection(db,this.collection);let q=query(inspectionsRef,orderBy('date','desc'));if(filters.vehicleId){q=query(q,where('vehicleId','==',filters.vehicleId));}if(filters.inspectedBy){q=query(q,where('inspectedBy','==',filters.inspectedBy));}if(filters.status){q=query(q,where('status','==',filters.status));}if(filters.startDate){q=query(q,where('date','>=',filters.startDate));}if(filters.endDate){q=query(q,where('date','<=',filters.endDate));}if(filters.actionRequired!==undefined){q=query(q,where('actionRequired','==',filters.actionRequired));}const snapshot=await getDocs(q);return snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));}catch(error){console.error('Erreur lors de la récupération des inspections:',error);throw error;}}// Récupérer une inspection par ID\nasync getInspectionById(id){try{const inspectionRef=doc(db,this.collection,id);const inspectionDoc=await getDoc(inspectionRef);if(!inspectionDoc.exists()){return null;}return{id:inspectionDoc.id,...inspectionDoc.data()};}catch(error){console.error('Erreur lors de la récupération de l\\'inspection:',error);throw error;}}// Créer une nouvelle inspection\nasync createInspection(inspection){try{const inspectionsRef=collection(db,this.collection);const now=new Date().toISOString();const docRef=await addDoc(inspectionsRef,{...inspection,createdAt:now,updatedAt:now});return{id:docRef.id,...inspection,createdAt:now,updatedAt:now};}catch(error){console.error('Erreur lors de la création de l\\'inspection:',error);throw error;}}// Mettre à jour une inspection existante\nasync updateInspection(id,inspection){try{const inspectionRef=doc(db,this.collection,id);await updateDoc(inspectionRef,{...inspection,updatedAt:new Date().toISOString()});}catch(error){console.error('Erreur lors de la mise à jour de l\\'inspection:',error);throw error;}}// Supprimer une inspection\nasync deleteInspection(id){try{// D'abord, récupérer l'inspection pour obtenir toutes les photos\nconst inspection=await this.getInspectionById(id);if(inspection){// Supprimer toutes les photos de chaque élément d'inspection\nfor(const item of inspection.inspectionItems){for(const photo of item.photos){await this.deletePhoto(photo.url);}}}// Supprimer le document de l'inspection\nconst inspectionRef=doc(db,this.collection,id);await deleteDoc(inspectionRef);}catch(error){console.error('Erreur lors de la suppression de l\\'inspection:',error);throw error;}}// Uploader une photo\nasync uploadPhoto(file,vehicleId,inspectionItemId){try{const timestamp=Date.now();const fileName=`${vehicleId}_${inspectionItemId}_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g,'_')}`;const filePath=`${this.storageBasePath}/photos/${fileName}`;const storageRef=ref(storage,filePath);// Upload le fichier avec progression\nconst uploadTask=uploadBytesResumable(storageRef,file);return new Promise((resolve,reject)=>{uploadTask.on('state_changed',snapshot=>{const progress=snapshot.bytesTransferred/snapshot.totalBytes*100;console.log('Upload progress:',progress);},error=>{console.error('Erreur lors de l\\'upload:',error);reject(error);},async()=>{try{const url=await getDownloadURL(uploadTask.snapshot.ref);// Créer une version miniature pour améliorer les performances\nconst thumbnailUrl=url;// Dans un projet réel, vous créeriez une véritable miniature\nconst photoData={id:`photo_${timestamp}`,url,thumbnailUrl,fileName,mimeType:file.type,size:file.size,createdAt:new Date().toISOString(),metadata:{width:null,// À remplir avec les dimensions réelles si nécessaire\nheight:null,location:null// À remplir avec les coordonnées GPS si disponibles\n}};resolve(photoData);}catch(error){console.error('Erreur lors de la récupération de l\\'URL:',error);reject(error);}});});}catch(error){console.error('Erreur lors de l\\'upload de la photo:',error);throw error;}}// Ajouter une photo à un élément d'inspection\nasync addPhotoToInspectionItem(inspectionId,itemId,photo){try{const inspection=await this.getInspectionById(inspectionId);if(!inspection){throw new Error('Inspection non trouvée');}// Trouver l'élément d'inspection\nconst itemIndex=inspection.inspectionItems.findIndex(item=>item.id===itemId);if(itemIndex===-1){throw new Error('Élément d\\'inspection non trouvé');}// Ajouter la photo à l'élément\nconst updatedItems=[...inspection.inspectionItems];updatedItems[itemIndex]={...updatedItems[itemIndex],photos:[...updatedItems[itemIndex].photos,photo]};// Mettre à jour l'inspection\nawait this.updateInspection(inspectionId,{inspectionItems:updatedItems});}catch(error){console.error('Erreur lors de l\\'ajout de la photo à l\\'élément d\\'inspection:',error);throw error;}}// Supprimer une photo\nasync deletePhoto(photoUrl){try{// Supprimer le fichier du storage\nconst fileRef=ref(storage,photoUrl);await deleteObject(fileRef);}catch(error){console.error('Erreur lors de la suppression de la photo:',error);throw error;}}// Supprimer une photo d'un élément d'inspection\nasync removePhotoFromInspectionItem(inspectionId,itemId,photoId){try{const inspection=await this.getInspectionById(inspectionId);if(!inspection){throw new Error('Inspection non trouvée');}// Trouver l'élément d'inspection\nconst itemIndex=inspection.inspectionItems.findIndex(item=>item.id===itemId);if(itemIndex===-1){throw new Error('Élément d\\'inspection non trouvé');}// Trouver la photo\nconst photoIndex=inspection.inspectionItems[itemIndex].photos.findIndex(photo=>photo.id===photoId);if(photoIndex===-1){throw new Error('Photo non trouvée');}// Récupérer l'URL de la photo pour la supprimer du storage\nconst photoUrl=inspection.inspectionItems[itemIndex].photos[photoIndex].url;await this.deletePhoto(photoUrl);// Supprimer la photo de l'élément\nconst updatedPhotos=inspection.inspectionItems[itemIndex].photos.filter(photo=>photo.id!==photoId);const updatedItems=[...inspection.inspectionItems];updatedItems[itemIndex]={...updatedItems[itemIndex],photos:updatedPhotos};// Mettre à jour l'inspection\nawait this.updateInspection(inspectionId,{inspectionItems:updatedItems});}catch(error){console.error('Erreur lors de la suppression de la photo de l\\'élément d\\'inspection:',error);throw error;}}}export const vehicleInspectionService=new VehicleInspectionService();","map":{"version":3,"names":["collection","getDocs","addDoc","updateDoc","deleteDoc","doc","query","where","orderBy","getDoc","ref","uploadBytesResumable","getDownloadURL","deleteObject","db","storage","VehicleInspectionService","constructor","storageBasePath","getInspections","filters","arguments","length","undefined","inspectionsRef","q","vehicleId","inspectedBy","status","startDate","endDate","actionRequired","snapshot","docs","map","id","data","error","console","getInspectionById","inspectionRef","inspectionDoc","exists","createInspection","inspection","now","Date","toISOString","docRef","createdAt","updatedAt","updateInspection","deleteInspection","item","inspectionItems","photo","photos","deletePhoto","url","uploadPhoto","file","inspectionItemId","timestamp","fileName","name","replace","filePath","storageRef","uploadTask","Promise","resolve","reject","on","progress","bytesTransferred","totalBytes","log","thumbnailUrl","photoData","mimeType","type","size","metadata","width","height","location","addPhotoToInspectionItem","inspectionId","itemId","Error","itemIndex","findIndex","updatedItems","photoUrl","fileRef","removePhotoFromInspectionItem","photoId","photoIndex","updatedPhotos","filter","vehicleInspectionService"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/vehicleInspectionService.ts"],"sourcesContent":["import { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where, orderBy, Timestamp, getDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytesResumable, getDownloadURL, deleteObject } from 'firebase/storage';\r\nimport { db, storage } from '../config/firebase';\r\nimport { VehicleInspection, InspectionItem, Photo, InspectionStatus } from '../types/Vehicle';\r\n\r\nexport interface VehicleInspectionFilters {\r\n  vehicleId?: string;\r\n  inspectedBy?: string;\r\n  status?: InspectionStatus;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  actionRequired?: boolean;\r\n}\r\n\r\nclass VehicleInspectionService {\r\n  private collection = 'vehicleInspections';\r\n  private storageBasePath = 'vehicle-inspections';\r\n\r\n  // Récupérer toutes les inspections avec filtres optionnels\r\n  async getInspections(filters: VehicleInspectionFilters = {}): Promise<VehicleInspection[]> {\r\n    try {\r\n      const inspectionsRef = collection(db, this.collection);\r\n      let q = query(inspectionsRef, orderBy('date', 'desc'));\r\n\r\n      if (filters.vehicleId) {\r\n        q = query(q, where('vehicleId', '==', filters.vehicleId));\r\n      }\r\n      if (filters.inspectedBy) {\r\n        q = query(q, where('inspectedBy', '==', filters.inspectedBy));\r\n      }\r\n      if (filters.status) {\r\n        q = query(q, where('status', '==', filters.status));\r\n      }\r\n      if (filters.startDate) {\r\n        q = query(q, where('date', '>=', filters.startDate));\r\n      }\r\n      if (filters.endDate) {\r\n        q = query(q, where('date', '<=', filters.endDate));\r\n      }\r\n      if (filters.actionRequired !== undefined) {\r\n        q = query(q, where('actionRequired', '==', filters.actionRequired));\r\n      }\r\n\r\n      const snapshot = await getDocs(q);\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      })) as VehicleInspection[];\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des inspections:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer une inspection par ID\r\n  async getInspectionById(id: string): Promise<VehicleInspection | null> {\r\n    try {\r\n      const inspectionRef = doc(db, this.collection, id);\r\n      const inspectionDoc = await getDoc(inspectionRef);\r\n      \r\n      if (!inspectionDoc.exists()) {\r\n        return null;\r\n      }\r\n      \r\n      return {\r\n        id: inspectionDoc.id,\r\n        ...inspectionDoc.data()\r\n      } as VehicleInspection;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération de l\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Créer une nouvelle inspection\r\n  async createInspection(inspection: Omit<VehicleInspection, 'id' | 'createdAt' | 'updatedAt'>): Promise<VehicleInspection> {\r\n    try {\r\n      const inspectionsRef = collection(db, this.collection);\r\n      const now = new Date().toISOString();\r\n      \r\n      const docRef = await addDoc(inspectionsRef, {\r\n        ...inspection,\r\n        createdAt: now,\r\n        updatedAt: now\r\n      });\r\n\r\n      return {\r\n        id: docRef.id,\r\n        ...inspection,\r\n        createdAt: now,\r\n        updatedAt: now\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de l\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour une inspection existante\r\n  async updateInspection(id: string, inspection: Partial<VehicleInspection>): Promise<void> {\r\n    try {\r\n      const inspectionRef = doc(db, this.collection, id);\r\n      await updateDoc(inspectionRef, {\r\n        ...inspection,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour de l\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Supprimer une inspection\r\n  async deleteInspection(id: string): Promise<void> {\r\n    try {\r\n      // D'abord, récupérer l'inspection pour obtenir toutes les photos\r\n      const inspection = await this.getInspectionById(id);\r\n      if (inspection) {\r\n        // Supprimer toutes les photos de chaque élément d'inspection\r\n        for (const item of inspection.inspectionItems) {\r\n          for (const photo of item.photos) {\r\n            await this.deletePhoto(photo.url);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Supprimer le document de l'inspection\r\n      const inspectionRef = doc(db, this.collection, id);\r\n      await deleteDoc(inspectionRef);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Uploader une photo\r\n  async uploadPhoto(file: File, vehicleId: string, inspectionItemId: string): Promise<Photo> {\r\n    try {\r\n      const timestamp = Date.now();\r\n      const fileName = `${vehicleId}_${inspectionItemId}_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, '_')}`;\r\n      const filePath = `${this.storageBasePath}/photos/${fileName}`;\r\n      const storageRef = ref(storage, filePath);\r\n\r\n      // Upload le fichier avec progression\r\n      const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        uploadTask.on('state_changed',\r\n          (snapshot) => {\r\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload progress:', progress);\r\n          },\r\n          (error) => {\r\n            console.error('Erreur lors de l\\'upload:', error);\r\n            reject(error);\r\n          },\r\n          async () => {\r\n            try {\r\n              const url = await getDownloadURL(uploadTask.snapshot.ref);\r\n              // Créer une version miniature pour améliorer les performances\r\n              const thumbnailUrl = url; // Dans un projet réel, vous créeriez une véritable miniature\r\n              \r\n              const photoData: Photo = {\r\n                id: `photo_${timestamp}`,\r\n                url,\r\n                thumbnailUrl,\r\n                fileName,\r\n                mimeType: file.type,\r\n                size: file.size,\r\n                createdAt: new Date().toISOString(),\r\n                metadata: {\r\n                  width: null, // À remplir avec les dimensions réelles si nécessaire\r\n                  height: null,\r\n                  location: null // À remplir avec les coordonnées GPS si disponibles\r\n                }\r\n              };\r\n              \r\n              resolve(photoData);\r\n            } catch (error) {\r\n              console.error('Erreur lors de la récupération de l\\'URL:', error);\r\n              reject(error);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'upload de la photo:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Ajouter une photo à un élément d'inspection\r\n  async addPhotoToInspectionItem(\r\n    inspectionId: string, \r\n    itemId: string, \r\n    photo: Photo\r\n  ): Promise<void> {\r\n    try {\r\n      const inspection = await this.getInspectionById(inspectionId);\r\n      if (!inspection) {\r\n        throw new Error('Inspection non trouvée');\r\n      }\r\n      \r\n      // Trouver l'élément d'inspection\r\n      const itemIndex = inspection.inspectionItems.findIndex(item => item.id === itemId);\r\n      if (itemIndex === -1) {\r\n        throw new Error('Élément d\\'inspection non trouvé');\r\n      }\r\n      \r\n      // Ajouter la photo à l'élément\r\n      const updatedItems = [...inspection.inspectionItems];\r\n      updatedItems[itemIndex] = {\r\n        ...updatedItems[itemIndex],\r\n        photos: [...updatedItems[itemIndex].photos, photo]\r\n      };\r\n      \r\n      // Mettre à jour l'inspection\r\n      await this.updateInspection(inspectionId, {\r\n        inspectionItems: updatedItems\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout de la photo à l\\'élément d\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Supprimer une photo\r\n  async deletePhoto(photoUrl: string): Promise<void> {\r\n    try {\r\n      // Supprimer le fichier du storage\r\n      const fileRef = ref(storage, photoUrl);\r\n      await deleteObject(fileRef);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de la photo:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  // Supprimer une photo d'un élément d'inspection\r\n  async removePhotoFromInspectionItem(\r\n    inspectionId: string,\r\n    itemId: string,\r\n    photoId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const inspection = await this.getInspectionById(inspectionId);\r\n      if (!inspection) {\r\n        throw new Error('Inspection non trouvée');\r\n      }\r\n      \r\n      // Trouver l'élément d'inspection\r\n      const itemIndex = inspection.inspectionItems.findIndex(item => item.id === itemId);\r\n      if (itemIndex === -1) {\r\n        throw new Error('Élément d\\'inspection non trouvé');\r\n      }\r\n      \r\n      // Trouver la photo\r\n      const photoIndex = inspection.inspectionItems[itemIndex].photos.findIndex(photo => photo.id === photoId);\r\n      if (photoIndex === -1) {\r\n        throw new Error('Photo non trouvée');\r\n      }\r\n      \r\n      // Récupérer l'URL de la photo pour la supprimer du storage\r\n      const photoUrl = inspection.inspectionItems[itemIndex].photos[photoIndex].url;\r\n      await this.deletePhoto(photoUrl);\r\n      \r\n      // Supprimer la photo de l'élément\r\n      const updatedPhotos = inspection.inspectionItems[itemIndex].photos.filter(photo => photo.id !== photoId);\r\n      const updatedItems = [...inspection.inspectionItems];\r\n      updatedItems[itemIndex] = {\r\n        ...updatedItems[itemIndex],\r\n        photos: updatedPhotos\r\n      };\r\n      \r\n      // Mettre à jour l'inspection\r\n      await this.updateInspection(inspectionId, {\r\n        inspectionItems: updatedItems\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de la photo de l\\'élément d\\'inspection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const vehicleInspectionService = new VehicleInspectionService(); \r\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAEC,SAAS,CAAEC,SAAS,CAAEC,GAAG,CAAEC,KAAK,CAAEC,KAAK,CAAEC,OAAO,CAAaC,MAAM,KAAQ,oBAAoB,CACrI,OAASC,GAAG,CAAEC,oBAAoB,CAAEC,cAAc,CAAEC,YAAY,KAAQ,kBAAkB,CAC1F,OAASC,EAAE,CAAEC,OAAO,KAAQ,oBAAoB,CAYhD,KAAM,CAAAC,wBAAyB,CAAAC,YAAA,OACrBjB,UAAU,CAAG,oBAAoB,MACjCkB,eAAe,CAAG,qBAAqB,EAE/C;AACA,KAAM,CAAAC,cAAcA,CAAA,CAAuE,IAAtE,CAAAC,OAAiC,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACzD,GAAI,CACF,KAAM,CAAAG,cAAc,CAAGxB,UAAU,CAACc,EAAE,CAAE,IAAI,CAACd,UAAU,CAAC,CACtD,GAAI,CAAAyB,CAAC,CAAGnB,KAAK,CAACkB,cAAc,CAAEhB,OAAO,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CAEtD,GAAIY,OAAO,CAACM,SAAS,CAAE,CACrBD,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,WAAW,CAAE,IAAI,CAAEa,OAAO,CAACM,SAAS,CAAC,CAAC,CAC3D,CACA,GAAIN,OAAO,CAACO,WAAW,CAAE,CACvBF,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,aAAa,CAAE,IAAI,CAAEa,OAAO,CAACO,WAAW,CAAC,CAAC,CAC/D,CACA,GAAIP,OAAO,CAACQ,MAAM,CAAE,CAClBH,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,QAAQ,CAAE,IAAI,CAAEa,OAAO,CAACQ,MAAM,CAAC,CAAC,CACrD,CACA,GAAIR,OAAO,CAACS,SAAS,CAAE,CACrBJ,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,MAAM,CAAE,IAAI,CAAEa,OAAO,CAACS,SAAS,CAAC,CAAC,CACtD,CACA,GAAIT,OAAO,CAACU,OAAO,CAAE,CACnBL,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,MAAM,CAAE,IAAI,CAAEa,OAAO,CAACU,OAAO,CAAC,CAAC,CACpD,CACA,GAAIV,OAAO,CAACW,cAAc,GAAKR,SAAS,CAAE,CACxCE,CAAC,CAAGnB,KAAK,CAACmB,CAAC,CAAElB,KAAK,CAAC,gBAAgB,CAAE,IAAI,CAAEa,OAAO,CAACW,cAAc,CAAC,CAAC,CACrE,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA/B,OAAO,CAACwB,CAAC,CAAC,CACjC,MAAO,CAAAO,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAC7B,GAAG,GAAK,CAC/B8B,EAAE,CAAE9B,GAAG,CAAC8B,EAAE,CACV,GAAG9B,GAAG,CAAC+B,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CACL,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAEA,KAAK,CAAC,CACvE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAE,iBAAiBA,CAACJ,EAAU,CAAqC,CACrE,GAAI,CACF,KAAM,CAAAK,aAAa,CAAGnC,GAAG,CAACS,EAAE,CAAE,IAAI,CAACd,UAAU,CAAEmC,EAAE,CAAC,CAClD,KAAM,CAAAM,aAAa,CAAG,KAAM,CAAAhC,MAAM,CAAC+B,aAAa,CAAC,CAEjD,GAAI,CAACC,aAAa,CAACC,MAAM,CAAC,CAAC,CAAE,CAC3B,MAAO,KAAI,CACb,CAEA,MAAO,CACLP,EAAE,CAAEM,aAAa,CAACN,EAAE,CACpB,GAAGM,aAAa,CAACL,IAAI,CAAC,CACxB,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kDAAkD,CAAEA,KAAK,CAAC,CACxE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAM,gBAAgBA,CAACC,UAAqE,CAA8B,CACxH,GAAI,CACF,KAAM,CAAApB,cAAc,CAAGxB,UAAU,CAACc,EAAE,CAAE,IAAI,CAACd,UAAU,CAAC,CACtD,KAAM,CAAA6C,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAEpC,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAA9C,MAAM,CAACsB,cAAc,CAAE,CAC1C,GAAGoB,UAAU,CACbK,SAAS,CAAEJ,GAAG,CACdK,SAAS,CAAEL,GACb,CAAC,CAAC,CAEF,MAAO,CACLV,EAAE,CAAEa,MAAM,CAACb,EAAE,CACb,GAAGS,UAAU,CACbK,SAAS,CAAEJ,GAAG,CACdK,SAAS,CAAEL,GACb,CAAC,CACH,CAAE,MAAOR,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACpE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAc,gBAAgBA,CAAChB,EAAU,CAAES,UAAsC,CAAiB,CACxF,GAAI,CACF,KAAM,CAAAJ,aAAa,CAAGnC,GAAG,CAACS,EAAE,CAAE,IAAI,CAACd,UAAU,CAAEmC,EAAE,CAAC,CAClD,KAAM,CAAAhC,SAAS,CAACqC,aAAa,CAAE,CAC7B,GAAGI,UAAU,CACbM,SAAS,CAAE,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CACJ,CAAE,MAAOV,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAEA,KAAK,CAAC,CACvE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAe,gBAAgBA,CAACjB,EAAU,CAAiB,CAChD,GAAI,CACF;AACA,KAAM,CAAAS,UAAU,CAAG,KAAM,KAAI,CAACL,iBAAiB,CAACJ,EAAE,CAAC,CACnD,GAAIS,UAAU,CAAE,CACd;AACA,IAAK,KAAM,CAAAS,IAAI,GAAI,CAAAT,UAAU,CAACU,eAAe,CAAE,CAC7C,IAAK,KAAM,CAAAC,KAAK,GAAI,CAAAF,IAAI,CAACG,MAAM,CAAE,CAC/B,KAAM,KAAI,CAACC,WAAW,CAACF,KAAK,CAACG,GAAG,CAAC,CACnC,CACF,CACF,CAEA;AACA,KAAM,CAAAlB,aAAa,CAAGnC,GAAG,CAACS,EAAE,CAAE,IAAI,CAACd,UAAU,CAAEmC,EAAE,CAAC,CAClD,KAAM,CAAA/B,SAAS,CAACoC,aAAa,CAAC,CAChC,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAEA,KAAK,CAAC,CACvE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAsB,WAAWA,CAACC,IAAU,CAAElC,SAAiB,CAAEmC,gBAAwB,CAAkB,CACzF,GAAI,CACF,KAAM,CAAAC,SAAS,CAAGhB,IAAI,CAACD,GAAG,CAAC,CAAC,CAC5B,KAAM,CAAAkB,QAAQ,CAAG,GAAGrC,SAAS,IAAImC,gBAAgB,IAAIC,SAAS,IAAIF,IAAI,CAACI,IAAI,CAACC,OAAO,CAAC,gBAAgB,CAAE,GAAG,CAAC,EAAE,CAC5G,KAAM,CAAAC,QAAQ,CAAG,GAAG,IAAI,CAAChD,eAAe,WAAW6C,QAAQ,EAAE,CAC7D,KAAM,CAAAI,UAAU,CAAGzD,GAAG,CAACK,OAAO,CAAEmD,QAAQ,CAAC,CAEzC;AACA,KAAM,CAAAE,UAAU,CAAGzD,oBAAoB,CAACwD,UAAU,CAAEP,IAAI,CAAC,CAEzD,MAAO,IAAI,CAAAS,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCH,UAAU,CAACI,EAAE,CAAC,eAAe,CAC1BxC,QAAQ,EAAK,CACZ,KAAM,CAAAyC,QAAQ,CAAIzC,QAAQ,CAAC0C,gBAAgB,CAAG1C,QAAQ,CAAC2C,UAAU,CAAI,GAAG,CACxErC,OAAO,CAACsC,GAAG,CAAC,kBAAkB,CAAEH,QAAQ,CAAC,CAC3C,CAAC,CACApC,KAAK,EAAK,CACTC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDkC,MAAM,CAAClC,KAAK,CAAC,CACf,CAAC,CACD,SAAY,CACV,GAAI,CACF,KAAM,CAAAqB,GAAG,CAAG,KAAM,CAAA9C,cAAc,CAACwD,UAAU,CAACpC,QAAQ,CAACtB,GAAG,CAAC,CACzD;AACA,KAAM,CAAAmE,YAAY,CAAGnB,GAAG,CAAE;AAE1B,KAAM,CAAAoB,SAAgB,CAAG,CACvB3C,EAAE,CAAE,SAAS2B,SAAS,EAAE,CACxBJ,GAAG,CACHmB,YAAY,CACZd,QAAQ,CACRgB,QAAQ,CAAEnB,IAAI,CAACoB,IAAI,CACnBC,IAAI,CAAErB,IAAI,CAACqB,IAAI,CACfhC,SAAS,CAAE,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCmC,QAAQ,CAAE,CACRC,KAAK,CAAE,IAAI,CAAE;AACbC,MAAM,CAAE,IAAI,CACZC,QAAQ,CAAE,IAAK;AACjB,CACF,CAAC,CAEDf,OAAO,CAACQ,SAAS,CAAC,CACpB,CAAE,MAAOzC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACjEkC,MAAM,CAAClC,KAAK,CAAC,CACf,CACF,CACF,CAAC,CACH,CAAC,CAAC,CACJ,CAAE,MAAOA,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC7D,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAiD,wBAAwBA,CAC5BC,YAAoB,CACpBC,MAAc,CACdjC,KAAY,CACG,CACf,GAAI,CACF,KAAM,CAAAX,UAAU,CAAG,KAAM,KAAI,CAACL,iBAAiB,CAACgD,YAAY,CAAC,CAC7D,GAAI,CAAC3C,UAAU,CAAE,CACf,KAAM,IAAI,CAAA6C,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA;AACA,KAAM,CAAAC,SAAS,CAAG9C,UAAU,CAACU,eAAe,CAACqC,SAAS,CAACtC,IAAI,EAAIA,IAAI,CAAClB,EAAE,GAAKqD,MAAM,CAAC,CAClF,GAAIE,SAAS,GAAK,CAAC,CAAC,CAAE,CACpB,KAAM,IAAI,CAAAD,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA;AACA,KAAM,CAAAG,YAAY,CAAG,CAAC,GAAGhD,UAAU,CAACU,eAAe,CAAC,CACpDsC,YAAY,CAACF,SAAS,CAAC,CAAG,CACxB,GAAGE,YAAY,CAACF,SAAS,CAAC,CAC1BlC,MAAM,CAAE,CAAC,GAAGoC,YAAY,CAACF,SAAS,CAAC,CAAClC,MAAM,CAAED,KAAK,CACnD,CAAC,CAED;AACA,KAAM,KAAI,CAACJ,gBAAgB,CAACoC,YAAY,CAAE,CACxCjC,eAAe,CAAEsC,YACnB,CAAC,CAAC,CACJ,CAAE,MAAOvD,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iEAAiE,CAAEA,KAAK,CAAC,CACvF,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAoB,WAAWA,CAACoC,QAAgB,CAAiB,CACjD,GAAI,CACF;AACA,KAAM,CAAAC,OAAO,CAAGpF,GAAG,CAACK,OAAO,CAAE8E,QAAQ,CAAC,CACtC,KAAM,CAAAhF,YAAY,CAACiF,OAAO,CAAC,CAC7B,CAAE,MAAOzD,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAEA,KAAK,CAAC,CAClE,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAA0D,6BAA6BA,CACjCR,YAAoB,CACpBC,MAAc,CACdQ,OAAe,CACA,CACf,GAAI,CACF,KAAM,CAAApD,UAAU,CAAG,KAAM,KAAI,CAACL,iBAAiB,CAACgD,YAAY,CAAC,CAC7D,GAAI,CAAC3C,UAAU,CAAE,CACf,KAAM,IAAI,CAAA6C,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA;AACA,KAAM,CAAAC,SAAS,CAAG9C,UAAU,CAACU,eAAe,CAACqC,SAAS,CAACtC,IAAI,EAAIA,IAAI,CAAClB,EAAE,GAAKqD,MAAM,CAAC,CAClF,GAAIE,SAAS,GAAK,CAAC,CAAC,CAAE,CACpB,KAAM,IAAI,CAAAD,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA;AACA,KAAM,CAAAQ,UAAU,CAAGrD,UAAU,CAACU,eAAe,CAACoC,SAAS,CAAC,CAAClC,MAAM,CAACmC,SAAS,CAACpC,KAAK,EAAIA,KAAK,CAACpB,EAAE,GAAK6D,OAAO,CAAC,CACxG,GAAIC,UAAU,GAAK,CAAC,CAAC,CAAE,CACrB,KAAM,IAAI,CAAAR,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA;AACA,KAAM,CAAAI,QAAQ,CAAGjD,UAAU,CAACU,eAAe,CAACoC,SAAS,CAAC,CAAClC,MAAM,CAACyC,UAAU,CAAC,CAACvC,GAAG,CAC7E,KAAM,KAAI,CAACD,WAAW,CAACoC,QAAQ,CAAC,CAEhC;AACA,KAAM,CAAAK,aAAa,CAAGtD,UAAU,CAACU,eAAe,CAACoC,SAAS,CAAC,CAAClC,MAAM,CAAC2C,MAAM,CAAC5C,KAAK,EAAIA,KAAK,CAACpB,EAAE,GAAK6D,OAAO,CAAC,CACxG,KAAM,CAAAJ,YAAY,CAAG,CAAC,GAAGhD,UAAU,CAACU,eAAe,CAAC,CACpDsC,YAAY,CAACF,SAAS,CAAC,CAAG,CACxB,GAAGE,YAAY,CAACF,SAAS,CAAC,CAC1BlC,MAAM,CAAE0C,aACV,CAAC,CAED;AACA,KAAM,KAAI,CAAC/C,gBAAgB,CAACoC,YAAY,CAAE,CACxCjC,eAAe,CAAEsC,YACnB,CAAC,CAAC,CACJ,CAAE,MAAOvD,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wEAAwE,CAAEA,KAAK,CAAC,CAC9F,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA,MAAO,MAAM,CAAA+D,wBAAwB,CAAG,GAAI,CAAApF,wBAAwB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}