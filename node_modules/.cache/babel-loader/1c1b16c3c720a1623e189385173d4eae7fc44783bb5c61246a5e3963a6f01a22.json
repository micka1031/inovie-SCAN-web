{"ast":null,"code":"import React,{useState,useEffect,useMemo}from'react';import{db}from'../config/firebase';import{collection,getDocs,addDoc,updateDoc,deleteDoc,doc,getDoc,query,limit,startAfter,orderBy,setDoc,getDocsFromServer,where,disableNetwork,enableNetwork}from'firebase/firestore';import{geocodeAddress}from'../utils/geocoding';import'./EditMode.css';import'./Sites.css';import PoleSelector from'./PoleSelector';import PoleFilter from'./PoleFilter';import{usePoles}from'../services/PoleService';// Désactiver le suivi de structure et de chronologie pour améliorer les performances\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const disableStructuralAndChronologicalTracking=async()=>{try{// Désactiver temporairement le réseau pour éviter les requêtes pendant la configuration\nawait disableNetwork(db);console.log(\"Réseau temporairement désactivé pour configuration\");// Réactiver le réseau avec les optimisations\nawait enableNetwork(db);console.log(\"Réseau réactivé avec optimisations de performance\");}catch(error){console.error(\"Erreur lors de l'optimisation de Firestore:\",error);}};// Appeler la fonction d'optimisation au chargement du composant\ndisableStructuralAndChronologicalTracking();// Ajouter la constante des types de sites disponibles\nconst SITE_TYPES=['Laboratoire','Clinique','Plateau technique','Point de collecte','Etablissement de santé','Ehpad','Vétérinaire'];const Sites=()=>{const[sites,setSites]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[geocodingStatus,setGeocodingStatus]=useState(null);// État pour le mode édition et la sélection multiple\nconst[editMode,setEditMode]=useState(false);const[selectedSites,setSelectedSites]=useState([]);const[editingSites,setEditingSites]=useState({});const[selectAll,setSelectAll]=useState(false);// Ajouter un nouvel état pour les nouveaux sites temporaires\nconst[newSites,setNewSites]=useState([]);// État pour la recherche rapide\nconst[quickSearch,setQuickSearch]=useState('');const[filteredSites,setFilteredSites]=useState([]);// Ajout du filtre par pôle\nconst[selectedPole,setSelectedPole]=useState('');// Nouveaux états pour la pagination\nconst[currentPage,setCurrentPage]=useState(1);const[itemsPerPage,setItemsPerPage]=useState(20);// Par défaut 20 éléments\n// Options pour le nombre d'éléments par page\nconst itemsPerPageOptions=[20,30,50,100,'Tous'];// Ajoutez le hook usePoles\nconst{poles}=usePoles();// Fonction pour convertir ID de pôle en nom\nconst getPoleNameById=poleId=>{if(!poleId)return'';const pole=poles.find(p=>p.id===poleId);return pole?pole.nom:poleId;};useEffect(()=>{fetchSites();},[]);// Effet pour gérer la sélection/désélection de tous les sites\nuseEffect(()=>{if(selectAll){setSelectedSites(sites.map(site=>site.id));}else if(selectedSites.length===sites.length){// Si tous les sites sont sélectionnés mais que selectAll est false, cela signifie que l'utilisateur a désélectionné\nsetSelectedSites([]);}},[selectAll]);// Initialiser les sites filtrés au chargement\nuseEffect(()=>{setFilteredSites(sites);},[sites]);// Effet pour filtrer les sites en fonction de la recherche rapide\nuseEffect(()=>{if(!quickSearch.trim()&&!selectedPole){// Si la recherche est vide et aucun pôle sélectionné, afficher tous les sites\nsetFilteredSites(sites);return;}let results=sites;// Filtrer par pôle si un pôle est sélectionné\nif(selectedPole){results=results.filter(site=>site.pole===selectedPole);}// Ensuite filtrer par recherche rapide\nif(quickSearch.trim()){const searchTerm=quickSearch.toLowerCase().trim();results=results.filter(site=>{// Rechercher dans tous les champs textuels du site\nreturn(site.nom||'').toLowerCase().includes(searchTerm)||(site.adresse||'').toLowerCase().includes(searchTerm)||(site.ville||'').toLowerCase().includes(searchTerm)||(site.codePostal||'').toLowerCase().includes(searchTerm)||(site.telephone||'').toLowerCase().includes(searchTerm)||(site.email||'').toLowerCase().includes(searchTerm)||(site.type||'').toLowerCase().includes(searchTerm)||(site.statut||'').toLowerCase().includes(searchTerm)||(site.codeBarres||'').toLowerCase().includes(searchTerm);});}setFilteredSites(results);},[quickSearch,sites,selectedPole]);// Pagination et filtrage des sites\nconst paginatedAndFilteredSites=useMemo(()=>{// D'abord filtrer\nconst filtered=filteredSites;// Si itemsPerPage est très grand (option \"Tous\"), retourner tous les sites filtrés\nif(itemsPerPage===Number.MAX_SAFE_INTEGER){return filtered;}// Sinon, paginer normalement\nconst startIndex=(currentPage-1)*itemsPerPage;const endIndex=Math.min(startIndex+itemsPerPage,filtered.length);// S'il y a des nouveaux sites en mode édition, réduire le nombre de sites existants affichés\nif(editMode&&newSites.length>0){const adjustedStartIndex=Math.min(startIndex,filtered.length);const remainingSlots=Math.max(0,itemsPerPage-newSites.length);const adjustedEndIndex=Math.min(adjustedStartIndex+remainingSlots,filtered.length);return filtered.slice(adjustedStartIndex,adjustedEndIndex);}return filtered.slice(startIndex,endIndex);},[filteredSites,currentPage,itemsPerPage,editMode,newSites.length]);// Calculer le nombre total de pages\nconst totalPages=Math.ceil(filteredSites.length/itemsPerPage);// Fonction pour changer de page\nconst handlePageChange=newPage=>{setCurrentPage(newPage);};// Fonction pour changer le nombre d'éléments par page\nconst handleItemsPerPageChange=newItemsPerPage=>{if(newItemsPerPage==='Tous'){// Si \"Tous\" est sélectionné, définir le nombre d'éléments par page à un nombre très élevé\n// pour afficher tous les sites sur une seule page\nsetItemsPerPage(Number.MAX_SAFE_INTEGER);}else{setItemsPerPage(Number(newItemsPerPage));}// Réinitialiser à la première page quand on change le nombre d'éléments\nsetCurrentPage(1);};// Rendu de la pagination\nconst renderPagination=()=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"pagination-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"items-per-page\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"\\xC9l\\xE9ments par page : \"}),/*#__PURE__*/_jsx(\"select\",{value:itemsPerPage===Number.MAX_SAFE_INTEGER?'Tous':itemsPerPage,onChange:e=>handleItemsPerPageChange(e.target.value),title:\"Nombre d'\\xE9l\\xE9ments par page\",\"aria-label\":\"Nombre d'\\xE9l\\xE9ments par page\",children:itemsPerPageOptions.map(option=>/*#__PURE__*/_jsx(\"option\",{value:option,children:option},option))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pagination-controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handlePageChange(currentPage-1),disabled:currentPage===1||itemsPerPage===Number.MAX_SAFE_INTEGER,children:\"Pr\\xE9c\\xE9dent\"}),/*#__PURE__*/_jsx(\"span\",{className:\"page-info\",children:itemsPerPage===Number.MAX_SAFE_INTEGER?'Tous les éléments affichés':`Page ${currentPage} sur ${totalPages}`}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handlePageChange(currentPage+1),disabled:currentPage===totalPages||itemsPerPage===Number.MAX_SAFE_INTEGER,children:\"Suivant\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"total-results\",children:[\"Total : \",filteredSites.length,\" r\\xE9sultat(s)\"]})]});};const fetchSites=async()=>{try{setLoading(true);setError(null);setGeocodingStatus(\"Chargement des sites...\");console.log(\"Récupération des sites depuis Firestore avec optimisations\");// Récupérer les sites depuis Firestore avec pagination optimisée\nconst sitesRef=collection(db,'sites');const LIMIT=250;// Augmenter la taille du lot pour réduire le nombre de requêtes\nlet lastDoc=null;let allSites=[];let hasMore=true;let loadedCount=0;while(hasMore){// Construire la requête avec pagination\nlet q;if(lastDoc){q=query(sitesRef,orderBy('nom'),startAfter(lastDoc),limit(LIMIT));}else{q=query(sitesRef,orderBy('nom'),limit(LIMIT));}// Utiliser getDocsFromServer pour forcer une requête au serveur sans utiliser le cache\nconst snapshot=await getDocsFromServer(q);if(snapshot.empty){hasMore=false;break;}// Optimiser la transformation des données\nconst batchSites=snapshot.docs.map(doc=>{const data=doc.data();return{id:doc.id,...data};});allSites=[...allSites,...batchSites];loadedCount+=batchSites.length;// Mettre à jour le statut de chargement moins fréquemment\nif(loadedCount%250===0||snapshot.docs.length<LIMIT){setGeocodingStatus(`Chargement des sites... ${loadedCount} chargés`);}// Mettre à jour le dernier document pour la pagination\nlastDoc=snapshot.docs[snapshot.docs.length-1];// Vérifier s'il y a plus de documents à récupérer\nif(snapshot.docs.length<LIMIT){hasMore=false;}}console.log(`${allSites.length} sites chargés depuis Firestore`);setSites(allSites);// Effacer les messages de statut après un court délai\nsetTimeout(()=>{setGeocodingStatus(null);},1000);setLoading(false);}catch(error){console.error('Erreur lors de la récupération des sites:',error);setError('Erreur lors de la récupération des données');setSites([]);setGeocodingStatus(null);setLoading(false);}};// Fonction pour gérer la sélection/désélection de tous les sites\nconst handleSelectAllChange=()=>{setSelectAll(!selectAll);};// Fonction pour géocoder tous les sites sélectionnés\nconst geocodeSelectedSites=async()=>{if(selectedSites.length===0){alert('Veuillez sélectionner au moins un site à géocoder');return;}try{setLoading(true);setGeocodingStatus('Géocodage en cours...');const updatedEditingSites={...editingSites};let successCount=0;let failCount=0;let currentCount=0;let cacheHitCount=0;// Traiter chaque site sélectionné\nfor(const siteId of selectedSites){const site=editingSites[siteId];currentCount++;if(site){setGeocodingStatus(`Géocodage en cours... (${currentCount}/${selectedSites.length})`);// Vérifier si les données minimales sont disponibles\nif(!site.nom&&!site.adresse){failCount++;console.warn(`Données minimales manquantes pour le site: ${site.nom||'Sans nom'}`);continue;}// Construire une adresse complète avec les informations disponibles\nconst addressParts=[site.nom,site.adresse,site.ville,site.codePostal].filter(Boolean);const fullAddress=addressParts.join(', ');console.log(`Tentative de géocodage pour \"${site.nom}\" avec l'adresse: \"${fullAddress}\"`);const coordinates=await geocodeAddress(site.nom||'',site.adresse||'',site.ville||'',site.codePostal||'');if(coordinates){// Si les coordonnées n'ont pas changé, c'est probablement un hit de cache\nif(site.latitude===coordinates.latitude&&site.longitude===coordinates.longitude){cacheHitCount++;}updatedEditingSites[siteId]={...site,latitude:coordinates.latitude,longitude:coordinates.longitude};successCount++;console.log(`Géocodage réussi pour \"${site.nom}\": Lat=${coordinates.latitude}, Lon=${coordinates.longitude}`);}else{failCount++;console.warn(`Échec du géocodage pour le site: ${site.nom||'Sans nom'}`);}}else{failCount++;console.warn(`Site non trouvé pour l'ID: ${siteId}`);}// Pause pour éviter de dépasser les limites de l'API, sauf pour le dernier élément\nif(currentCount<selectedSites.length){await new Promise(resolve=>setTimeout(resolve,500));// Réduit à 0.5 seconde grâce au cache\n}}setEditingSites(updatedEditingSites);setGeocodingStatus(`Géocodage terminé : ${successCount} réussis (dont ${cacheHitCount} depuis le cache), ${failCount} échoués. Enregistrement en cours...`);// Enregistrer automatiquement les modifications après le géocodage\nif(successCount>0){console.log(\"Enregistrement automatique après géocodage...\");// Créer un objet de recherche pour les IDs sélectionnés\nconst selectedIdsMap={};for(let i=0;i<selectedSites.length;i++){selectedIdsMap[selectedSites[i]]=true;}// Mettre à jour les documents Firestore\nlet saveSuccessCount=0;let saveErrorCount=0;// Traiter les sites géocodés\nfor(let i=0;i<selectedSites.length;i++){const siteId=selectedSites[i];const editedSite=updatedEditingSites[siteId];if(!editedSite){console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);continue;}try{// Convertir l'ID en chaîne de caractères pour Firestore\nconst siteIdString=String(siteId);console.log(`Sauvegarde des coordonnées pour le site ${siteIdString} (${editedSite.nom})...`);const siteRef=doc(db,'sites',siteIdString);// Vérifier si le document existe\nconst docSnap=await getDoc(siteRef);// Extraire l'ID avant la mise à jour\nconst{id,...updateData}=editedSite;if(docSnap.exists()){// Le document existe, on peut le mettre à jour\nawait updateDoc(siteRef,updateData);console.log(`Coordonnées du site ${siteIdString} (${editedSite.nom}) enregistrées avec succès`);saveSuccessCount++;}else{// Le document n'existe pas, on doit le créer\nconsole.log(`Le site ${siteIdString} n'existe pas, création avec coordonnées...`);await setDoc(siteRef,updateData);console.log(`Site ${siteIdString} créé avec coordonnées`);saveSuccessCount++;}}catch(updateError){console.error(`Erreur lors de la sauvegarde des coordonnées du site ${siteId}:`,updateError);saveErrorCount++;}}// Mettre à jour l'état local\nconst updatedSites=[];// Créer une nouvelle liste de sites avec les modifications\nfor(let i=0;i<sites.length;i++){const site=sites[i];const siteId=site.id;if(selectedIdsMap[siteId]&&updatedEditingSites[siteId]){// Si le site est sélectionné et modifié, utiliser la version modifiée\nupdatedSites.push({...updatedEditingSites[siteId]});}else{// Sinon, garder le site inchangé\nupdatedSites.push(site);}}// Mettre à jour les états\nsetSites(updatedSites);setFilteredSites(updatedSites);setGeocodingStatus(`Géocodage et enregistrement terminés : ${successCount} sites géocodés, ${saveSuccessCount} sites enregistrés, ${saveErrorCount} erreurs`);}// Masquer le statut après quelques secondes\nsetTimeout(()=>{setGeocodingStatus(null);},5000);}catch(error){console.error('Erreur lors du géocodage:',error);setGeocodingStatus(`Erreur lors du géocodage: ${error}`);// Masquer le message d'erreur après quelques secondes\nsetTimeout(()=>{setGeocodingStatus(null);},5000);}finally{setLoading(false);}};const toggleEditMode=()=>{if(editMode){// Si on quitte le mode édition, réinitialiser les sélections et les modifications\nsetSelectedSites([]);setEditingSites({});setSelectAll(false);setNewSites([]);// Rafraîchir les données depuis Firebase\nfetchSites();}else{// Si on entre en mode édition, initialiser les sites en édition\nconst editingSitesObj={};filteredSites.forEach(site=>{editingSitesObj[site.id]={...site};});setEditingSites(editingSitesObj);}// Inverser le mode édition\nsetEditMode(!editMode);// Réinitialiser la recherche rapide et les filtres\nsetQuickSearch('');setSelectedPole('');};const handleSave=async()=>{// Ne rien faire si aucun site n'est sélectionné et pas de nouveaux sites\nif(selectedSites.length===0&&newSites.length===0){alert('Veuillez sélectionner au moins un site à enregistrer ou créer un nouveau site');return;}try{setLoading(true);setError(null);console.log(\"Début de la sauvegarde...\");console.log(\"Sites sélectionnés:\",selectedSites);console.log(\"Nouveaux sites à créer:\",newSites.length);// Créer un objet de recherche pour les IDs sélectionnés\nconst selectedIdsMap={};for(let i=0;i<selectedSites.length;i++){selectedIdsMap[selectedSites[i]]=true;}// Mettre à jour les documents Firestore\nlet successCount=0;let errorCount=0;let newSitesAdded=0;// 1. D'abord, traiter les sites existants sélectionnés\nfor(let i=0;i<selectedSites.length;i++){const siteId=selectedSites[i];const editedSite=editingSites[siteId];if(!editedSite){console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);continue;}try{// Convertir l'ID en chaîne de caractères pour Firestore\nconst siteIdString=String(siteId);console.log(`Conversion de l'ID ${siteId} (${typeof siteId}) en chaîne: ${siteIdString} (${typeof siteIdString})`);const siteRef=doc(db,'sites',siteIdString);// Vérifier si le document existe\nconst docSnap=await getDoc(siteRef);// Extraire l'ID avant la mise à jour\nconst{id,...updateData}=editedSite;if(docSnap.exists()){// Le document existe, on peut le mettre à jour\nconsole.log(`Mise à jour du site ${siteIdString}...`);await updateDoc(siteRef,updateData);console.log(`Site ${siteIdString} mis à jour avec succès`);}else{// Le document n'existe pas, on doit le créer\nconsole.log(`Le site ${siteIdString} n'existe pas, création...`);await setDoc(siteRef,updateData);console.log(`Site ${siteIdString} créé avec succès`);}successCount++;}catch(updateError){console.error(`Erreur lors de la mise à jour du site ${siteId}:`,updateError);errorCount++;}}// 2. Ensuite, traiter les nouveaux sites temporaires\nfor(let i=0;i<newSites.length;i++){const newSite=newSites[i];// Vérifier que le site a au moins un nom (champ obligatoire)\nif(!newSite.nom||newSite.nom.trim()===''){console.log(`Nouveau site #${i+1} sans nom, ignoré`);continue;}try{// Supprimer l'ID temporaire et préparer les données pour l'ajout\nconst{id,...siteData}=newSite;console.log(`Ajout du nouveau site \"${newSite.nom}\"...`);// Utiliser addDoc pour générer un nouvel ID automatiquement\nconst sitesRef=collection(db,'sites');const docRef=await addDoc(sitesRef,siteData);console.log(`Nouveau site \"${newSite.nom}\" ajouté avec l'ID: ${docRef.id}`);// Ajouter le nouveau site à la liste des sites avec son ID réel\nconst newSiteWithId={id:docRef.id,...siteData};// Ajouter le nouveau site à la liste des sites\nsites.push(newSiteWithId);newSitesAdded++;successCount++;}catch(addError){console.error(`Erreur lors de l'ajout du nouveau site \"${newSite.nom}\":`,addError);errorCount++;}}console.log(`Sauvegarde terminée: ${successCount} succès (dont ${newSitesAdded} nouveaux sites), ${errorCount} erreurs`);// Mettre à jour l'état local\nconst updatedSites=[];// Créer une nouvelle liste de sites avec les modifications\nfor(let i=0;i<sites.length;i++){const site=sites[i];const siteId=site.id;if(selectedIdsMap[siteId]&&editingSites[siteId]){// Si le site est sélectionné et modifié, utiliser la version modifiée\nupdatedSites.push({...editingSites[siteId]});}else{// Sinon, garder le site inchangé\nupdatedSites.push(site);}}// Mettre à jour les états\nsetSites(updatedSites);setFilteredSites(updatedSites);// Afficher un message de confirmation\nalert(`${successCount} sites mis à jour avec succès${newSitesAdded>0?`, ${newSitesAdded} nouveaux sites ajoutés`:''}${errorCount>0?`, ${errorCount} erreurs`:''}`);// Réinitialiser les états\nsetEditMode(false);setSelectedSites([]);setEditingSites({});setNewSites([]);setSelectAll(false);}catch(error){console.error('Erreur globale lors de la sauvegarde:',error);alert('Une erreur est survenue lors de la sauvegarde');}finally{setLoading(false);setGeocodingStatus(null);}};// Fonction utilitaire pour comparer des objets\nconst isEqual=(obj1,obj2)=>{// Comparer les champs de base\nconst keys=new Set([...Object.keys(obj1),...Object.keys(obj2)]);for(const key of keys){// Gestion spéciale pour les tableaux (comme tournees)\nif(Array.isArray(obj1[key])&&Array.isArray(obj2[key])){if(obj1[key].length!==obj2[key].length)return false;if(!obj1[key].every((val,index)=>val===obj2[key][index]))return false;}// Comparaison standard pour les autres types\nelse if(obj1[key]!==obj2[key]){return false;}}return true;};// Supprimer les sites sélectionnés sans messages\nconst handleDelete=async()=>{if(selectedSites.length===0){return;}try{setLoading(true);setError(null);console.log(`Tentative de suppression de ${selectedSites.length} sites:`,selectedSites);// Récupérer les sites sélectionnés à partir de l'état sites\nconst sitesToDelete=sites.filter(site=>selectedSites.includes(site.id));console.log(\"Sites à supprimer (détails complets):\",sitesToDelete);if(sitesToDelete.length===0){console.warn(\"Aucun site trouvé pour les IDs sélectionnés\");setLoading(false);// Désactiver le chargement si aucun site à supprimer\nreturn;}// Rechercher spécifiquement le site \"SITE 000 TEST\" ou \"Périphérique TEST\" s'il est dans la liste\nconst testSite=sitesToDelete.find(site=>site.nom===\"SITE 000 TEST\"||site.nom.includes(\"TEST\")||site.nom.includes(\"Périphérique\")||site.pole===\"Périphérique\");if(testSite){console.log(\"Site TEST/Périphérique trouvé pour suppression:\",testSite);// Recherche spécifique pour le site problématique\nawait deleteSpecificTestSite();}// Supprimer les sites sélectionnés un par un\nfor(const site of sitesToDelete){try{// Ignorer le site TEST/Périphérique car il est traité séparément\nif(site.nom.includes(\"TEST\")||site.nom.includes(\"Périphérique\")||site.pole===\"Périphérique\"){console.log(`Site ${site.nom} traité séparément, ignoré dans la boucle principale`);continue;}console.log(`Traitement de la suppression pour le site:`,site);// Convertir l'ID en chaîne de caractères pour Firestore\nconst siteIdString=String(site.id);console.log(`Conversion de l'ID ${site.id} (${typeof site.id}) en chaîne: ${siteIdString} (${typeof siteIdString})`);// Vérifier si le site existe dans Firestore avant de le supprimer\nconst siteRef=doc(db,'sites',siteIdString);const docSnap=await getDoc(siteRef);if(docSnap.exists()){console.log(`Site ${siteIdString} (${site.nom}) trouvé dans Firestore, suppression...`);await deleteDoc(siteRef);console.log(`Site ${siteIdString} (${site.nom}) supprimé avec succès`);}else{console.warn(`Site ${siteIdString} (${site.nom}) non trouvé dans Firestore avec cet ID`);// Si le site n'est pas trouvé avec son ID, essayer de le trouver par son nom\nconsole.log(`Recherche du site \"${site.nom}\" par nom dans Firestore...`);const sitesRef=collection(db,'sites');const q=query(sitesRef,where('nom','==',site.nom));const querySnapshot=await getDocs(q);if(querySnapshot.empty){console.warn(`Aucun site trouvé avec le nom \"${site.nom}\" dans Firestore`);continue;}// Supprimer tous les documents trouvés (normalement un seul)\nlet deletedCount=0;for(const docSnapshot of querySnapshot.docs){const docId=docSnapshot.id;console.log(`Site trouvé avec l'ID Firestore: ${docId}, suppression...`);await deleteDoc(docSnapshot.ref);console.log(`Site \"${site.nom}\" (ID Firestore: ${docId}) supprimé avec succès`);deletedCount++;}console.log(`${deletedCount} document(s) supprimé(s) pour le site \"${site.nom}\"`);}}catch(deleteError){console.error(`Erreur lors de la suppression du site \"${site.nom}\":`,deleteError);}}console.log(\"Rechargement des sites depuis Firestore...\");// Recharger les données depuis Firestore pour s'assurer que nous avons les données les plus récentes\nawait fetchSites();// Réinitialiser les états\nsetEditMode(false);setSelectedSites([]);setEditingSites({});setSelectAll(false);}catch(error){console.error('Erreur lors de la suppression:',error);}finally{// S'assurer que l'état de chargement est toujours désactivé\nsetLoading(false);// Effacer tout message de statut\nsetGeocodingStatus(null);}};// Fonction spécifique pour supprimer le site problématique \"Périphérique TEST\"\nconst deleteSpecificTestSite=async()=>{try{console.log(\"Recherche spécifique du site problématique 'Périphérique TEST'...\");const sitesRef=collection(db,'sites');// Recherche par pole \"Périphérique\"\nconsole.log(\"Recherche par pole 'Périphérique'...\");const poleQuery=query(sitesRef,where('pole','==','Périphérique'));const poleSnapshot=await getDocs(poleQuery);if(!poleSnapshot.empty){console.log(`${poleSnapshot.size} sites avec pole 'Périphérique' trouvés`);for(const docSnapshot of poleSnapshot.docs){const siteData=docSnapshot.data();console.log(`Site trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);if(siteData.nom&&(siteData.nom.includes('TEST')||siteData.nom==='SITE 000 TEST')){console.log(`Suppression du site problématique: ${docSnapshot.id} (${siteData.nom})`);await deleteDoc(docSnapshot.ref);console.log(`Site problématique ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);}}}else{console.log(\"Aucun site avec pole 'Périphérique' trouvé\");}// Recherche par nom contenant \"TEST\"\nconsole.log(\"Recherche par nom contenant 'TEST'...\");const testQuery=query(sitesRef,where('nom','>=','TEST'),where('nom','<=','TEST\\uf8ff'));const testSnapshot=await getDocs(testQuery);if(!testSnapshot.empty){console.log(`${testSnapshot.size} sites contenant 'TEST' dans le nom trouvés`);for(const docSnapshot of testSnapshot.docs){const siteData=docSnapshot.data();console.log(`Site TEST trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}`);console.log(`Suppression du site TEST: ${docSnapshot.id} (${siteData.nom})`);await deleteDoc(docSnapshot.ref);console.log(`Site TEST ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);}}else{console.log(\"Aucun site avec 'TEST' dans le nom trouvé\");}// Recherche par nom exact \"SITE 000 TEST\"\nconsole.log(\"Recherche par nom exact 'SITE 000 TEST'...\");const exactQuery=query(sitesRef,where('nom','==','SITE 000 TEST'));const exactSnapshot=await getDocs(exactQuery);if(!exactSnapshot.empty){console.log(`${exactSnapshot.size} sites avec nom exact 'SITE 000 TEST' trouvés`);for(const docSnapshot of exactSnapshot.docs){console.log(`Suppression du site exact: ${docSnapshot.id} (SITE 000 TEST)`);await deleteDoc(docSnapshot.ref);console.log(`Site exact ${docSnapshot.id} (SITE 000 TEST) supprimé avec succès`);}}else{console.log(\"Aucun site avec nom exact 'SITE 000 TEST' trouvé\");}// Dernière tentative: recherche de tous les sites et filtrage manuel\nconsole.log(\"Recherche manuelle de tous les sites...\");const allSitesQuery=query(sitesRef,limit(1000));const allSitesSnapshot=await getDocs(allSitesQuery);let foundProblematicSite=false;for(const docSnapshot of allSitesSnapshot.docs){const siteData=docSnapshot.data();// Vérifier si c'est le site problématique\nif((siteData.pole==='Périphérique'||siteData.pole==='TEST')&&siteData.nom&&(siteData.nom.includes('TEST')||siteData.nom==='SITE 000 TEST')){foundProblematicSite=true;console.log(`Site problématique trouvé par recherche manuelle: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);console.log(`Suppression du site problématique: ${docSnapshot.id}`);await deleteDoc(docSnapshot.ref);console.log(`Site problématique ${docSnapshot.id} supprimé avec succès`);}}if(!foundProblematicSite){console.log(\"Aucun site problématique trouvé par recherche manuelle\");}return true;}catch(error){console.error(\"Erreur lors de la suppression spécifique du site problématique:\",error);return false;}};// Optimiser la fonction de suppression des doublons\nconst removeDuplicateSites=async()=>{if(!window.confirm(\"Cette opération va rechercher et supprimer les sites en double dans la base de données. Continuer ?\")){return;}try{setLoading(true);setError(null);setGeocodingStatus(\"Recherche des doublons en cours...\");// Récupérer tous les sites depuis Firestore de manière optimisée\nconst sitesRef=collection(db,'sites');const snapshot=await getDocsFromServer(query(sitesRef,limit(1000)));if(snapshot.empty){setGeocodingStatus(\"Aucun site trouvé dans la base de données.\");setTimeout(()=>setGeocodingStatus(null),3000);setLoading(false);return;}// Utiliser une Map pour de meilleures performances\nconst sitesByName=new Map();// Parcourir tous les sites et les regrouper par nom\nsnapshot.docs.forEach(doc=>{var _data$nom;const data=doc.data();const name=(_data$nom=data.nom)===null||_data$nom===void 0?void 0:_data$nom.trim();if(name){var _sitesByName$get;// Normaliser le nom pour éviter les problèmes de casse et d'espaces\nconst normalizedName=name.toLowerCase().replace(/\\s+/g,' ');if(!sitesByName.has(normalizedName)){sitesByName.set(normalizedName,[]);}(_sitesByName$get=sitesByName.get(normalizedName))===null||_sitesByName$get===void 0?void 0:_sitesByName$get.push({id:doc.id,data:data});}});// Identifier les noms qui ont des doublons\nconst duplicateNames=[];sitesByName.forEach((sites,name)=>{if(sites.length>1){duplicateNames.push(name);}});if(duplicateNames.length===0){setGeocodingStatus(\"Aucun doublon trouvé dans la base de données.\");setTimeout(()=>setGeocodingStatus(null),3000);setLoading(false);return;}setGeocodingStatus(`${duplicateNames.length} sites avec doublons trouvés. Traitement en cours...`);let totalDuplicatesRemoved=0;let processedCount=0;// Traiter les doublons par lots pour éviter de surcharger Firestore\nconst BATCH_SIZE=10;for(let i=0;i<duplicateNames.length;i+=BATCH_SIZE){const batch=duplicateNames.slice(i,i+BATCH_SIZE);// Traiter chaque lot en parallèle\nawait Promise.all(batch.map(async name=>{const sites=sitesByName.get(name)||[];console.log(`Traitement des doublons pour \"${name}\" (${sites.length} occurrences)`);// Trier les sites par priorité\nsites.sort((a,b)=>{// Priorité 1: Sites avec coordonnées\nconst aHasCoords=a.data.latitude&&a.data.longitude;const bHasCoords=b.data.latitude&&b.data.longitude;if(aHasCoords&&!bHasCoords)return-1;if(!aHasCoords&&bHasCoords)return 1;// Priorité 2: Sites avec adresse complète\nconst aHasFullAddress=a.data.adresse&&a.data.ville&&a.data.codePostal;const bHasFullAddress=b.data.adresse&&b.data.ville&&b.data.codePostal;if(aHasFullAddress&&!bHasFullAddress)return-1;if(!aHasFullAddress&&bHasFullAddress)return 1;// Priorité 3: Sites avec plus de champs remplis\nconst aFieldCount=Object.keys(a.data).filter(key=>a.data[key]).length;const bFieldCount=Object.keys(b.data).filter(key=>b.data[key]).length;if(aFieldCount>bFieldCount)return-1;if(aFieldCount<bFieldCount)return 1;// Priorité 4: ID plus récent\nreturn b.id.localeCompare(a.id);});// Garder le premier site et supprimer les autres\nconst siteToKeep=sites[0];const sitesToRemove=sites.slice(1);console.log(`Conservation du site ${siteToKeep.id} (${siteToKeep.data.nom}) et suppression de ${sitesToRemove.length} doublons`);// Supprimer les doublons\nfor(const site of sitesToRemove){try{const siteRef=doc(db,'sites',site.id);await deleteDoc(siteRef);console.log(`Site en double supprimé: ${site.id} (${site.data.nom})`);totalDuplicatesRemoved++;}catch(error){console.error(`Erreur lors de la suppression du doublon ${site.id}:`,error);}}processedCount++;if(processedCount%5===0||processedCount===duplicateNames.length){setGeocodingStatus(`Traitement en cours: ${processedCount}/${duplicateNames.length} sites traités, ${totalDuplicatesRemoved} doublons supprimés`);}}));}setGeocodingStatus(`Nettoyage terminé: ${totalDuplicatesRemoved} doublons supprimés sur ${duplicateNames.length} sites.`);// Recharger les sites après la suppression des doublons\nawait fetchSites();// Masquer le message après quelques secondes\nsetTimeout(()=>{setGeocodingStatus(null);},5000);}catch(error){console.error('Erreur lors de la suppression des doublons:',error);setGeocodingStatus(`Erreur lors de la suppression des doublons: ${error}`);setTimeout(()=>setGeocodingStatus(null),5000);}finally{setLoading(false);}};const toggleSiteSelection=id=>{if(selectedSites.includes(id)){setSelectedSites(selectedSites.filter(siteId=>siteId!==id));// Si on désélectionne un site, on désactive aussi \"Tout sélectionner\"\nsetSelectAll(false);}else{setSelectedSites([...selectedSites,id]);// Si tous les sites sont sélectionnés, on active \"Tout sélectionner\"\nif(selectedSites.length+1===sites.length){setSelectAll(true);}}};const handleCellChange=(id,field,value)=>{setEditingSites({...editingSites,[id]:{...editingSites[id],[field]:value}});};const addNewSiteRow=()=>{// Forcer le mode édition si ce n'est pas déjà le cas\nif(!editMode){setEditMode(true);}const newSite={id:`temp-${Date.now()}`,nom:'',pole:'',type:'',// Le type sera sélectionné dans le menu déroulant\nadresse:'',ville:'',codePostal:'',telephone:'',email:'',codeBarres:'',tournees:[],codesPorte:'',coordonnees:'',statut:'actif'};// Ajouter la nouvelle ligne au début du tableau\nsetNewSites(prevNewSites=>[newSite,...prevNewSites]);// Revenir à la première page pour voir le nouveau site\nsetCurrentPage(1);// Ajouter un délai pour permettre le rendu\nsetTimeout(()=>{const firstInput=document.querySelector('.sites-table-container .new-site-row input');if(firstInput){firstInput.focus();}},100);};const handleNewSiteChange=(index,field,value)=>{const updatedNewSites=[...newSites];updatedNewSites[index]={...updatedNewSites[index],[field]:value};setNewSites(updatedNewSites);};const removeNewSiteRow=index=>{const updatedNewSites=newSites.filter((_,i)=>i!==index);setNewSites(updatedNewSites);};// Fonction pour gérer le changement de pôle\nconst handlePoleChange=pole=>{setSelectedPole(pole);};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Chargement des sites...\"})]});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"section-header\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"Sites\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"sticky-header-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header-actions\",children:editMode?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{className:\"button\",onClick:handleSave,disabled:loading||selectedSites.length===0&&newSites.length===0,style:{backgroundColor:'#4CAF50',// Vert\ncolor:'white',fontWeight:'bold'},title:\"Enregistrer les modifications\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-save\"}),\" Enr. \",selectedSites.length>0||newSites.length>0?`(${selectedSites.length}${newSites.length>0?`+${newSites.length}`:''})`:'']}),/*#__PURE__*/_jsxs(\"button\",{className:\"button button-secondary\",onClick:()=>{if(window.confirm(\"Êtes-vous sûr de vouloir annuler toutes les modifications ?\")){setEditingSites({});setNewSites([]);setSelectedSites([]);setSelectAll(false);setEditMode(false);}},style:{marginLeft:'5px'},disabled:loading,title:\"Annuler les modifications\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"}),\" Annuler\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"button\",onClick:addNewSiteRow,style:{marginLeft:'5px',backgroundColor:'#FF9800',// Orange\ncolor:'white',fontWeight:'bold'},disabled:loading,title:\"Ajouter un nouveau site\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-plus\"}),\" Ajouter\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"button button-danger\",onClick:handleDelete,disabled:selectedSites.length===0||loading,style:{marginLeft:'5px',backgroundColor:'#f44336',color:'white',fontWeight:'bold'},title:\"Supprimer les sites s\\xE9lectionn\\xE9s\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash-alt\"}),\" Sup. (\",selectedSites.length,\")\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"button\",onClick:geocodeSelectedSites,disabled:selectedSites.length===0||loading,style:{marginLeft:'5px'},title:\"G\\xE9ocoder les sites s\\xE9lectionn\\xE9s\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-map-marker-alt\"}),\" G\\xE9o. (\",selectedSites.length,\")\"]})]}):/*#__PURE__*/_jsxs(\"button\",{className:\"button\",onClick:toggleEditMode,children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"}),\" Modifier\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"quick-search-container\",style:{marginTop:'10px'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"quick-search-input\",placeholder:\"Recherche rapide...\",value:quickSearch,onChange:e=>setQuickSearch(e.target.value),disabled:loading}),/*#__PURE__*/_jsx(\"div\",{className:\"pole-filter\",children:/*#__PURE__*/_jsx(PoleFilter,{onPoleChange:handlePoleChange,selectedPole:selectedPole,label:\"Filtrer par p\\xF4le\",className:\"pole-filter-component\"})})]})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsxs(\"div\",{className:\"sites-table-container\",style:{overflowX:'auto'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"results-info\",children:/*#__PURE__*/_jsxs(\"p\",{children:[filteredSites.length,\" r\\xE9sultat(s) trouv\\xE9(s)\",quickSearch?` pour la recherche \"${quickSearch}\"`:'']})}),/*#__PURE__*/_jsxs(\"table\",{className:`data-table ${editMode?'editing':''}`,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[editMode&&/*#__PURE__*/_jsx(\"th\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectAll,onChange:handleSelectAllChange,title:\"S\\xE9lectionner/D\\xE9s\\xE9lectionner tout\"})}),/*#__PURE__*/_jsx(\"th\",{children:\"P\\xD4LE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"TYPE DE SITE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"NOM\"}),/*#__PURE__*/_jsx(\"th\",{children:\"ADRESSE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"COMPL\\xC9MENT\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VILLE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"CODE POSTAL\"}),/*#__PURE__*/_jsx(\"th\",{children:\"TOURN\\xC9ES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"HORAIRES L-V\"}),/*#__PURE__*/_jsx(\"th\",{children:\"HORAIRES SAMEDI\"}),/*#__PURE__*/_jsx(\"th\",{children:\"CODE-BARRE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"COORDONN\\xC9ES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"STATUT\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[editMode&&newSites.map((site,index)=>{var _site$tournees;return/*#__PURE__*/_jsxs(\"tr\",{className:\"new-site-row\",children:[/*#__PURE__*/_jsx(\"td\",{style:{display:'none'}}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(PoleSelector,{value:site.pole||'',onChange:value=>handleNewSiteChange(index,'pole',value),placeholder:\"S\\xE9lectionner un p\\xF4le\",style:{width:'100%'},showSearch:true,allowClear:true,title:\"P\\xF4le du site\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"select\",{value:site.type||'',onChange:e=>handleNewSiteChange(index,'type',e.target.value),className:\"inline-edit-select\",title:\"Type de site\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"S\\xE9lectionner un type\"}),SITE_TYPES.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type,children:type},type))]})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.nom||'',onChange:e=>handleNewSiteChange(index,'nom',e.target.value),className:\"inline-edit-input\",title:\"Nom\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.adresse||'',onChange:e=>handleNewSiteChange(index,'adresse',e.target.value),className:\"inline-edit-input\",title:\"Adresse\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.complementAdresse||'',onChange:e=>handleNewSiteChange(index,'complementAdresse',e.target.value),className:\"inline-edit-input\",title:\"Compl\\xE9ment d'adresse\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.ville||'',onChange:e=>handleNewSiteChange(index,'ville',e.target.value),className:\"inline-edit-input\",title:\"Ville\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.codePostal||'',onChange:e=>handleNewSiteChange(index,'codePostal',e.target.value),className:\"inline-edit-input\",title:\"Code postal\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_site$tournees=site.tournees)===null||_site$tournees===void 0?void 0:_site$tournees.join(', '))||'',onChange:e=>handleNewSiteChange(index,'tournees',e.target.value.split(',').map(s=>s.trim())),className:\"inline-edit-input\",title:\"Tourn\\xE9es\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.horairesLV||'',onChange:e=>handleNewSiteChange(index,'horairesLV',e.target.value),className:\"inline-edit-input\",title:\"Horaires Lundi-Vendredi\",placeholder:\"HH:MM-HH:MM\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.horairesSamedi||'',onChange:e=>handleNewSiteChange(index,'horairesSamedi',e.target.value),className:\"inline-edit-input\",title:\"Horaires Samedi\",placeholder:\"HH:MM-HH:MM\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:site.codeBarres||'',onChange:e=>handleNewSiteChange(index,'codeBarres',e.target.value),className:\"inline-edit-input\",title:\"Code-barre\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"span\",{className:\"coordinates-empty\",children:[\"Pas de coordonn\\xE9es\",/*#__PURE__*/_jsx(\"br\",{}),\"(utiliser le g\\xE9ocodage)\"]})}),/*#__PURE__*/_jsx(\"td\",{children:site.id}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"select\",{value:site.statut||'actif',onChange:e=>handleNewSiteChange(index,'statut',e.target.value),className:\"inline-edit-select\",title:\"Statut du site\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"actif\",children:\"Actif\"}),/*#__PURE__*/_jsx(\"option\",{value:\"inactif\",children:\"Inactif\"})]})})]},`new-site-${site.id}`);}),paginatedAndFilteredSites.map((site,index)=>{var _editingSites$site$id,_editingSites$site$id2,_editingSites$site$id3,_editingSites$site$id4,_editingSites$site$id5,_editingSites$site$id6,_editingSites$site$id7,_editingSites$site$id8,_editingSites$site$id9,_site$tournees2,_editingSites$site$id10,_editingSites$site$id11,_editingSites$site$id12,_editingSites$site$id13;return/*#__PURE__*/_jsxs(\"tr\",{className:selectedSites.includes(site.id)?'selected-row':'',children:[editMode&&/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedSites.includes(site.id),onChange:()=>toggleSiteSelection(site.id),title:\"S\\xE9lectionner ce site\"})}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(PoleSelector,{value:((_editingSites$site$id=editingSites[site.id])===null||_editingSites$site$id===void 0?void 0:_editingSites$site$id.pole)||site.pole||'',onChange:value=>handleCellChange(site.id,'pole',value),placeholder:\"S\\xE9lectionner un p\\xF4le\",style:{width:'100%'},showSearch:true,allowClear:true,title:\"P\\xF4le du site\"}):getPoleNameById(site.pole)}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsxs(\"select\",{value:((_editingSites$site$id2=editingSites[site.id])===null||_editingSites$site$id2===void 0?void 0:_editingSites$site$id2.type)||site.type||'',onChange:e=>handleCellChange(site.id,'type',e.target.value),className:\"inline-edit-select\",title:\"Type de site\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"S\\xE9lectionner un type\"}),SITE_TYPES.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type,children:type},type))]}):site.type||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id3=editingSites[site.id])===null||_editingSites$site$id3===void 0?void 0:_editingSites$site$id3.nom)||site.nom||'',onChange:e=>handleCellChange(site.id,'nom',e.target.value),className:\"inline-edit-input\",title:\"Nom\"}):site.nom||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id4=editingSites[site.id])===null||_editingSites$site$id4===void 0?void 0:_editingSites$site$id4.adresse)||site.adresse||'',onChange:e=>handleCellChange(site.id,'adresse',e.target.value),className:\"inline-edit-input\",title:\"Adresse\"}):site.adresse||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id5=editingSites[site.id])===null||_editingSites$site$id5===void 0?void 0:_editingSites$site$id5.complementAdresse)||site.complementAdresse||'',onChange:e=>handleCellChange(site.id,'complementAdresse',e.target.value),className:\"inline-edit-input\",title:\"Compl\\xE9ment d'adresse\"}):site.complementAdresse||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id6=editingSites[site.id])===null||_editingSites$site$id6===void 0?void 0:_editingSites$site$id6.ville)||site.ville||'',onChange:e=>handleCellChange(site.id,'ville',e.target.value),className:\"inline-edit-input\",title:\"Ville\"}):site.ville||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id7=editingSites[site.id])===null||_editingSites$site$id7===void 0?void 0:_editingSites$site$id7.codePostal)||site.codePostal||'',onChange:e=>handleCellChange(site.id,'codePostal',e.target.value),className:\"inline-edit-input\",title:\"Code postal\"}):site.codePostal||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id8=editingSites[site.id])===null||_editingSites$site$id8===void 0?void 0:(_editingSites$site$id9=_editingSites$site$id8.tournees)===null||_editingSites$site$id9===void 0?void 0:_editingSites$site$id9.join(', '))||'',onChange:e=>handleCellChange(site.id,'tournees',e.target.value.split(',').map(s=>s.trim())),className:\"inline-edit-input\",title:\"Tourn\\xE9es\"}):((_site$tournees2=site.tournees)===null||_site$tournees2===void 0?void 0:_site$tournees2.join(', '))||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id10=editingSites[site.id])===null||_editingSites$site$id10===void 0?void 0:_editingSites$site$id10.horairesLV)||site.horairesLV||'',onChange:e=>handleCellChange(site.id,'horairesLV',e.target.value),className:\"inline-edit-input\",title:\"Horaires Lundi-Vendredi\",placeholder:\"HH:MM-HH:MM\",pattern:\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"}):site.horairesLV||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id11=editingSites[site.id])===null||_editingSites$site$id11===void 0?void 0:_editingSites$site$id11.horairesSamedi)||site.horairesSamedi||'',onChange:e=>handleCellChange(site.id,'horairesSamedi',e.target.value),className:\"inline-edit-input\",title:\"Horaires Samedi\",placeholder:\"HH:MM-HH:MM\",pattern:\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"}):site.horairesSamedi||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:((_editingSites$site$id12=editingSites[site.id])===null||_editingSites$site$id12===void 0?void 0:_editingSites$site$id12.codeBarres)||site.codeBarres||'',onChange:e=>handleCellChange(site.id,'codeBarres',e.target.value),className:\"inline-edit-input\",title:\"Code-barre\"}):site.codeBarres||''}),/*#__PURE__*/_jsx(\"td\",{children:editMode?site.latitude&&site.longitude?/*#__PURE__*/_jsxs(\"span\",{className:\"coordinates-display\",children:[\"Lat: \",site.latitude.toFixed(6),/*#__PURE__*/_jsx(\"br\",{}),\"Lon: \",site.longitude.toFixed(6)]}):/*#__PURE__*/_jsxs(\"span\",{className:\"coordinates-empty\",children:[\"Pas de coordonn\\xE9es\",/*#__PURE__*/_jsx(\"br\",{}),\"(utiliser le g\\xE9ocodage)\"]}):site.latitude&&site.longitude?`Lat: ${site.latitude.toFixed(6)}, Lon: ${site.longitude.toFixed(6)}`:'-'}),/*#__PURE__*/_jsx(\"td\",{children:site.id}),/*#__PURE__*/_jsx(\"td\",{children:editMode?/*#__PURE__*/_jsxs(\"select\",{value:((_editingSites$site$id13=editingSites[site.id])===null||_editingSites$site$id13===void 0?void 0:_editingSites$site$id13.statut)||site.statut||'actif',onChange:e=>handleCellChange(site.id,'statut',e.target.value),className:\"inline-edit-select\",title:\"Statut du site\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"actif\",children:\"Actif\"}),/*#__PURE__*/_jsx(\"option\",{value:\"inactif\",children:\"Inactif\"})]}):site.statut==='actif'||!site.statut?'Actif':'Inactif'})]},`site-${site.id}-${index}`);})]})]}),renderPagination()]})]});};export default Sites;","map":{"version":3,"names":["React","useState","useEffect","useMemo","db","collection","getDocs","addDoc","updateDoc","deleteDoc","doc","getDoc","query","limit","startAfter","orderBy","setDoc","getDocsFromServer","where","disableNetwork","enableNetwork","geocodeAddress","PoleSelector","PoleFilter","usePoles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","disableStructuralAndChronologicalTracking","console","log","error","SITE_TYPES","Sites","sites","setSites","loading","setLoading","setError","geocodingStatus","setGeocodingStatus","editMode","setEditMode","selectedSites","setSelectedSites","editingSites","setEditingSites","selectAll","setSelectAll","newSites","setNewSites","quickSearch","setQuickSearch","filteredSites","setFilteredSites","selectedPole","setSelectedPole","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","itemsPerPageOptions","poles","getPoleNameById","poleId","pole","find","p","id","nom","fetchSites","map","site","length","trim","results","filter","searchTerm","toLowerCase","includes","adresse","ville","codePostal","telephone","email","type","statut","codeBarres","paginatedAndFilteredSites","filtered","Number","MAX_SAFE_INTEGER","startIndex","endIndex","Math","min","adjustedStartIndex","remainingSlots","max","adjustedEndIndex","slice","totalPages","ceil","handlePageChange","newPage","handleItemsPerPageChange","newItemsPerPage","renderPagination","className","children","value","onChange","e","target","title","option","onClick","disabled","sitesRef","LIMIT","lastDoc","allSites","hasMore","loadedCount","q","snapshot","empty","batchSites","docs","data","setTimeout","handleSelectAllChange","geocodeSelectedSites","alert","updatedEditingSites","successCount","failCount","currentCount","cacheHitCount","siteId","warn","addressParts","Boolean","fullAddress","join","coordinates","latitude","longitude","Promise","resolve","selectedIdsMap","i","saveSuccessCount","saveErrorCount","editedSite","siteIdString","String","siteRef","docSnap","updateData","exists","updateError","updatedSites","push","toggleEditMode","editingSitesObj","forEach","handleSave","errorCount","newSitesAdded","newSite","siteData","docRef","newSiteWithId","addError","isEqual","obj1","obj2","keys","Set","Object","key","Array","isArray","every","val","index","handleDelete","sitesToDelete","testSite","deleteSpecificTestSite","querySnapshot","deletedCount","docSnapshot","docId","ref","deleteError","poleQuery","poleSnapshot","size","testQuery","testSnapshot","exactQuery","exactSnapshot","allSitesQuery","allSitesSnapshot","foundProblematicSite","removeDuplicateSites","window","confirm","sitesByName","Map","_data$nom","name","_sitesByName$get","normalizedName","replace","has","set","get","duplicateNames","totalDuplicatesRemoved","processedCount","BATCH_SIZE","batch","all","sort","a","b","aHasCoords","bHasCoords","aHasFullAddress","bHasFullAddress","aFieldCount","bFieldCount","localeCompare","siteToKeep","sitesToRemove","toggleSiteSelection","handleCellChange","field","addNewSiteRow","Date","now","tournees","codesPorte","coordonnees","prevNewSites","firstInput","document","querySelector","focus","handleNewSiteChange","updatedNewSites","removeNewSiteRow","_","handlePoleChange","style","backgroundColor","color","fontWeight","marginLeft","marginTop","placeholder","onPoleChange","label","overflowX","checked","_site$tournees","display","width","showSearch","allowClear","complementAdresse","split","s","horairesLV","horairesSamedi","_editingSites$site$id","_editingSites$site$id2","_editingSites$site$id3","_editingSites$site$id4","_editingSites$site$id5","_editingSites$site$id6","_editingSites$site$id7","_editingSites$site$id8","_editingSites$site$id9","_site$tournees2","_editingSites$site$id10","_editingSites$site$id11","_editingSites$site$id12","_editingSites$site$id13","pattern","toFixed"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/Sites.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { db } from '../config/firebase';\r\nimport { \r\n  collection, \r\n  getDocs, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  doc, \r\n  getDoc, \r\n  query, \r\n  limit, \r\n  startAfter, \r\n  orderBy, \r\n  setDoc, \r\n  getDocsFromServer, \r\n  where,\r\n  DocumentData,\r\n  QueryDocumentSnapshot,\r\n  QuerySnapshot,\r\n  DocumentSnapshot,\r\n  getFirestore,\r\n  enableIndexedDbPersistence,\r\n  disableNetwork,\r\n  enableNetwork\r\n} from 'firebase/firestore';\r\nimport { geocodeAddress } from '../utils/geocoding';\r\nimport { Site } from '../types/index';\r\nimport './EditMode.css';\r\nimport './Sites.css';\r\nimport PoleSelector from './PoleSelector';\r\nimport PoleFilter from './PoleFilter';\r\nimport { usePoles } from '../services/PoleService';\r\n\r\n// Désactiver le suivi de structure et de chronologie pour améliorer les performances\r\nconst disableStructuralAndChronologicalTracking = async () => {\r\n  try {\r\n    // Désactiver temporairement le réseau pour éviter les requêtes pendant la configuration\r\n    await disableNetwork(db);\r\n    console.log(\"Réseau temporairement désactivé pour configuration\");\r\n    \r\n    // Réactiver le réseau avec les optimisations\r\n    await enableNetwork(db);\r\n    console.log(\"Réseau réactivé avec optimisations de performance\");\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'optimisation de Firestore:\", error);\r\n  }\r\n};\r\n\r\n// Appeler la fonction d'optimisation au chargement du composant\r\ndisableStructuralAndChronologicalTracking();\r\n\r\n// Ajouter la constante des types de sites disponibles\r\nconst SITE_TYPES = [\r\n  'Laboratoire',\r\n  'Clinique',\r\n  'Plateau technique',\r\n  'Point de collecte',\r\n  'Etablissement de santé',\r\n  'Ehpad',\r\n  'Vétérinaire'\r\n];\r\n\r\nconst Sites: React.FC = () => {\r\n  const [sites, setSites] = useState<Site[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [geocodingStatus, setGeocodingStatus] = useState<string | null>(null);\r\n\r\n  // État pour le mode édition et la sélection multiple\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [selectedSites, setSelectedSites] = useState<string[]>([]);\r\n  const [editingSites, setEditingSites] = useState<{[key: string]: Site}>({});\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  \r\n  // Ajouter un nouvel état pour les nouveaux sites temporaires\r\n  const [newSites, setNewSites] = useState<Partial<Site>[]>([]);\r\n  \r\n  // État pour la recherche rapide\r\n  const [quickSearch, setQuickSearch] = useState<string>('');\r\n  const [filteredSites, setFilteredSites] = useState<Site[]>([]);\r\n\r\n  // Ajout du filtre par pôle\r\n  const [selectedPole, setSelectedPole] = useState<string>('');\r\n\r\n  // Nouveaux états pour la pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(20); // Par défaut 20 éléments\r\n  \r\n  // Options pour le nombre d'éléments par page\r\n  const itemsPerPageOptions = [20, 30, 50, 100, 'Tous'];\r\n\r\n  // Ajoutez le hook usePoles\r\n  const { poles } = usePoles();\r\n\r\n  // Fonction pour convertir ID de pôle en nom\r\n  const getPoleNameById = (poleId: string | undefined): string => {\r\n    if (!poleId) return '';\r\n    const pole = poles.find(p => p.id === poleId);\r\n    return pole ? pole.nom : poleId;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSites();\r\n  }, []);\r\n\r\n  // Effet pour gérer la sélection/désélection de tous les sites\r\n  useEffect(() => {\r\n    if (selectAll) {\r\n      setSelectedSites(sites.map(site => site.id));\r\n    } else if (selectedSites.length === sites.length) {\r\n      // Si tous les sites sont sélectionnés mais que selectAll est false, cela signifie que l'utilisateur a désélectionné\r\n      setSelectedSites([]);\r\n    }\r\n  }, [selectAll]);\r\n  \r\n  // Initialiser les sites filtrés au chargement\r\n  useEffect(() => {\r\n    setFilteredSites(sites);\r\n  }, [sites]);\r\n\r\n  // Effet pour filtrer les sites en fonction de la recherche rapide\r\n  useEffect(() => {\r\n    if (!quickSearch.trim() && !selectedPole) {\r\n      // Si la recherche est vide et aucun pôle sélectionné, afficher tous les sites\r\n      setFilteredSites(sites);\r\n      return;\r\n    }\r\n\r\n    let results = sites;\r\n\r\n    // Filtrer par pôle si un pôle est sélectionné\r\n    if (selectedPole) {\r\n      results = results.filter(site => site.pole === selectedPole);\r\n    }\r\n\r\n    // Ensuite filtrer par recherche rapide\r\n    if (quickSearch.trim()) {\r\n      const searchTerm = quickSearch.toLowerCase().trim();\r\n      results = results.filter(site => {\r\n        // Rechercher dans tous les champs textuels du site\r\n        return (\r\n          (site.nom || '').toLowerCase().includes(searchTerm) ||\r\n          (site.adresse || '').toLowerCase().includes(searchTerm) ||\r\n          (site.ville || '').toLowerCase().includes(searchTerm) ||\r\n          (site.codePostal || '').toLowerCase().includes(searchTerm) ||\r\n          (site.telephone || '').toLowerCase().includes(searchTerm) ||\r\n          (site.email || '').toLowerCase().includes(searchTerm) ||\r\n          (site.type || '').toLowerCase().includes(searchTerm) ||\r\n          (site.statut || '').toLowerCase().includes(searchTerm) ||\r\n          (site.codeBarres || '').toLowerCase().includes(searchTerm)\r\n        );\r\n      });\r\n    }\r\n\r\n    setFilteredSites(results);\r\n  }, [quickSearch, sites, selectedPole]);\r\n\r\n  // Pagination et filtrage des sites\r\n  const paginatedAndFilteredSites = useMemo(() => {\r\n    // D'abord filtrer\r\n    const filtered = filteredSites;\r\n    \r\n    // Si itemsPerPage est très grand (option \"Tous\"), retourner tous les sites filtrés\r\n    if (itemsPerPage === Number.MAX_SAFE_INTEGER) {\r\n      return filtered;\r\n    }\r\n    \r\n    // Sinon, paginer normalement\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = Math.min(startIndex + itemsPerPage, filtered.length);\r\n    \r\n    // S'il y a des nouveaux sites en mode édition, réduire le nombre de sites existants affichés\r\n    if (editMode && newSites.length > 0) {\r\n      const adjustedStartIndex = Math.min(startIndex, filtered.length);\r\n      const remainingSlots = Math.max(0, itemsPerPage - newSites.length);\r\n      const adjustedEndIndex = Math.min(adjustedStartIndex + remainingSlots, filtered.length);\r\n      \r\n      return filtered.slice(adjustedStartIndex, adjustedEndIndex);\r\n    }\r\n    \r\n    return filtered.slice(startIndex, endIndex);\r\n  }, [filteredSites, currentPage, itemsPerPage, editMode, newSites.length]);\r\n\r\n  // Calculer le nombre total de pages\r\n  const totalPages = Math.ceil(filteredSites.length / itemsPerPage);\r\n\r\n  // Fonction pour changer de page\r\n  const handlePageChange = (newPage: number) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Fonction pour changer le nombre d'éléments par page\r\n  const handleItemsPerPageChange = (newItemsPerPage: number | string) => {\r\n    if (newItemsPerPage === 'Tous') {\r\n      // Si \"Tous\" est sélectionné, définir le nombre d'éléments par page à un nombre très élevé\r\n      // pour afficher tous les sites sur une seule page\r\n      setItemsPerPage(Number.MAX_SAFE_INTEGER);\r\n    } else {\r\n      setItemsPerPage(Number(newItemsPerPage));\r\n    }\r\n    // Réinitialiser à la première page quand on change le nombre d'éléments\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  // Rendu de la pagination\r\n  const renderPagination = () => {\r\n    return (\r\n      <div className=\"pagination-container\">\r\n        <div className=\"items-per-page\">\r\n          <label>Éléments par page : </label>\r\n          <select \r\n            value={itemsPerPage === Number.MAX_SAFE_INTEGER ? 'Tous' : itemsPerPage} \r\n            onChange={(e) => handleItemsPerPageChange(e.target.value)}\r\n            title=\"Nombre d'éléments par page\"\r\n            aria-label=\"Nombre d'éléments par page\"\r\n          >\r\n            {itemsPerPageOptions.map(option => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"pagination-controls\">\r\n          <button \r\n            onClick={() => handlePageChange(currentPage - 1)} \r\n            disabled={currentPage === 1 || itemsPerPage === Number.MAX_SAFE_INTEGER}\r\n          >\r\n            Précédent\r\n          </button>\r\n          \r\n          <span className=\"page-info\">\r\n            {itemsPerPage === Number.MAX_SAFE_INTEGER ? \r\n              'Tous les éléments affichés' : \r\n              `Page ${currentPage} sur ${totalPages}`\r\n            }\r\n          </span>\r\n          \r\n          <button \r\n            onClick={() => handlePageChange(currentPage + 1)} \r\n            disabled={currentPage === totalPages || itemsPerPage === Number.MAX_SAFE_INTEGER}\r\n          >\r\n            Suivant\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"total-results\">\r\n          Total : {filteredSites.length} résultat(s)\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const fetchSites = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setGeocodingStatus(\"Chargement des sites...\");\r\n      \r\n      console.log(\"Récupération des sites depuis Firestore avec optimisations\");\r\n      \r\n      // Récupérer les sites depuis Firestore avec pagination optimisée\r\n      const sitesRef = collection(db, 'sites');\r\n      const LIMIT = 250; // Augmenter la taille du lot pour réduire le nombre de requêtes\r\n      \r\n      let lastDoc: QueryDocumentSnapshot<DocumentData> | null = null;\r\n      let allSites: Array<Site> = [];\r\n      let hasMore = true;\r\n      let loadedCount = 0;\r\n      \r\n      while (hasMore) {\r\n        // Construire la requête avec pagination\r\n        let q;\r\n        if (lastDoc) {\r\n          q = query(sitesRef, orderBy('nom'), startAfter(lastDoc), limit(LIMIT));\r\n        } else {\r\n          q = query(sitesRef, orderBy('nom'), limit(LIMIT));\r\n        }\r\n        \r\n        // Utiliser getDocsFromServer pour forcer une requête au serveur sans utiliser le cache\r\n        const snapshot: QuerySnapshot<DocumentData> = await getDocsFromServer(q);\r\n        \r\n        if (snapshot.empty) {\r\n          hasMore = false;\r\n          break;\r\n        }\r\n        \r\n        // Optimiser la transformation des données\r\n        const batchSites = snapshot.docs.map((doc: QueryDocumentSnapshot<DocumentData>) => {\r\n          const data = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            ...data\r\n          } as Site;\r\n        });\r\n        \r\n        allSites = [...allSites, ...batchSites];\r\n        loadedCount += batchSites.length;\r\n        \r\n        // Mettre à jour le statut de chargement moins fréquemment\r\n        if (loadedCount % 250 === 0 || snapshot.docs.length < LIMIT) {\r\n          setGeocodingStatus(`Chargement des sites... ${loadedCount} chargés`);\r\n        }\r\n        \r\n        // Mettre à jour le dernier document pour la pagination\r\n        lastDoc = snapshot.docs[snapshot.docs.length - 1];\r\n        \r\n        // Vérifier s'il y a plus de documents à récupérer\r\n        if (snapshot.docs.length < LIMIT) {\r\n          hasMore = false;\r\n        }\r\n      }\r\n      \r\n      console.log(`${allSites.length} sites chargés depuis Firestore`);\r\n      setSites(allSites);\r\n      \r\n      // Effacer les messages de statut après un court délai\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 1000);\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des sites:', error);\r\n      setError('Erreur lors de la récupération des données');\r\n      setSites([]);\r\n      setGeocodingStatus(null);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour gérer la sélection/désélection de tous les sites\r\n  const handleSelectAllChange = () => {\r\n    setSelectAll(!selectAll);\r\n  };\r\n\r\n  // Fonction pour géocoder tous les sites sélectionnés\r\n  const geocodeSelectedSites = async () => {\r\n    if (selectedSites.length === 0) {\r\n      alert('Veuillez sélectionner au moins un site à géocoder');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setGeocodingStatus('Géocodage en cours...');\r\n      \r\n      const updatedEditingSites = { ...editingSites };\r\n      let successCount = 0;\r\n      let failCount = 0;\r\n      let currentCount = 0;\r\n      let cacheHitCount = 0;\r\n      \r\n      // Traiter chaque site sélectionné\r\n      for (const siteId of selectedSites) {\r\n        const site = editingSites[siteId];\r\n        currentCount++;\r\n        \r\n        if (site) {\r\n          setGeocodingStatus(`Géocodage en cours... (${currentCount}/${selectedSites.length})`);\r\n          \r\n          // Vérifier si les données minimales sont disponibles\r\n          if (!site.nom && !site.adresse) {\r\n            failCount++;\r\n            console.warn(`Données minimales manquantes pour le site: ${site.nom || 'Sans nom'}`);\r\n            continue;\r\n          }\r\n          \r\n          // Construire une adresse complète avec les informations disponibles\r\n          const addressParts = [\r\n            site.nom,\r\n            site.adresse,\r\n            site.ville,\r\n            site.codePostal\r\n          ].filter(Boolean);\r\n          \r\n          const fullAddress = addressParts.join(', ');\r\n          \r\n          console.log(`Tentative de géocodage pour \"${site.nom}\" avec l'adresse: \"${fullAddress}\"`);\r\n          \r\n          const coordinates = await geocodeAddress(\r\n            site.nom || '',\r\n            site.adresse || '',\r\n            site.ville || '',\r\n            site.codePostal || ''\r\n          );\r\n          \r\n          if (coordinates) {\r\n            // Si les coordonnées n'ont pas changé, c'est probablement un hit de cache\r\n            if (site.latitude === coordinates.latitude && site.longitude === coordinates.longitude) {\r\n              cacheHitCount++;\r\n            }\r\n            \r\n            updatedEditingSites[siteId] = {\r\n              ...site,\r\n              latitude: coordinates.latitude,\r\n              longitude: coordinates.longitude\r\n            };\r\n            successCount++;\r\n            console.log(`Géocodage réussi pour \"${site.nom}\": Lat=${coordinates.latitude}, Lon=${coordinates.longitude}`);\r\n          } else {\r\n            failCount++;\r\n            console.warn(`Échec du géocodage pour le site: ${site.nom || 'Sans nom'}`);\r\n          }\r\n        } else {\r\n          failCount++;\r\n          console.warn(`Site non trouvé pour l'ID: ${siteId}`);\r\n        }\r\n        \r\n        // Pause pour éviter de dépasser les limites de l'API, sauf pour le dernier élément\r\n        if (currentCount < selectedSites.length) {\r\n          await new Promise(resolve => setTimeout(resolve, 500)); // Réduit à 0.5 seconde grâce au cache\r\n        }\r\n      }\r\n      \r\n      setEditingSites(updatedEditingSites);\r\n      setGeocodingStatus(`Géocodage terminé : ${successCount} réussis (dont ${cacheHitCount} depuis le cache), ${failCount} échoués. Enregistrement en cours...`);\r\n      \r\n      // Enregistrer automatiquement les modifications après le géocodage\r\n      if (successCount > 0) {\r\n        console.log(\"Enregistrement automatique après géocodage...\");\r\n        \r\n        // Créer un objet de recherche pour les IDs sélectionnés\r\n        const selectedIdsMap: Record<string, boolean> = {};\r\n        for (let i = 0; i < selectedSites.length; i++) {\r\n          selectedIdsMap[selectedSites[i]] = true;\r\n        }\r\n        \r\n        // Mettre à jour les documents Firestore\r\n        let saveSuccessCount = 0;\r\n        let saveErrorCount = 0;\r\n        \r\n        // Traiter les sites géocodés\r\n        for (let i = 0; i < selectedSites.length; i++) {\r\n          const siteId = selectedSites[i];\r\n          const editedSite = updatedEditingSites[siteId];\r\n          \r\n          if (!editedSite) {\r\n            console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\r\n            continue;\r\n          }\r\n          \r\n          try {\r\n            // Convertir l'ID en chaîne de caractères pour Firestore\r\n            const siteIdString = String(siteId);\r\n            console.log(`Sauvegarde des coordonnées pour le site ${siteIdString} (${editedSite.nom})...`);\r\n            \r\n            const siteRef = doc(db, 'sites', siteIdString);\r\n            \r\n            // Vérifier si le document existe\r\n            const docSnap = await getDoc(siteRef);\r\n            \r\n            // Extraire l'ID avant la mise à jour\r\n            const { id, ...updateData } = editedSite;\r\n            \r\n            if (docSnap.exists()) {\r\n              // Le document existe, on peut le mettre à jour\r\n              await updateDoc(siteRef, updateData);\r\n              console.log(`Coordonnées du site ${siteIdString} (${editedSite.nom}) enregistrées avec succès`);\r\n              saveSuccessCount++;\r\n            } else {\r\n              // Le document n'existe pas, on doit le créer\r\n              console.log(`Le site ${siteIdString} n'existe pas, création avec coordonnées...`);\r\n              await setDoc(siteRef, updateData);\r\n              console.log(`Site ${siteIdString} créé avec coordonnées`);\r\n              saveSuccessCount++;\r\n            }\r\n          } catch (updateError) {\r\n            console.error(`Erreur lors de la sauvegarde des coordonnées du site ${siteId}:`, updateError);\r\n            saveErrorCount++;\r\n          }\r\n        }\r\n        \r\n        // Mettre à jour l'état local\r\n        const updatedSites: Site[] = [];\r\n        \r\n        // Créer une nouvelle liste de sites avec les modifications\r\n        for (let i = 0; i < sites.length; i++) {\r\n          const site = sites[i];\r\n          const siteId = site.id;\r\n          \r\n          if (selectedIdsMap[siteId] && updatedEditingSites[siteId]) {\r\n            // Si le site est sélectionné et modifié, utiliser la version modifiée\r\n            updatedSites.push({ ...updatedEditingSites[siteId] });\r\n          } else {\r\n            // Sinon, garder le site inchangé\r\n            updatedSites.push(site);\r\n          }\r\n        }\r\n        \r\n        // Mettre à jour les états\r\n        setSites(updatedSites);\r\n        setFilteredSites(updatedSites);\r\n        \r\n        setGeocodingStatus(`Géocodage et enregistrement terminés : ${successCount} sites géocodés, ${saveSuccessCount} sites enregistrés, ${saveErrorCount} erreurs`);\r\n      }\r\n      \r\n      // Masquer le statut après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors du géocodage:', error);\r\n      setGeocodingStatus(`Erreur lors du géocodage: ${error}`);\r\n      \r\n      // Masquer le message d'erreur après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleEditMode = () => {\r\n    if (editMode) {\r\n      // Si on quitte le mode édition, réinitialiser les sélections et les modifications\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setSelectAll(false);\r\n      setNewSites([]);\r\n      \r\n      // Rafraîchir les données depuis Firebase\r\n      fetchSites();\r\n    } else {\r\n      // Si on entre en mode édition, initialiser les sites en édition\r\n      const editingSitesObj: {[key: string]: Site} = {};\r\n      filteredSites.forEach(site => {\r\n        editingSitesObj[site.id] = { ...site };\r\n      });\r\n      setEditingSites(editingSitesObj);\r\n    }\r\n    \r\n    // Inverser le mode édition\r\n    setEditMode(!editMode);\r\n    \r\n    // Réinitialiser la recherche rapide et les filtres\r\n    setQuickSearch('');\r\n    setSelectedPole('');\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    // Ne rien faire si aucun site n'est sélectionné et pas de nouveaux sites\r\n    if (selectedSites.length === 0 && newSites.length === 0) {\r\n      alert('Veuillez sélectionner au moins un site à enregistrer ou créer un nouveau site');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(\"Début de la sauvegarde...\");\r\n      console.log(\"Sites sélectionnés:\", selectedSites);\r\n      console.log(\"Nouveaux sites à créer:\", newSites.length);\r\n      \r\n      // Créer un objet de recherche pour les IDs sélectionnés\r\n      const selectedIdsMap: Record<string, boolean> = {};\r\n      for (let i = 0; i < selectedSites.length; i++) {\r\n        selectedIdsMap[selectedSites[i]] = true;\r\n      }\r\n      \r\n      // Mettre à jour les documents Firestore\r\n      let successCount = 0;\r\n      let errorCount = 0;\r\n      let newSitesAdded = 0;\r\n      \r\n      // 1. D'abord, traiter les sites existants sélectionnés\r\n      for (let i = 0; i < selectedSites.length; i++) {\r\n        const siteId = selectedSites[i];\r\n        const editedSite = editingSites[siteId];\r\n        \r\n        if (!editedSite) {\r\n          console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          // Convertir l'ID en chaîne de caractères pour Firestore\r\n          const siteIdString = String(siteId);\r\n          console.log(`Conversion de l'ID ${siteId} (${typeof siteId}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\r\n          \r\n          const siteRef = doc(db, 'sites', siteIdString);\r\n          \r\n          // Vérifier si le document existe\r\n          const docSnap = await getDoc(siteRef);\r\n          \r\n          // Extraire l'ID avant la mise à jour\r\n          const { id, ...updateData } = editedSite;\r\n          \r\n          if (docSnap.exists()) {\r\n            // Le document existe, on peut le mettre à jour\r\n            console.log(`Mise à jour du site ${siteIdString}...`);\r\n            await updateDoc(siteRef, updateData);\r\n            console.log(`Site ${siteIdString} mis à jour avec succès`);\r\n          } else {\r\n            // Le document n'existe pas, on doit le créer\r\n            console.log(`Le site ${siteIdString} n'existe pas, création...`);\r\n            await setDoc(siteRef, updateData);\r\n            console.log(`Site ${siteIdString} créé avec succès`);\r\n          }\r\n          \r\n          successCount++;\r\n        } catch (updateError) {\r\n          console.error(`Erreur lors de la mise à jour du site ${siteId}:`, updateError);\r\n          errorCount++;\r\n        }\r\n      }\r\n      \r\n      // 2. Ensuite, traiter les nouveaux sites temporaires\r\n      for (let i = 0; i < newSites.length; i++) {\r\n        const newSite = newSites[i];\r\n        \r\n        // Vérifier que le site a au moins un nom (champ obligatoire)\r\n        if (!newSite.nom || newSite.nom.trim() === '') {\r\n          console.log(`Nouveau site #${i+1} sans nom, ignoré`);\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          // Supprimer l'ID temporaire et préparer les données pour l'ajout\r\n          const { id, ...siteData } = newSite;\r\n          \r\n          console.log(`Ajout du nouveau site \"${newSite.nom}\"...`);\r\n          \r\n          // Utiliser addDoc pour générer un nouvel ID automatiquement\r\n          const sitesRef = collection(db, 'sites');\r\n          const docRef = await addDoc(sitesRef, siteData);\r\n          \r\n          console.log(`Nouveau site \"${newSite.nom}\" ajouté avec l'ID: ${docRef.id}`);\r\n          \r\n          // Ajouter le nouveau site à la liste des sites avec son ID réel\r\n          const newSiteWithId = {\r\n            id: docRef.id,\r\n            ...siteData\r\n          };\r\n          \r\n          // Ajouter le nouveau site à la liste des sites\r\n          sites.push(newSiteWithId as Site);\r\n          \r\n          newSitesAdded++;\r\n          successCount++;\r\n        } catch (addError) {\r\n          console.error(`Erreur lors de l'ajout du nouveau site \"${newSite.nom}\":`, addError);\r\n          errorCount++;\r\n        }\r\n      }\r\n      \r\n      console.log(`Sauvegarde terminée: ${successCount} succès (dont ${newSitesAdded} nouveaux sites), ${errorCount} erreurs`);\r\n      \r\n      // Mettre à jour l'état local\r\n      const updatedSites: Site[] = [];\r\n      \r\n      // Créer une nouvelle liste de sites avec les modifications\r\n      for (let i = 0; i < sites.length; i++) {\r\n        const site = sites[i];\r\n        const siteId = site.id;\r\n        \r\n        if (selectedIdsMap[siteId] && editingSites[siteId]) {\r\n          // Si le site est sélectionné et modifié, utiliser la version modifiée\r\n          updatedSites.push({ ...editingSites[siteId] });\r\n        } else {\r\n          // Sinon, garder le site inchangé\r\n          updatedSites.push(site);\r\n        }\r\n      }\r\n      \r\n      // Mettre à jour les états\r\n      setSites(updatedSites);\r\n      setFilteredSites(updatedSites);\r\n      \r\n      // Afficher un message de confirmation\r\n      alert(`${successCount} sites mis à jour avec succès${newSitesAdded > 0 ? `, ${newSitesAdded} nouveaux sites ajoutés` : ''}${errorCount > 0 ? `, ${errorCount} erreurs` : ''}`);\r\n\r\n      // Réinitialiser les états\r\n      setEditMode(false);\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setNewSites([]);\r\n      setSelectAll(false);\r\n\r\n    } catch (error) {\r\n      console.error('Erreur globale lors de la sauvegarde:', error);\r\n      alert('Une erreur est survenue lors de la sauvegarde');\r\n    } finally {\r\n      setLoading(false);\r\n      setGeocodingStatus(null);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour comparer des objets\r\n  const isEqual = (obj1: any, obj2: any): boolean => {\r\n    // Comparer les champs de base\r\n    const keys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);\r\n    \r\n    for (const key of keys) {\r\n      // Gestion spéciale pour les tableaux (comme tournees)\r\n      if (Array.isArray(obj1[key]) && Array.isArray(obj2[key])) {\r\n        if (obj1[key].length !== obj2[key].length) return false;\r\n        if (!obj1[key].every((val, index) => val === obj2[key][index])) return false;\r\n      } \r\n      // Comparaison standard pour les autres types\r\n      else if (obj1[key] !== obj2[key]) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Supprimer les sites sélectionnés sans messages\r\n  const handleDelete = async () => {\r\n    if (selectedSites.length === 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Tentative de suppression de ${selectedSites.length} sites:`, selectedSites);\r\n      \r\n      // Récupérer les sites sélectionnés à partir de l'état sites\r\n      const sitesToDelete = sites.filter(site => selectedSites.includes(site.id));\r\n      console.log(\"Sites à supprimer (détails complets):\", sitesToDelete);\r\n      \r\n      if (sitesToDelete.length === 0) {\r\n        console.warn(\"Aucun site trouvé pour les IDs sélectionnés\");\r\n        setLoading(false); // Désactiver le chargement si aucun site à supprimer\r\n        return;\r\n      }\r\n      \r\n      // Rechercher spécifiquement le site \"SITE 000 TEST\" ou \"Périphérique TEST\" s'il est dans la liste\r\n      const testSite = sitesToDelete.find(site => \r\n        site.nom === \"SITE 000 TEST\" || \r\n        site.nom.includes(\"TEST\") || \r\n        site.nom.includes(\"Périphérique\") || \r\n        site.pole === \"Périphérique\"\r\n      );\r\n      \r\n      if (testSite) {\r\n        console.log(\"Site TEST/Périphérique trouvé pour suppression:\", testSite);\r\n        \r\n        // Recherche spécifique pour le site problématique\r\n        await deleteSpecificTestSite();\r\n      }\r\n      \r\n      // Supprimer les sites sélectionnés un par un\r\n      for (const site of sitesToDelete) {\r\n        try {\r\n          // Ignorer le site TEST/Périphérique car il est traité séparément\r\n          if (site.nom.includes(\"TEST\") || site.nom.includes(\"Périphérique\") || site.pole === \"Périphérique\") {\r\n            console.log(`Site ${site.nom} traité séparément, ignoré dans la boucle principale`);\r\n            continue;\r\n          }\r\n          \r\n          console.log(`Traitement de la suppression pour le site:`, site);\r\n          \r\n          // Convertir l'ID en chaîne de caractères pour Firestore\r\n          const siteIdString = String(site.id);\r\n          console.log(`Conversion de l'ID ${site.id} (${typeof site.id}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\r\n          \r\n          // Vérifier si le site existe dans Firestore avant de le supprimer\r\n          const siteRef = doc(db, 'sites', siteIdString);\r\n          const docSnap = await getDoc(siteRef);\r\n          \r\n          if (docSnap.exists()) {\r\n            console.log(`Site ${siteIdString} (${site.nom}) trouvé dans Firestore, suppression...`);\r\n            await deleteDoc(siteRef);\r\n            console.log(`Site ${siteIdString} (${site.nom}) supprimé avec succès`);\r\n          } else {\r\n            console.warn(`Site ${siteIdString} (${site.nom}) non trouvé dans Firestore avec cet ID`);\r\n            \r\n            // Si le site n'est pas trouvé avec son ID, essayer de le trouver par son nom\r\n            console.log(`Recherche du site \"${site.nom}\" par nom dans Firestore...`);\r\n            \r\n            const sitesRef = collection(db, 'sites');\r\n            const q = query(sitesRef, where('nom', '==', site.nom));\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            if (querySnapshot.empty) {\r\n              console.warn(`Aucun site trouvé avec le nom \"${site.nom}\" dans Firestore`);\r\n              continue;\r\n            }\r\n            \r\n            // Supprimer tous les documents trouvés (normalement un seul)\r\n            let deletedCount = 0;\r\n            for (const docSnapshot of querySnapshot.docs) {\r\n              const docId = docSnapshot.id;\r\n              console.log(`Site trouvé avec l'ID Firestore: ${docId}, suppression...`);\r\n              \r\n              await deleteDoc(docSnapshot.ref);\r\n              \r\n              console.log(`Site \"${site.nom}\" (ID Firestore: ${docId}) supprimé avec succès`);\r\n              deletedCount++;\r\n            }\r\n            \r\n            console.log(`${deletedCount} document(s) supprimé(s) pour le site \"${site.nom}\"`);\r\n          }\r\n        } catch (deleteError) {\r\n          console.error(`Erreur lors de la suppression du site \"${site.nom}\":`, deleteError);\r\n        }\r\n      }\r\n      \r\n      console.log(\"Rechargement des sites depuis Firestore...\");\r\n      // Recharger les données depuis Firestore pour s'assurer que nous avons les données les plus récentes\r\n      await fetchSites();\r\n      \r\n      // Réinitialiser les états\r\n      setEditMode(false);\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setSelectAll(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n    } finally {\r\n      // S'assurer que l'état de chargement est toujours désactivé\r\n      setLoading(false);\r\n      // Effacer tout message de statut\r\n      setGeocodingStatus(null);\r\n    }\r\n  };\r\n\r\n  // Fonction spécifique pour supprimer le site problématique \"Périphérique TEST\"\r\n  const deleteSpecificTestSite = async () => {\r\n    try {\r\n      console.log(\"Recherche spécifique du site problématique 'Périphérique TEST'...\");\r\n      \r\n      const sitesRef = collection(db, 'sites');\r\n      \r\n      // Recherche par pole \"Périphérique\"\r\n      console.log(\"Recherche par pole 'Périphérique'...\");\r\n      const poleQuery = query(sitesRef, where('pole', '==', 'Périphérique'));\r\n      const poleSnapshot = await getDocs(poleQuery);\r\n      \r\n      if (!poleSnapshot.empty) {\r\n        console.log(`${poleSnapshot.size} sites avec pole 'Périphérique' trouvés`);\r\n        \r\n        for (const docSnapshot of poleSnapshot.docs) {\r\n          const siteData = docSnapshot.data();\r\n          console.log(`Site trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\r\n          \r\n          if (siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST')) {\r\n            console.log(`Suppression du site problématique: ${docSnapshot.id} (${siteData.nom})`);\r\n            await deleteDoc(docSnapshot.ref);\r\n            console.log(`Site problématique ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec pole 'Périphérique' trouvé\");\r\n      }\r\n      \r\n      // Recherche par nom contenant \"TEST\"\r\n      console.log(\"Recherche par nom contenant 'TEST'...\");\r\n      const testQuery = query(sitesRef, where('nom', '>=', 'TEST'), where('nom', '<=', 'TEST\\uf8ff'));\r\n      const testSnapshot = await getDocs(testQuery);\r\n      \r\n      if (!testSnapshot.empty) {\r\n        console.log(`${testSnapshot.size} sites contenant 'TEST' dans le nom trouvés`);\r\n        \r\n        for (const docSnapshot of testSnapshot.docs) {\r\n          const siteData = docSnapshot.data();\r\n          console.log(`Site TEST trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}`);\r\n          \r\n          console.log(`Suppression du site TEST: ${docSnapshot.id} (${siteData.nom})`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site TEST ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec 'TEST' dans le nom trouvé\");\r\n      }\r\n      \r\n      // Recherche par nom exact \"SITE 000 TEST\"\r\n      console.log(\"Recherche par nom exact 'SITE 000 TEST'...\");\r\n      const exactQuery = query(sitesRef, where('nom', '==', 'SITE 000 TEST'));\r\n      const exactSnapshot = await getDocs(exactQuery);\r\n      \r\n      if (!exactSnapshot.empty) {\r\n        console.log(`${exactSnapshot.size} sites avec nom exact 'SITE 000 TEST' trouvés`);\r\n        \r\n        for (const docSnapshot of exactSnapshot.docs) {\r\n          console.log(`Suppression du site exact: ${docSnapshot.id} (SITE 000 TEST)`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site exact ${docSnapshot.id} (SITE 000 TEST) supprimé avec succès`);\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec nom exact 'SITE 000 TEST' trouvé\");\r\n      }\r\n      \r\n      // Dernière tentative: recherche de tous les sites et filtrage manuel\r\n      console.log(\"Recherche manuelle de tous les sites...\");\r\n      const allSitesQuery = query(sitesRef, limit(1000));\r\n      const allSitesSnapshot = await getDocs(allSitesQuery);\r\n      \r\n      let foundProblematicSite = false;\r\n      \r\n      for (const docSnapshot of allSitesSnapshot.docs) {\r\n        const siteData = docSnapshot.data();\r\n        \r\n        // Vérifier si c'est le site problématique\r\n        if ((siteData.pole === 'Périphérique' || siteData.pole === 'TEST') && \r\n            (siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST'))) {\r\n          foundProblematicSite = true;\r\n          console.log(`Site problématique trouvé par recherche manuelle: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\r\n          \r\n          console.log(`Suppression du site problématique: ${docSnapshot.id}`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site problématique ${docSnapshot.id} supprimé avec succès`);\r\n        }\r\n      }\r\n      \r\n      if (!foundProblematicSite) {\r\n        console.log(\"Aucun site problématique trouvé par recherche manuelle\");\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression spécifique du site problématique:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Optimiser la fonction de suppression des doublons\r\n  const removeDuplicateSites = async () => {\r\n    if (!window.confirm(\"Cette opération va rechercher et supprimer les sites en double dans la base de données. Continuer ?\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setGeocodingStatus(\"Recherche des doublons en cours...\");\r\n      \r\n      // Récupérer tous les sites depuis Firestore de manière optimisée\r\n      const sitesRef = collection(db, 'sites');\r\n      const snapshot = await getDocsFromServer(query(sitesRef, limit(1000)));\r\n      \r\n      if (snapshot.empty) {\r\n        setGeocodingStatus(\"Aucun site trouvé dans la base de données.\");\r\n        setTimeout(() => setGeocodingStatus(null), 3000);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Utiliser une Map pour de meilleures performances\r\n      const sitesByName = new Map<string, Array<{id: string, data: any}>>();\r\n      \r\n      // Parcourir tous les sites et les regrouper par nom\r\n      snapshot.docs.forEach(doc => {\r\n        const data = doc.data();\r\n        const name = data.nom?.trim();\r\n        \r\n        if (name) {\r\n          // Normaliser le nom pour éviter les problèmes de casse et d'espaces\r\n          const normalizedName = name.toLowerCase().replace(/\\s+/g, ' ');\r\n          \r\n          if (!sitesByName.has(normalizedName)) {\r\n            sitesByName.set(normalizedName, []);\r\n          }\r\n          \r\n          sitesByName.get(normalizedName)?.push({\r\n            id: doc.id,\r\n            data: data\r\n          });\r\n        }\r\n      });\r\n      \r\n      // Identifier les noms qui ont des doublons\r\n      const duplicateNames: string[] = [];\r\n      sitesByName.forEach((sites, name) => {\r\n        if (sites.length > 1) {\r\n          duplicateNames.push(name);\r\n        }\r\n      });\r\n      \r\n      if (duplicateNames.length === 0) {\r\n        setGeocodingStatus(\"Aucun doublon trouvé dans la base de données.\");\r\n        setTimeout(() => setGeocodingStatus(null), 3000);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setGeocodingStatus(`${duplicateNames.length} sites avec doublons trouvés. Traitement en cours...`);\r\n      \r\n      let totalDuplicatesRemoved = 0;\r\n      let processedCount = 0;\r\n      \r\n      // Traiter les doublons par lots pour éviter de surcharger Firestore\r\n      const BATCH_SIZE = 10;\r\n      \r\n      for (let i = 0; i < duplicateNames.length; i += BATCH_SIZE) {\r\n        const batch = duplicateNames.slice(i, i + BATCH_SIZE);\r\n        \r\n        // Traiter chaque lot en parallèle\r\n        await Promise.all(batch.map(async (name) => {\r\n          const sites = sitesByName.get(name) || [];\r\n          console.log(`Traitement des doublons pour \"${name}\" (${sites.length} occurrences)`);\r\n          \r\n          // Trier les sites par priorité\r\n          sites.sort((a, b) => {\r\n            // Priorité 1: Sites avec coordonnées\r\n            const aHasCoords = a.data.latitude && a.data.longitude;\r\n            const bHasCoords = b.data.latitude && b.data.longitude;\r\n            \r\n            if (aHasCoords && !bHasCoords) return -1;\r\n            if (!aHasCoords && bHasCoords) return 1;\r\n            \r\n            // Priorité 2: Sites avec adresse complète\r\n            const aHasFullAddress = a.data.adresse && a.data.ville && a.data.codePostal;\r\n            const bHasFullAddress = b.data.adresse && b.data.ville && b.data.codePostal;\r\n            \r\n            if (aHasFullAddress && !bHasFullAddress) return -1;\r\n            if (!aHasFullAddress && bHasFullAddress) return 1;\r\n            \r\n            // Priorité 3: Sites avec plus de champs remplis\r\n            const aFieldCount = Object.keys(a.data).filter(key => a.data[key]).length;\r\n            const bFieldCount = Object.keys(b.data).filter(key => b.data[key]).length;\r\n            \r\n            if (aFieldCount > bFieldCount) return -1;\r\n            if (aFieldCount < bFieldCount) return 1;\r\n            \r\n            // Priorité 4: ID plus récent\r\n            return b.id.localeCompare(a.id);\r\n          });\r\n          \r\n          // Garder le premier site et supprimer les autres\r\n          const siteToKeep = sites[0];\r\n          const sitesToRemove = sites.slice(1);\r\n          \r\n          console.log(`Conservation du site ${siteToKeep.id} (${siteToKeep.data.nom}) et suppression de ${sitesToRemove.length} doublons`);\r\n          \r\n          // Supprimer les doublons\r\n          for (const site of sitesToRemove) {\r\n            try {\r\n              const siteRef = doc(db, 'sites', site.id);\r\n              await deleteDoc(siteRef);\r\n              console.log(`Site en double supprimé: ${site.id} (${site.data.nom})`);\r\n              totalDuplicatesRemoved++;\r\n            } catch (error) {\r\n              console.error(`Erreur lors de la suppression du doublon ${site.id}:`, error);\r\n            }\r\n          }\r\n          \r\n          processedCount++;\r\n          if (processedCount % 5 === 0 || processedCount === duplicateNames.length) {\r\n            setGeocodingStatus(`Traitement en cours: ${processedCount}/${duplicateNames.length} sites traités, ${totalDuplicatesRemoved} doublons supprimés`);\r\n          }\r\n        }));\r\n      }\r\n      \r\n      setGeocodingStatus(`Nettoyage terminé: ${totalDuplicatesRemoved} doublons supprimés sur ${duplicateNames.length} sites.`);\r\n      \r\n      // Recharger les sites après la suppression des doublons\r\n      await fetchSites();\r\n      \r\n      // Masquer le message après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression des doublons:', error);\r\n      setGeocodingStatus(`Erreur lors de la suppression des doublons: ${error}`);\r\n      setTimeout(() => setGeocodingStatus(null), 5000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleSiteSelection = (id: string) => {\r\n    if (selectedSites.includes(id)) {\r\n      setSelectedSites(selectedSites.filter(siteId => siteId !== id));\r\n      // Si on désélectionne un site, on désactive aussi \"Tout sélectionner\"\r\n      setSelectAll(false);\r\n    } else {\r\n      setSelectedSites([...selectedSites, id]);\r\n      // Si tous les sites sont sélectionnés, on active \"Tout sélectionner\"\r\n      if (selectedSites.length + 1 === sites.length) {\r\n        setSelectAll(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (id: string, field: keyof Site, value: any) => {\r\n    setEditingSites({\r\n      ...editingSites,\r\n      [id]: {\r\n        ...editingSites[id],\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const addNewSiteRow = () => {\r\n    // Forcer le mode édition si ce n'est pas déjà le cas\r\n    if (!editMode) {\r\n      setEditMode(true);\r\n    }\r\n\r\n    const newSite: Partial<Site> = {\r\n      id: `temp-${Date.now()}`,\r\n      nom: '',\r\n      pole: '',\r\n      type: '',  // Le type sera sélectionné dans le menu déroulant\r\n      adresse: '',\r\n      ville: '',\r\n      codePostal: '',\r\n      telephone: '',\r\n      email: '',\r\n      codeBarres: '',\r\n      tournees: [],\r\n      codesPorte: '',\r\n      coordonnees: '',\r\n      statut: 'actif'\r\n    };\r\n    \r\n    // Ajouter la nouvelle ligne au début du tableau\r\n    setNewSites(prevNewSites => [newSite, ...prevNewSites]);\r\n\r\n    // Revenir à la première page pour voir le nouveau site\r\n    setCurrentPage(1);\r\n\r\n    // Ajouter un délai pour permettre le rendu\r\n    setTimeout(() => {\r\n      const firstInput = document.querySelector('.sites-table-container .new-site-row input') as HTMLInputElement;\r\n      if (firstInput) {\r\n        firstInput.focus();\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  const handleNewSiteChange = (index: number, field: keyof Site, value: any) => {\r\n    const updatedNewSites = [...newSites];\r\n    updatedNewSites[index] = {\r\n      ...updatedNewSites[index],\r\n      [field]: value\r\n    };\r\n    setNewSites(updatedNewSites);\r\n  };\r\n\r\n  const removeNewSiteRow = (index: number) => {\r\n    const updatedNewSites = newSites.filter((_, i) => i !== index);\r\n    setNewSites(updatedNewSites);\r\n  };\r\n\r\n  // Fonction pour gérer le changement de pôle\r\n  const handlePoleChange = (pole: string) => {\r\n    setSelectedPole(pole);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Chargement des sites...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Sites</h2>\r\n      </div>\r\n      \r\n      <div className=\"sticky-header-container\">\r\n        <div className=\"header-actions\">\r\n          {editMode ? (\r\n            <>\r\n              <button \r\n                className=\"button\" \r\n                onClick={handleSave}\r\n                disabled={loading || (selectedSites.length === 0 && newSites.length === 0)}\r\n                style={{ \r\n                  backgroundColor: '#4CAF50', // Vert\r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                title=\"Enregistrer les modifications\"\r\n              >\r\n                <i className=\"fas fa-save\"></i> Enr. {selectedSites.length > 0 || newSites.length > 0 ? \r\n                  `(${selectedSites.length}${newSites.length > 0 ? `+${newSites.length}` : ''})` : \r\n                  ''}\r\n              </button>\r\n              <button \r\n                className=\"button button-secondary\" \r\n                onClick={() => {\r\n                  if (window.confirm(\"Êtes-vous sûr de vouloir annuler toutes les modifications ?\")) {\r\n                    setEditingSites({});\r\n                    setNewSites([]);\r\n                    setSelectedSites([]);\r\n                    setSelectAll(false);\r\n                    setEditMode(false);\r\n                  }\r\n                }}\r\n                style={{ marginLeft: '5px' }}\r\n                disabled={loading}\r\n                title=\"Annuler les modifications\"\r\n              >\r\n                <i className=\"fas fa-times\"></i> Annuler\r\n              </button>\r\n              <button \r\n                className=\"button\" \r\n                onClick={addNewSiteRow}\r\n                style={{ \r\n                  marginLeft: '5px',\r\n                  backgroundColor: '#FF9800', // Orange\r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                disabled={loading}\r\n                title=\"Ajouter un nouveau site\"\r\n              >\r\n                <i className=\"fas fa-plus\"></i> Ajouter\r\n              </button>\r\n              <button \r\n                className=\"button button-danger\" \r\n                onClick={handleDelete}\r\n                disabled={selectedSites.length === 0 || loading}\r\n                style={{ \r\n                  marginLeft: '5px',\r\n                  backgroundColor: '#f44336', \r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                title=\"Supprimer les sites sélectionnés\"\r\n              >\r\n                <i className=\"fas fa-trash-alt\"></i> Sup. ({selectedSites.length})\r\n              </button>\r\n              <button \r\n                className=\"button\" \r\n                onClick={geocodeSelectedSites}\r\n                disabled={selectedSites.length === 0 || loading}\r\n                style={{ marginLeft: '5px' }}\r\n                title=\"Géocoder les sites sélectionnés\"\r\n              >\r\n                <i className=\"fas fa-map-marker-alt\"></i> Géo. ({selectedSites.length})\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <button \r\n              className=\"button\" \r\n              onClick={toggleEditMode}\r\n            >\r\n              <i className=\"fas fa-edit\"></i> Modifier\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"quick-search-container\" style={{ marginTop: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"quick-search-input\"\r\n            placeholder=\"Recherche rapide...\"\r\n            value={quickSearch}\r\n            onChange={(e) => setQuickSearch(e.target.value)}\r\n            disabled={loading}\r\n          />\r\n          <div className=\"pole-filter\">\r\n            <PoleFilter\r\n              onPoleChange={handlePoleChange}\r\n              selectedPole={selectedPole}\r\n              label=\"Filtrer par pôle\"\r\n              className=\"pole-filter-component\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      <div className=\"sites-table-container\" style={{ overflowX: 'auto' }}>\r\n        <div className=\"results-info\">\r\n          <p>{filteredSites.length} résultat(s) trouvé(s){quickSearch ? ` pour la recherche \"${quickSearch}\"` : ''}</p>\r\n        </div>\r\n        <table className={`data-table ${editMode ? 'editing' : ''}`}>\r\n          <thead>\r\n            <tr>\r\n              {editMode && (\r\n                <th>\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    checked={selectAll}\r\n                    onChange={handleSelectAllChange}\r\n                    title=\"Sélectionner/Désélectionner tout\"\r\n                  />\r\n                </th>\r\n              )}\r\n              <th>PÔLE</th>\r\n              <th>TYPE DE SITE</th>\r\n              <th>NOM</th>\r\n              <th>ADRESSE</th>\r\n              <th>COMPLÉMENT</th>\r\n              <th>VILLE</th>\r\n              <th>CODE POSTAL</th>\r\n              <th>TOURNÉES</th>\r\n              <th>HORAIRES L-V</th>\r\n              <th>HORAIRES SAMEDI</th>\r\n              <th>CODE-BARRE</th>\r\n              <th>COORDONNÉES</th>\r\n              <th>ID</th>\r\n              <th>STATUT</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* D'abord afficher les nouveaux sites */}\r\n            {editMode && newSites.map((site, index) => (\r\n              <tr key={`new-site-${site.id}`} className=\"new-site-row\">\r\n                <td style={{display: 'none'}}>\r\n                  {/* Cellule masquée pour maintenir l'alignement */}\r\n                </td>\r\n                <td>\r\n                  <PoleSelector\r\n                    value={site.pole || ''}\r\n                    onChange={(value) => handleNewSiteChange(index, 'pole', value)}\r\n                    placeholder=\"Sélectionner un pôle\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    allowClear\r\n                    title=\"Pôle du site\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={site.type || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'type', e.target.value)}\r\n                    className=\"inline-edit-select\"\r\n                    title=\"Type de site\"\r\n                  >\r\n                    <option value=\"\">Sélectionner un type</option>\r\n                    {SITE_TYPES.map(type => (\r\n                      <option key={type} value={type}>{type}</option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.nom || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'nom', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Nom\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.adresse || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'adresse', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Adresse\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.complementAdresse || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'complementAdresse', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Complément d'adresse\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.ville || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'ville', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Ville\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.codePostal || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'codePostal', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Code postal\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.tournees?.join(', ') || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'tournees', e.target.value.split(',').map(s => s.trim()))}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Tournées\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.horairesLV || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'horairesLV', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Horaires Lundi-Vendredi\"\r\n                    placeholder=\"HH:MM-HH:MM\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.horairesSamedi || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'horairesSamedi', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Horaires Samedi\"\r\n                    placeholder=\"HH:MM-HH:MM\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.codeBarres || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'codeBarres', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Code-barre\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <span className=\"coordinates-empty\">\r\n                    Pas de coordonnées<br />\r\n                    (utiliser le géocodage)\r\n                  </span>\r\n                </td>\r\n                <td>{site.id}</td>\r\n                <td>\r\n                  <select\r\n                    value={site.statut || 'actif'}\r\n                    onChange={(e) => handleNewSiteChange(index, 'statut', e.target.value)}\r\n                    className=\"inline-edit-select\"\r\n                    title=\"Statut du site\"\r\n                  >\r\n                    <option value=\"actif\">Actif</option>\r\n                    <option value=\"inactif\">Inactif</option>\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n            \r\n            {/* Ensuite afficher les sites existants */}\r\n            {paginatedAndFilteredSites.map((site, index) => (\r\n              <tr key={`site-${site.id}-${index}`} className={selectedSites.includes(site.id) ? 'selected-row' : ''}>\r\n                {editMode && (\r\n                  <td>\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={selectedSites.includes(site.id)} \r\n                      onChange={() => toggleSiteSelection(site.id)}\r\n                      title=\"Sélectionner ce site\"\r\n                    />\r\n                  </td>\r\n                )}\r\n                <td>\r\n                  {editMode ? (\r\n                    <PoleSelector\r\n                      value={editingSites[site.id]?.pole || site.pole || ''}\r\n                      onChange={(value) => handleCellChange(site.id, 'pole', value)}\r\n                      placeholder=\"Sélectionner un pôle\"\r\n                      style={{ width: '100%' }}\r\n                      showSearch\r\n                      allowClear\r\n                      title=\"Pôle du site\"\r\n                    />\r\n                  ) : (\r\n                    getPoleNameById(site.pole)\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <select\r\n                      value={editingSites[site.id]?.type || site.type || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'type', e.target.value)}\r\n                      className=\"inline-edit-select\"\r\n                      title=\"Type de site\"\r\n                    >\r\n                      <option value=\"\">Sélectionner un type</option>\r\n                      {SITE_TYPES.map(type => (\r\n                        <option key={type} value={type}>{type}</option>\r\n                      ))}\r\n                    </select>\r\n                  ) : (\r\n                    site.type || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.nom || site.nom || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'nom', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Nom\"\r\n                    />\r\n                  ) : (\r\n                    site.nom || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.adresse || site.adresse || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'adresse', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Adresse\"\r\n                    />\r\n                  ) : (\r\n                    site.adresse || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.complementAdresse || site.complementAdresse || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'complementAdresse', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Complément d'adresse\"\r\n                    />\r\n                  ) : (\r\n                    site.complementAdresse || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.ville || site.ville || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'ville', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Ville\"\r\n                    />\r\n                  ) : (\r\n                    site.ville || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.codePostal || site.codePostal || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'codePostal', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Code postal\"\r\n                    />\r\n                  ) : (\r\n                    site.codePostal || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.tournees?.join(', ') || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'tournees', e.target.value.split(',').map(s => s.trim()))}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Tournées\"\r\n                    />\r\n                  ) : (\r\n                    site.tournees?.join(', ') || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.horairesLV || site.horairesLV || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'horairesLV', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Horaires Lundi-Vendredi\"\r\n                      placeholder=\"HH:MM-HH:MM\"\r\n                      pattern=\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\r\n                    />\r\n                  ) : (\r\n                    site.horairesLV || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.horairesSamedi || site.horairesSamedi || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'horairesSamedi', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Horaires Samedi\"\r\n                      placeholder=\"HH:MM-HH:MM\"\r\n                      pattern=\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\r\n                    />\r\n                  ) : (\r\n                    site.horairesSamedi || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.codeBarres || site.codeBarres || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'codeBarres', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Code-barre\"\r\n                    />\r\n                  ) : (\r\n                    site.codeBarres || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    site.latitude && site.longitude ? (\r\n                      <span className=\"coordinates-display\">\r\n                        Lat: {site.latitude.toFixed(6)}<br/>\r\n                        Lon: {site.longitude.toFixed(6)}\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"coordinates-empty\">\r\n                        Pas de coordonnées<br/>\r\n                        (utiliser le géocodage)\r\n                      </span>\r\n                    )\r\n                  ) : (\r\n                    site.latitude && site.longitude ? \r\n                    `Lat: ${site.latitude.toFixed(6)}, Lon: ${site.longitude.toFixed(6)}` : \r\n                    '-'\r\n                  )}\r\n                </td>\r\n                <td>{site.id}</td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <select\r\n                      value={editingSites[site.id]?.statut || site.statut || 'actif'}\r\n                      onChange={(e) => handleCellChange(site.id, 'statut', e.target.value)}\r\n                      className=\"inline-edit-select\"\r\n                      title=\"Statut du site\"\r\n                    >\r\n                      <option value=\"actif\">Actif</option>\r\n                      <option value=\"inactif\">Inactif</option>\r\n                    </select>\r\n                  ) : (\r\n                    (site.statut === 'actif' || !site.statut) ? 'Actif' : 'Inactif'\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {/* Ajouter la pagination */}\r\n        {renderPagination()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sites;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,OAAO,KAAqB,OAAO,CAExE,OAASC,EAAE,KAAQ,oBAAoB,CACvC,OACEC,UAAU,CACVC,OAAO,CACPC,MAAM,CACNC,SAAS,CACTC,SAAS,CACTC,GAAG,CACHC,MAAM,CACNC,KAAK,CACLC,KAAK,CACLC,UAAU,CACVC,OAAO,CACPC,MAAM,CACNC,iBAAiB,CACjBC,KAAK,CAOLC,cAAc,CACdC,aAAa,KACR,oBAAoB,CAC3B,OAASC,cAAc,KAAQ,oBAAoB,CAEnD,MAAO,gBAAgB,CACvB,MAAO,aAAa,CACpB,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,OAASC,QAAQ,KAAQ,yBAAyB,CAElD;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBACA,KAAM,CAAAC,yCAAyC,CAAG,KAAAA,CAAA,GAAY,CAC5D,GAAI,CACF;AACA,KAAM,CAAAZ,cAAc,CAACf,EAAE,CAAC,CACxB4B,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC,CAEjE;AACA,KAAM,CAAAb,aAAa,CAAChB,EAAE,CAAC,CACvB4B,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC,CAClE,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,6CAA6C,CAAEA,KAAK,CAAC,CACrE,CACF,CAAC,CAED;AACAH,yCAAyC,CAAC,CAAC,CAE3C;AACA,KAAM,CAAAI,UAAU,CAAG,CACjB,aAAa,CACb,UAAU,CACV,mBAAmB,CACnB,mBAAmB,CACnB,wBAAwB,CACxB,OAAO,CACP,aAAa,CACd,CAED,KAAM,CAAAC,KAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGrC,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACsC,OAAO,CAAEC,UAAU,CAAC,CAAGvC,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACiC,KAAK,CAAEO,QAAQ,CAAC,CAAGxC,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAACyC,eAAe,CAAEC,kBAAkB,CAAC,CAAG1C,QAAQ,CAAgB,IAAI,CAAC,CAE3E;AACA,KAAM,CAAC2C,QAAQ,CAAEC,WAAW,CAAC,CAAG5C,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAAC6C,aAAa,CAAEC,gBAAgB,CAAC,CAAG9C,QAAQ,CAAW,EAAE,CAAC,CAChE,KAAM,CAAC+C,YAAY,CAAEC,eAAe,CAAC,CAAGhD,QAAQ,CAAwB,CAAC,CAAC,CAAC,CAC3E,KAAM,CAACiD,SAAS,CAAEC,YAAY,CAAC,CAAGlD,QAAQ,CAAC,KAAK,CAAC,CAEjD;AACA,KAAM,CAACmD,QAAQ,CAAEC,WAAW,CAAC,CAAGpD,QAAQ,CAAkB,EAAE,CAAC,CAE7D;AACA,KAAM,CAACqD,WAAW,CAAEC,cAAc,CAAC,CAAGtD,QAAQ,CAAS,EAAE,CAAC,CAC1D,KAAM,CAACuD,aAAa,CAAEC,gBAAgB,CAAC,CAAGxD,QAAQ,CAAS,EAAE,CAAC,CAE9D;AACA,KAAM,CAACyD,YAAY,CAAEC,eAAe,CAAC,CAAG1D,QAAQ,CAAS,EAAE,CAAC,CAE5D;AACA,KAAM,CAAC2D,WAAW,CAAEC,cAAc,CAAC,CAAG5D,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAAC6D,YAAY,CAAEC,eAAe,CAAC,CAAG9D,QAAQ,CAAC,EAAE,CAAC,CAAE;AAEtD;AACA,KAAM,CAAA+D,mBAAmB,CAAG,CAAC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,GAAG,CAAE,MAAM,CAAC,CAErD;AACA,KAAM,CAAEC,KAAM,CAAC,CAAGzC,QAAQ,CAAC,CAAC,CAE5B;AACA,KAAM,CAAA0C,eAAe,CAAIC,MAA0B,EAAa,CAC9D,GAAI,CAACA,MAAM,CAAE,MAAO,EAAE,CACtB,KAAM,CAAAC,IAAI,CAAGH,KAAK,CAACI,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKJ,MAAM,CAAC,CAC7C,MAAO,CAAAC,IAAI,CAAGA,IAAI,CAACI,GAAG,CAAGL,MAAM,CACjC,CAAC,CAEDjE,SAAS,CAAC,IAAM,CACduE,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,EAAE,CAAC,CAEN;AACAvE,SAAS,CAAC,IAAM,CACd,GAAIgD,SAAS,CAAE,CACbH,gBAAgB,CAACV,KAAK,CAACqC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACJ,EAAE,CAAC,CAAC,CAC9C,CAAC,IAAM,IAAIzB,aAAa,CAAC8B,MAAM,GAAKvC,KAAK,CAACuC,MAAM,CAAE,CAChD;AACA7B,gBAAgB,CAAC,EAAE,CAAC,CACtB,CACF,CAAC,CAAE,CAACG,SAAS,CAAC,CAAC,CAEf;AACAhD,SAAS,CAAC,IAAM,CACduD,gBAAgB,CAACpB,KAAK,CAAC,CACzB,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX;AACAnC,SAAS,CAAC,IAAM,CACd,GAAI,CAACoD,WAAW,CAACuB,IAAI,CAAC,CAAC,EAAI,CAACnB,YAAY,CAAE,CACxC;AACAD,gBAAgB,CAACpB,KAAK,CAAC,CACvB,OACF,CAEA,GAAI,CAAAyC,OAAO,CAAGzC,KAAK,CAEnB;AACA,GAAIqB,YAAY,CAAE,CAChBoB,OAAO,CAAGA,OAAO,CAACC,MAAM,CAACJ,IAAI,EAAIA,IAAI,CAACP,IAAI,GAAKV,YAAY,CAAC,CAC9D,CAEA;AACA,GAAIJ,WAAW,CAACuB,IAAI,CAAC,CAAC,CAAE,CACtB,KAAM,CAAAG,UAAU,CAAG1B,WAAW,CAAC2B,WAAW,CAAC,CAAC,CAACJ,IAAI,CAAC,CAAC,CACnDC,OAAO,CAAGA,OAAO,CAACC,MAAM,CAACJ,IAAI,EAAI,CAC/B;AACA,MACE,CAACA,IAAI,CAACH,GAAG,EAAI,EAAE,EAAES,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACnD,CAACL,IAAI,CAACQ,OAAO,EAAI,EAAE,EAAEF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACvD,CAACL,IAAI,CAACS,KAAK,EAAI,EAAE,EAAEH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACrD,CAACL,IAAI,CAACU,UAAU,EAAI,EAAE,EAAEJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EAC1D,CAACL,IAAI,CAACW,SAAS,EAAI,EAAE,EAAEL,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACzD,CAACL,IAAI,CAACY,KAAK,EAAI,EAAE,EAAEN,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACrD,CAACL,IAAI,CAACa,IAAI,EAAI,EAAE,EAAEP,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACpD,CAACL,IAAI,CAACc,MAAM,EAAI,EAAE,EAAER,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EACtD,CAACL,IAAI,CAACe,UAAU,EAAI,EAAE,EAAET,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,CAE9D,CAAC,CAAC,CACJ,CAEAvB,gBAAgB,CAACqB,OAAO,CAAC,CAC3B,CAAC,CAAE,CAACxB,WAAW,CAAEjB,KAAK,CAAEqB,YAAY,CAAC,CAAC,CAEtC;AACA,KAAM,CAAAiC,yBAAyB,CAAGxF,OAAO,CAAC,IAAM,CAC9C;AACA,KAAM,CAAAyF,QAAQ,CAAGpC,aAAa,CAE9B;AACA,GAAIM,YAAY,GAAK+B,MAAM,CAACC,gBAAgB,CAAE,CAC5C,MAAO,CAAAF,QAAQ,CACjB,CAEA;AACA,KAAM,CAAAG,UAAU,CAAG,CAACnC,WAAW,CAAG,CAAC,EAAIE,YAAY,CACnD,KAAM,CAAAkC,QAAQ,CAAGC,IAAI,CAACC,GAAG,CAACH,UAAU,CAAGjC,YAAY,CAAE8B,QAAQ,CAAChB,MAAM,CAAC,CAErE;AACA,GAAIhC,QAAQ,EAAIQ,QAAQ,CAACwB,MAAM,CAAG,CAAC,CAAE,CACnC,KAAM,CAAAuB,kBAAkB,CAAGF,IAAI,CAACC,GAAG,CAACH,UAAU,CAAEH,QAAQ,CAAChB,MAAM,CAAC,CAChE,KAAM,CAAAwB,cAAc,CAAGH,IAAI,CAACI,GAAG,CAAC,CAAC,CAAEvC,YAAY,CAAGV,QAAQ,CAACwB,MAAM,CAAC,CAClE,KAAM,CAAA0B,gBAAgB,CAAGL,IAAI,CAACC,GAAG,CAACC,kBAAkB,CAAGC,cAAc,CAAER,QAAQ,CAAChB,MAAM,CAAC,CAEvF,MAAO,CAAAgB,QAAQ,CAACW,KAAK,CAACJ,kBAAkB,CAAEG,gBAAgB,CAAC,CAC7D,CAEA,MAAO,CAAAV,QAAQ,CAACW,KAAK,CAACR,UAAU,CAAEC,QAAQ,CAAC,CAC7C,CAAC,CAAE,CAACxC,aAAa,CAAEI,WAAW,CAAEE,YAAY,CAAElB,QAAQ,CAAEQ,QAAQ,CAACwB,MAAM,CAAC,CAAC,CAEzE;AACA,KAAM,CAAA4B,UAAU,CAAGP,IAAI,CAACQ,IAAI,CAACjD,aAAa,CAACoB,MAAM,CAAGd,YAAY,CAAC,CAEjE;AACA,KAAM,CAAA4C,gBAAgB,CAAIC,OAAe,EAAK,CAC5C9C,cAAc,CAAC8C,OAAO,CAAC,CACzB,CAAC,CAED;AACA,KAAM,CAAAC,wBAAwB,CAAIC,eAAgC,EAAK,CACrE,GAAIA,eAAe,GAAK,MAAM,CAAE,CAC9B;AACA;AACA9C,eAAe,CAAC8B,MAAM,CAACC,gBAAgB,CAAC,CAC1C,CAAC,IAAM,CACL/B,eAAe,CAAC8B,MAAM,CAACgB,eAAe,CAAC,CAAC,CAC1C,CACA;AACAhD,cAAc,CAAC,CAAC,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAiD,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,mBACElF,KAAA,QAAKmF,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnCpF,KAAA,QAAKmF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BtF,IAAA,UAAAsF,QAAA,CAAO,4BAAoB,CAAO,CAAC,cACnCtF,IAAA,WACEuF,KAAK,CAAEnD,YAAY,GAAK+B,MAAM,CAACC,gBAAgB,CAAG,MAAM,CAAGhC,YAAa,CACxEoD,QAAQ,CAAGC,CAAC,EAAKP,wBAAwB,CAACO,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1DI,KAAK,CAAC,kCAA4B,CAClC,aAAW,kCAA4B,CAAAL,QAAA,CAEtChD,mBAAmB,CAACU,GAAG,CAAC4C,MAAM,eAC7B5F,IAAA,WAAqBuF,KAAK,CAAEK,MAAO,CAAAN,QAAA,CAChCM,MAAM,EADIA,MAEL,CACT,CAAC,CACI,CAAC,EACN,CAAC,cAEN1F,KAAA,QAAKmF,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAClCtF,IAAA,WACE6F,OAAO,CAAEA,CAAA,GAAMb,gBAAgB,CAAC9C,WAAW,CAAG,CAAC,CAAE,CACjD4D,QAAQ,CAAE5D,WAAW,GAAK,CAAC,EAAIE,YAAY,GAAK+B,MAAM,CAACC,gBAAiB,CAAAkB,QAAA,CACzE,iBAED,CAAQ,CAAC,cAETtF,IAAA,SAAMqF,SAAS,CAAC,WAAW,CAAAC,QAAA,CACxBlD,YAAY,GAAK+B,MAAM,CAACC,gBAAgB,CACvC,4BAA4B,CAC5B,QAAQlC,WAAW,QAAQ4C,UAAU,EAAE,CAErC,CAAC,cAEP9E,IAAA,WACE6F,OAAO,CAAEA,CAAA,GAAMb,gBAAgB,CAAC9C,WAAW,CAAG,CAAC,CAAE,CACjD4D,QAAQ,CAAE5D,WAAW,GAAK4C,UAAU,EAAI1C,YAAY,GAAK+B,MAAM,CAACC,gBAAiB,CAAAkB,QAAA,CAClF,SAED,CAAQ,CAAC,EACN,CAAC,cAENpF,KAAA,QAAKmF,SAAS,CAAC,eAAe,CAAAC,QAAA,EAAC,UACrB,CAACxD,aAAa,CAACoB,MAAM,CAAC,iBAChC,EAAK,CAAC,EACH,CAAC,CAEV,CAAC,CAED,KAAM,CAAAH,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACFjC,UAAU,CAAC,IAAI,CAAC,CAChBC,QAAQ,CAAC,IAAI,CAAC,CACdE,kBAAkB,CAAC,yBAAyB,CAAC,CAE7CX,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC,CAEzE;AACA,KAAM,CAAAwF,QAAQ,CAAGpH,UAAU,CAACD,EAAE,CAAE,OAAO,CAAC,CACxC,KAAM,CAAAsH,KAAK,CAAG,GAAG,CAAE;AAEnB,GAAI,CAAAC,OAAmD,CAAG,IAAI,CAC9D,GAAI,CAAAC,QAAqB,CAAG,EAAE,CAC9B,GAAI,CAAAC,OAAO,CAAG,IAAI,CAClB,GAAI,CAAAC,WAAW,CAAG,CAAC,CAEnB,MAAOD,OAAO,CAAE,CACd;AACA,GAAI,CAAAE,CAAC,CACL,GAAIJ,OAAO,CAAE,CACXI,CAAC,CAAGnH,KAAK,CAAC6G,QAAQ,CAAE1G,OAAO,CAAC,KAAK,CAAC,CAAED,UAAU,CAAC6G,OAAO,CAAC,CAAE9G,KAAK,CAAC6G,KAAK,CAAC,CAAC,CACxE,CAAC,IAAM,CACLK,CAAC,CAAGnH,KAAK,CAAC6G,QAAQ,CAAE1G,OAAO,CAAC,KAAK,CAAC,CAAEF,KAAK,CAAC6G,KAAK,CAAC,CAAC,CACnD,CAEA;AACA,KAAM,CAAAM,QAAqC,CAAG,KAAM,CAAA/G,iBAAiB,CAAC8G,CAAC,CAAC,CAExE,GAAIC,QAAQ,CAACC,KAAK,CAAE,CAClBJ,OAAO,CAAG,KAAK,CACf,MACF,CAEA;AACA,KAAM,CAAAK,UAAU,CAAGF,QAAQ,CAACG,IAAI,CAACzD,GAAG,CAAEhE,GAAwC,EAAK,CACjF,KAAM,CAAA0H,IAAI,CAAG1H,GAAG,CAAC0H,IAAI,CAAC,CAAC,CACvB,MAAO,CACL7D,EAAE,CAAE7D,GAAG,CAAC6D,EAAE,CACV,GAAG6D,IACL,CAAC,CACH,CAAC,CAAC,CAEFR,QAAQ,CAAG,CAAC,GAAGA,QAAQ,CAAE,GAAGM,UAAU,CAAC,CACvCJ,WAAW,EAAII,UAAU,CAACtD,MAAM,CAEhC;AACA,GAAIkD,WAAW,CAAG,GAAG,GAAK,CAAC,EAAIE,QAAQ,CAACG,IAAI,CAACvD,MAAM,CAAG8C,KAAK,CAAE,CAC3D/E,kBAAkB,CAAC,2BAA2BmF,WAAW,UAAU,CAAC,CACtE,CAEA;AACAH,OAAO,CAAGK,QAAQ,CAACG,IAAI,CAACH,QAAQ,CAACG,IAAI,CAACvD,MAAM,CAAG,CAAC,CAAC,CAEjD;AACA,GAAIoD,QAAQ,CAACG,IAAI,CAACvD,MAAM,CAAG8C,KAAK,CAAE,CAChCG,OAAO,CAAG,KAAK,CACjB,CACF,CAEA7F,OAAO,CAACC,GAAG,CAAC,GAAG2F,QAAQ,CAAChD,MAAM,iCAAiC,CAAC,CAChEtC,QAAQ,CAACsF,QAAQ,CAAC,CAElB;AACAS,UAAU,CAAC,IAAM,CACf1F,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAE,IAAI,CAAC,CAERH,UAAU,CAAC,KAAK,CAAC,CACnB,CAAE,MAAON,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACjEO,QAAQ,CAAC,4CAA4C,CAAC,CACtDH,QAAQ,CAAC,EAAE,CAAC,CACZK,kBAAkB,CAAC,IAAI,CAAC,CACxBH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED;AACA,KAAM,CAAA8F,qBAAqB,CAAGA,CAAA,GAAM,CAClCnF,YAAY,CAAC,CAACD,SAAS,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAqF,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAIzF,aAAa,CAAC8B,MAAM,GAAK,CAAC,CAAE,CAC9B4D,KAAK,CAAC,mDAAmD,CAAC,CAC1D,OACF,CAEA,GAAI,CACFhG,UAAU,CAAC,IAAI,CAAC,CAChBG,kBAAkB,CAAC,uBAAuB,CAAC,CAE3C,KAAM,CAAA8F,mBAAmB,CAAG,CAAE,GAAGzF,YAAa,CAAC,CAC/C,GAAI,CAAA0F,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,SAAS,CAAG,CAAC,CACjB,GAAI,CAAAC,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,aAAa,CAAG,CAAC,CAErB;AACA,IAAK,KAAM,CAAAC,MAAM,GAAI,CAAAhG,aAAa,CAAE,CAClC,KAAM,CAAA6B,IAAI,CAAG3B,YAAY,CAAC8F,MAAM,CAAC,CACjCF,YAAY,EAAE,CAEd,GAAIjE,IAAI,CAAE,CACRhC,kBAAkB,CAAC,0BAA0BiG,YAAY,IAAI9F,aAAa,CAAC8B,MAAM,GAAG,CAAC,CAErF;AACA,GAAI,CAACD,IAAI,CAACH,GAAG,EAAI,CAACG,IAAI,CAACQ,OAAO,CAAE,CAC9BwD,SAAS,EAAE,CACX3G,OAAO,CAAC+G,IAAI,CAAC,8CAA8CpE,IAAI,CAACH,GAAG,EAAI,UAAU,EAAE,CAAC,CACpF,SACF,CAEA;AACA,KAAM,CAAAwE,YAAY,CAAG,CACnBrE,IAAI,CAACH,GAAG,CACRG,IAAI,CAACQ,OAAO,CACZR,IAAI,CAACS,KAAK,CACVT,IAAI,CAACU,UAAU,CAChB,CAACN,MAAM,CAACkE,OAAO,CAAC,CAEjB,KAAM,CAAAC,WAAW,CAAGF,YAAY,CAACG,IAAI,CAAC,IAAI,CAAC,CAE3CnH,OAAO,CAACC,GAAG,CAAC,gCAAgC0C,IAAI,CAACH,GAAG,sBAAsB0E,WAAW,GAAG,CAAC,CAEzF,KAAM,CAAAE,WAAW,CAAG,KAAM,CAAA/H,cAAc,CACtCsD,IAAI,CAACH,GAAG,EAAI,EAAE,CACdG,IAAI,CAACQ,OAAO,EAAI,EAAE,CAClBR,IAAI,CAACS,KAAK,EAAI,EAAE,CAChBT,IAAI,CAACU,UAAU,EAAI,EACrB,CAAC,CAED,GAAI+D,WAAW,CAAE,CACf;AACA,GAAIzE,IAAI,CAAC0E,QAAQ,GAAKD,WAAW,CAACC,QAAQ,EAAI1E,IAAI,CAAC2E,SAAS,GAAKF,WAAW,CAACE,SAAS,CAAE,CACtFT,aAAa,EAAE,CACjB,CAEAJ,mBAAmB,CAACK,MAAM,CAAC,CAAG,CAC5B,GAAGnE,IAAI,CACP0E,QAAQ,CAAED,WAAW,CAACC,QAAQ,CAC9BC,SAAS,CAAEF,WAAW,CAACE,SACzB,CAAC,CACDZ,YAAY,EAAE,CACd1G,OAAO,CAACC,GAAG,CAAC,0BAA0B0C,IAAI,CAACH,GAAG,UAAU4E,WAAW,CAACC,QAAQ,SAASD,WAAW,CAACE,SAAS,EAAE,CAAC,CAC/G,CAAC,IAAM,CACLX,SAAS,EAAE,CACX3G,OAAO,CAAC+G,IAAI,CAAC,oCAAoCpE,IAAI,CAACH,GAAG,EAAI,UAAU,EAAE,CAAC,CAC5E,CACF,CAAC,IAAM,CACLmE,SAAS,EAAE,CACX3G,OAAO,CAAC+G,IAAI,CAAC,8BAA8BD,MAAM,EAAE,CAAC,CACtD,CAEA;AACA,GAAIF,YAAY,CAAG9F,aAAa,CAAC8B,MAAM,CAAE,CACvC,KAAM,IAAI,CAAA2E,OAAO,CAACC,OAAO,EAAInB,UAAU,CAACmB,OAAO,CAAE,GAAG,CAAC,CAAC,CAAE;AAC1D,CACF,CAEAvG,eAAe,CAACwF,mBAAmB,CAAC,CACpC9F,kBAAkB,CAAC,uBAAuB+F,YAAY,kBAAkBG,aAAa,sBAAsBF,SAAS,sCAAsC,CAAC,CAE3J;AACA,GAAID,YAAY,CAAG,CAAC,CAAE,CACpB1G,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAE5D;AACA,KAAM,CAAAwH,cAAuC,CAAG,CAAC,CAAC,CAClD,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5G,aAAa,CAAC8B,MAAM,CAAE8E,CAAC,EAAE,CAAE,CAC7CD,cAAc,CAAC3G,aAAa,CAAC4G,CAAC,CAAC,CAAC,CAAG,IAAI,CACzC,CAEA;AACA,GAAI,CAAAC,gBAAgB,CAAG,CAAC,CACxB,GAAI,CAAAC,cAAc,CAAG,CAAC,CAEtB;AACA,IAAK,GAAI,CAAAF,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5G,aAAa,CAAC8B,MAAM,CAAE8E,CAAC,EAAE,CAAE,CAC7C,KAAM,CAAAZ,MAAM,CAAGhG,aAAa,CAAC4G,CAAC,CAAC,CAC/B,KAAM,CAAAG,UAAU,CAAGpB,mBAAmB,CAACK,MAAM,CAAC,CAE9C,GAAI,CAACe,UAAU,CAAE,CACf7H,OAAO,CAACC,GAAG,CAAC,QAAQ6G,MAAM,uCAAuC,CAAC,CAClE,SACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAgB,YAAY,CAAGC,MAAM,CAACjB,MAAM,CAAC,CACnC9G,OAAO,CAACC,GAAG,CAAC,2CAA2C6H,YAAY,KAAKD,UAAU,CAACrF,GAAG,MAAM,CAAC,CAE7F,KAAM,CAAAwF,OAAO,CAAGtJ,GAAG,CAACN,EAAE,CAAE,OAAO,CAAE0J,YAAY,CAAC,CAE9C;AACA,KAAM,CAAAG,OAAO,CAAG,KAAM,CAAAtJ,MAAM,CAACqJ,OAAO,CAAC,CAErC;AACA,KAAM,CAAEzF,EAAE,CAAE,GAAG2F,UAAW,CAAC,CAAGL,UAAU,CAExC,GAAII,OAAO,CAACE,MAAM,CAAC,CAAC,CAAE,CACpB;AACA,KAAM,CAAA3J,SAAS,CAACwJ,OAAO,CAAEE,UAAU,CAAC,CACpClI,OAAO,CAACC,GAAG,CAAC,uBAAuB6H,YAAY,KAAKD,UAAU,CAACrF,GAAG,4BAA4B,CAAC,CAC/FmF,gBAAgB,EAAE,CACpB,CAAC,IAAM,CACL;AACA3H,OAAO,CAACC,GAAG,CAAC,WAAW6H,YAAY,6CAA6C,CAAC,CACjF,KAAM,CAAA9I,MAAM,CAACgJ,OAAO,CAAEE,UAAU,CAAC,CACjClI,OAAO,CAACC,GAAG,CAAC,QAAQ6H,YAAY,wBAAwB,CAAC,CACzDH,gBAAgB,EAAE,CACpB,CACF,CAAE,MAAOS,WAAW,CAAE,CACpBpI,OAAO,CAACE,KAAK,CAAC,wDAAwD4G,MAAM,GAAG,CAAEsB,WAAW,CAAC,CAC7FR,cAAc,EAAE,CAClB,CACF,CAEA;AACA,KAAM,CAAAS,YAAoB,CAAG,EAAE,CAE/B;AACA,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGrH,KAAK,CAACuC,MAAM,CAAE8E,CAAC,EAAE,CAAE,CACrC,KAAM,CAAA/E,IAAI,CAAGtC,KAAK,CAACqH,CAAC,CAAC,CACrB,KAAM,CAAAZ,MAAM,CAAGnE,IAAI,CAACJ,EAAE,CAEtB,GAAIkF,cAAc,CAACX,MAAM,CAAC,EAAIL,mBAAmB,CAACK,MAAM,CAAC,CAAE,CACzD;AACAuB,YAAY,CAACC,IAAI,CAAC,CAAE,GAAG7B,mBAAmB,CAACK,MAAM,CAAE,CAAC,CAAC,CACvD,CAAC,IAAM,CACL;AACAuB,YAAY,CAACC,IAAI,CAAC3F,IAAI,CAAC,CACzB,CACF,CAEA;AACArC,QAAQ,CAAC+H,YAAY,CAAC,CACtB5G,gBAAgB,CAAC4G,YAAY,CAAC,CAE9B1H,kBAAkB,CAAC,0CAA0C+F,YAAY,oBAAoBiB,gBAAgB,uBAAuBC,cAAc,UAAU,CAAC,CAC/J,CAEA;AACAvB,UAAU,CAAC,IAAM,CACf1F,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAE,IAAI,CAAC,CAEV,CAAE,MAAOT,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDS,kBAAkB,CAAC,6BAA6BT,KAAK,EAAE,CAAC,CAExD;AACAmG,UAAU,CAAC,IAAM,CACf1F,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,OAAS,CACRH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAA+H,cAAc,CAAGA,CAAA,GAAM,CAC3B,GAAI3H,QAAQ,CAAE,CACZ;AACAG,gBAAgB,CAAC,EAAE,CAAC,CACpBE,eAAe,CAAC,CAAC,CAAC,CAAC,CACnBE,YAAY,CAAC,KAAK,CAAC,CACnBE,WAAW,CAAC,EAAE,CAAC,CAEf;AACAoB,UAAU,CAAC,CAAC,CACd,CAAC,IAAM,CACL;AACA,KAAM,CAAA+F,eAAsC,CAAG,CAAC,CAAC,CACjDhH,aAAa,CAACiH,OAAO,CAAC9F,IAAI,EAAI,CAC5B6F,eAAe,CAAC7F,IAAI,CAACJ,EAAE,CAAC,CAAG,CAAE,GAAGI,IAAK,CAAC,CACxC,CAAC,CAAC,CACF1B,eAAe,CAACuH,eAAe,CAAC,CAClC,CAEA;AACA3H,WAAW,CAAC,CAACD,QAAQ,CAAC,CAEtB;AACAW,cAAc,CAAC,EAAE,CAAC,CAClBI,eAAe,CAAC,EAAE,CAAC,CACrB,CAAC,CAED,KAAM,CAAA+G,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B;AACA,GAAI5H,aAAa,CAAC8B,MAAM,GAAK,CAAC,EAAIxB,QAAQ,CAACwB,MAAM,GAAK,CAAC,CAAE,CACvD4D,KAAK,CAAC,+EAA+E,CAAC,CACtF,OACF,CAEA,GAAI,CACFhG,UAAU,CAAC,IAAI,CAAC,CAChBC,QAAQ,CAAC,IAAI,CAAC,CAEdT,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxCD,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEa,aAAa,CAAC,CACjDd,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEmB,QAAQ,CAACwB,MAAM,CAAC,CAEvD;AACA,KAAM,CAAA6E,cAAuC,CAAG,CAAC,CAAC,CAClD,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5G,aAAa,CAAC8B,MAAM,CAAE8E,CAAC,EAAE,CAAE,CAC7CD,cAAc,CAAC3G,aAAa,CAAC4G,CAAC,CAAC,CAAC,CAAG,IAAI,CACzC,CAEA;AACA,GAAI,CAAAhB,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAiC,UAAU,CAAG,CAAC,CAClB,GAAI,CAAAC,aAAa,CAAG,CAAC,CAErB;AACA,IAAK,GAAI,CAAAlB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5G,aAAa,CAAC8B,MAAM,CAAE8E,CAAC,EAAE,CAAE,CAC7C,KAAM,CAAAZ,MAAM,CAAGhG,aAAa,CAAC4G,CAAC,CAAC,CAC/B,KAAM,CAAAG,UAAU,CAAG7G,YAAY,CAAC8F,MAAM,CAAC,CAEvC,GAAI,CAACe,UAAU,CAAE,CACf7H,OAAO,CAACC,GAAG,CAAC,QAAQ6G,MAAM,uCAAuC,CAAC,CAClE,SACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAgB,YAAY,CAAGC,MAAM,CAACjB,MAAM,CAAC,CACnC9G,OAAO,CAACC,GAAG,CAAC,sBAAsB6G,MAAM,KAAK,MAAO,CAAAA,MAAM,gBAAgBgB,YAAY,KAAK,MAAO,CAAAA,YAAY,GAAG,CAAC,CAElH,KAAM,CAAAE,OAAO,CAAGtJ,GAAG,CAACN,EAAE,CAAE,OAAO,CAAE0J,YAAY,CAAC,CAE9C;AACA,KAAM,CAAAG,OAAO,CAAG,KAAM,CAAAtJ,MAAM,CAACqJ,OAAO,CAAC,CAErC;AACA,KAAM,CAAEzF,EAAE,CAAE,GAAG2F,UAAW,CAAC,CAAGL,UAAU,CAExC,GAAII,OAAO,CAACE,MAAM,CAAC,CAAC,CAAE,CACpB;AACAnI,OAAO,CAACC,GAAG,CAAC,uBAAuB6H,YAAY,KAAK,CAAC,CACrD,KAAM,CAAAtJ,SAAS,CAACwJ,OAAO,CAAEE,UAAU,CAAC,CACpClI,OAAO,CAACC,GAAG,CAAC,QAAQ6H,YAAY,yBAAyB,CAAC,CAC5D,CAAC,IAAM,CACL;AACA9H,OAAO,CAACC,GAAG,CAAC,WAAW6H,YAAY,4BAA4B,CAAC,CAChE,KAAM,CAAA9I,MAAM,CAACgJ,OAAO,CAAEE,UAAU,CAAC,CACjClI,OAAO,CAACC,GAAG,CAAC,QAAQ6H,YAAY,mBAAmB,CAAC,CACtD,CAEApB,YAAY,EAAE,CAChB,CAAE,MAAO0B,WAAW,CAAE,CACpBpI,OAAO,CAACE,KAAK,CAAC,yCAAyC4G,MAAM,GAAG,CAAEsB,WAAW,CAAC,CAC9EO,UAAU,EAAE,CACd,CACF,CAEA;AACA,IAAK,GAAI,CAAAjB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGtG,QAAQ,CAACwB,MAAM,CAAE8E,CAAC,EAAE,CAAE,CACxC,KAAM,CAAAmB,OAAO,CAAGzH,QAAQ,CAACsG,CAAC,CAAC,CAE3B;AACA,GAAI,CAACmB,OAAO,CAACrG,GAAG,EAAIqG,OAAO,CAACrG,GAAG,CAACK,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAC7C7C,OAAO,CAACC,GAAG,CAAC,iBAAiByH,CAAC,CAAC,CAAC,mBAAmB,CAAC,CACpD,SACF,CAEA,GAAI,CACF;AACA,KAAM,CAAEnF,EAAE,CAAE,GAAGuG,QAAS,CAAC,CAAGD,OAAO,CAEnC7I,OAAO,CAACC,GAAG,CAAC,0BAA0B4I,OAAO,CAACrG,GAAG,MAAM,CAAC,CAExD;AACA,KAAM,CAAAiD,QAAQ,CAAGpH,UAAU,CAACD,EAAE,CAAE,OAAO,CAAC,CACxC,KAAM,CAAA2K,MAAM,CAAG,KAAM,CAAAxK,MAAM,CAACkH,QAAQ,CAAEqD,QAAQ,CAAC,CAE/C9I,OAAO,CAACC,GAAG,CAAC,iBAAiB4I,OAAO,CAACrG,GAAG,uBAAuBuG,MAAM,CAACxG,EAAE,EAAE,CAAC,CAE3E;AACA,KAAM,CAAAyG,aAAa,CAAG,CACpBzG,EAAE,CAAEwG,MAAM,CAACxG,EAAE,CACb,GAAGuG,QACL,CAAC,CAED;AACAzI,KAAK,CAACiI,IAAI,CAACU,aAAqB,CAAC,CAEjCJ,aAAa,EAAE,CACflC,YAAY,EAAE,CAChB,CAAE,MAAOuC,QAAQ,CAAE,CACjBjJ,OAAO,CAACE,KAAK,CAAC,2CAA2C2I,OAAO,CAACrG,GAAG,IAAI,CAAEyG,QAAQ,CAAC,CACnFN,UAAU,EAAE,CACd,CACF,CAEA3I,OAAO,CAACC,GAAG,CAAC,wBAAwByG,YAAY,iBAAiBkC,aAAa,qBAAqBD,UAAU,UAAU,CAAC,CAExH;AACA,KAAM,CAAAN,YAAoB,CAAG,EAAE,CAE/B;AACA,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGrH,KAAK,CAACuC,MAAM,CAAE8E,CAAC,EAAE,CAAE,CACrC,KAAM,CAAA/E,IAAI,CAAGtC,KAAK,CAACqH,CAAC,CAAC,CACrB,KAAM,CAAAZ,MAAM,CAAGnE,IAAI,CAACJ,EAAE,CAEtB,GAAIkF,cAAc,CAACX,MAAM,CAAC,EAAI9F,YAAY,CAAC8F,MAAM,CAAC,CAAE,CAClD;AACAuB,YAAY,CAACC,IAAI,CAAC,CAAE,GAAGtH,YAAY,CAAC8F,MAAM,CAAE,CAAC,CAAC,CAChD,CAAC,IAAM,CACL;AACAuB,YAAY,CAACC,IAAI,CAAC3F,IAAI,CAAC,CACzB,CACF,CAEA;AACArC,QAAQ,CAAC+H,YAAY,CAAC,CACtB5G,gBAAgB,CAAC4G,YAAY,CAAC,CAE9B;AACA7B,KAAK,CAAC,GAAGE,YAAY,gCAAgCkC,aAAa,CAAG,CAAC,CAAG,KAAKA,aAAa,yBAAyB,CAAG,EAAE,GAAGD,UAAU,CAAG,CAAC,CAAG,KAAKA,UAAU,UAAU,CAAG,EAAE,EAAE,CAAC,CAE9K;AACA9H,WAAW,CAAC,KAAK,CAAC,CAClBE,gBAAgB,CAAC,EAAE,CAAC,CACpBE,eAAe,CAAC,CAAC,CAAC,CAAC,CACnBI,WAAW,CAAC,EAAE,CAAC,CACfF,YAAY,CAAC,KAAK,CAAC,CAErB,CAAE,MAAOjB,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC7DsG,KAAK,CAAC,+CAA+C,CAAC,CACxD,CAAC,OAAS,CACRhG,UAAU,CAAC,KAAK,CAAC,CACjBG,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CACF,CAAC,CAED;AACA,KAAM,CAAAuI,OAAO,CAAGA,CAACC,IAAS,CAAEC,IAAS,GAAc,CACjD;AACA,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,GAAGC,MAAM,CAACF,IAAI,CAACF,IAAI,CAAC,CAAE,GAAGI,MAAM,CAACF,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,CAElE,IAAK,KAAM,CAAAI,GAAG,GAAI,CAAAH,IAAI,CAAE,CACtB;AACA,GAAII,KAAK,CAACC,OAAO,CAACP,IAAI,CAACK,GAAG,CAAC,CAAC,EAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,GAAG,CAAC,CAAC,CAAE,CACxD,GAAIL,IAAI,CAACK,GAAG,CAAC,CAAC5G,MAAM,GAAKwG,IAAI,CAACI,GAAG,CAAC,CAAC5G,MAAM,CAAE,MAAO,MAAK,CACvD,GAAI,CAACuG,IAAI,CAACK,GAAG,CAAC,CAACG,KAAK,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAKD,GAAG,GAAKR,IAAI,CAACI,GAAG,CAAC,CAACK,KAAK,CAAC,CAAC,CAAE,MAAO,MAAK,CAC9E,CACA;AAAA,IACK,IAAIV,IAAI,CAACK,GAAG,CAAC,GAAKJ,IAAI,CAACI,GAAG,CAAC,CAAE,CAChC,MAAO,MAAK,CACd,CACF,CAEA,MAAO,KAAI,CACb,CAAC,CAED;AACA,KAAM,CAAAM,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAIhJ,aAAa,CAAC8B,MAAM,GAAK,CAAC,CAAE,CAC9B,OACF,CAEA,GAAI,CACFpC,UAAU,CAAC,IAAI,CAAC,CAChBC,QAAQ,CAAC,IAAI,CAAC,CAEdT,OAAO,CAACC,GAAG,CAAC,+BAA+Ba,aAAa,CAAC8B,MAAM,SAAS,CAAE9B,aAAa,CAAC,CAExF;AACA,KAAM,CAAAiJ,aAAa,CAAG1J,KAAK,CAAC0C,MAAM,CAACJ,IAAI,EAAI7B,aAAa,CAACoC,QAAQ,CAACP,IAAI,CAACJ,EAAE,CAAC,CAAC,CAC3EvC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAE8J,aAAa,CAAC,CAEnE,GAAIA,aAAa,CAACnH,MAAM,GAAK,CAAC,CAAE,CAC9B5C,OAAO,CAAC+G,IAAI,CAAC,6CAA6C,CAAC,CAC3DvG,UAAU,CAAC,KAAK,CAAC,CAAE;AACnB,OACF,CAEA;AACA,KAAM,CAAAwJ,QAAQ,CAAGD,aAAa,CAAC1H,IAAI,CAACM,IAAI,EACtCA,IAAI,CAACH,GAAG,GAAK,eAAe,EAC5BG,IAAI,CAACH,GAAG,CAACU,QAAQ,CAAC,MAAM,CAAC,EACzBP,IAAI,CAACH,GAAG,CAACU,QAAQ,CAAC,cAAc,CAAC,EACjCP,IAAI,CAACP,IAAI,GAAK,cAChB,CAAC,CAED,GAAI4H,QAAQ,CAAE,CACZhK,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAE+J,QAAQ,CAAC,CAExE;AACA,KAAM,CAAAC,sBAAsB,CAAC,CAAC,CAChC,CAEA;AACA,IAAK,KAAM,CAAAtH,IAAI,GAAI,CAAAoH,aAAa,CAAE,CAChC,GAAI,CACF;AACA,GAAIpH,IAAI,CAACH,GAAG,CAACU,QAAQ,CAAC,MAAM,CAAC,EAAIP,IAAI,CAACH,GAAG,CAACU,QAAQ,CAAC,cAAc,CAAC,EAAIP,IAAI,CAACP,IAAI,GAAK,cAAc,CAAE,CAClGpC,OAAO,CAACC,GAAG,CAAC,QAAQ0C,IAAI,CAACH,GAAG,sDAAsD,CAAC,CACnF,SACF,CAEAxC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAE0C,IAAI,CAAC,CAE/D;AACA,KAAM,CAAAmF,YAAY,CAAGC,MAAM,CAACpF,IAAI,CAACJ,EAAE,CAAC,CACpCvC,OAAO,CAACC,GAAG,CAAC,sBAAsB0C,IAAI,CAACJ,EAAE,KAAK,MAAO,CAAAI,IAAI,CAACJ,EAAE,gBAAgBuF,YAAY,KAAK,MAAO,CAAAA,YAAY,GAAG,CAAC,CAEpH;AACA,KAAM,CAAAE,OAAO,CAAGtJ,GAAG,CAACN,EAAE,CAAE,OAAO,CAAE0J,YAAY,CAAC,CAC9C,KAAM,CAAAG,OAAO,CAAG,KAAM,CAAAtJ,MAAM,CAACqJ,OAAO,CAAC,CAErC,GAAIC,OAAO,CAACE,MAAM,CAAC,CAAC,CAAE,CACpBnI,OAAO,CAACC,GAAG,CAAC,QAAQ6H,YAAY,KAAKnF,IAAI,CAACH,GAAG,yCAAyC,CAAC,CACvF,KAAM,CAAA/D,SAAS,CAACuJ,OAAO,CAAC,CACxBhI,OAAO,CAACC,GAAG,CAAC,QAAQ6H,YAAY,KAAKnF,IAAI,CAACH,GAAG,wBAAwB,CAAC,CACxE,CAAC,IAAM,CACLxC,OAAO,CAAC+G,IAAI,CAAC,QAAQe,YAAY,KAAKnF,IAAI,CAACH,GAAG,yCAAyC,CAAC,CAExF;AACAxC,OAAO,CAACC,GAAG,CAAC,sBAAsB0C,IAAI,CAACH,GAAG,6BAA6B,CAAC,CAExE,KAAM,CAAAiD,QAAQ,CAAGpH,UAAU,CAACD,EAAE,CAAE,OAAO,CAAC,CACxC,KAAM,CAAA2H,CAAC,CAAGnH,KAAK,CAAC6G,QAAQ,CAAEvG,KAAK,CAAC,KAAK,CAAE,IAAI,CAAEyD,IAAI,CAACH,GAAG,CAAC,CAAC,CACvD,KAAM,CAAA0H,aAAa,CAAG,KAAM,CAAA5L,OAAO,CAACyH,CAAC,CAAC,CAEtC,GAAImE,aAAa,CAACjE,KAAK,CAAE,CACvBjG,OAAO,CAAC+G,IAAI,CAAC,kCAAkCpE,IAAI,CAACH,GAAG,kBAAkB,CAAC,CAC1E,SACF,CAEA;AACA,GAAI,CAAA2H,YAAY,CAAG,CAAC,CACpB,IAAK,KAAM,CAAAC,WAAW,GAAI,CAAAF,aAAa,CAAC/D,IAAI,CAAE,CAC5C,KAAM,CAAAkE,KAAK,CAAGD,WAAW,CAAC7H,EAAE,CAC5BvC,OAAO,CAACC,GAAG,CAAC,oCAAoCoK,KAAK,kBAAkB,CAAC,CAExE,KAAM,CAAA5L,SAAS,CAAC2L,WAAW,CAACE,GAAG,CAAC,CAEhCtK,OAAO,CAACC,GAAG,CAAC,SAAS0C,IAAI,CAACH,GAAG,oBAAoB6H,KAAK,wBAAwB,CAAC,CAC/EF,YAAY,EAAE,CAChB,CAEAnK,OAAO,CAACC,GAAG,CAAC,GAAGkK,YAAY,0CAA0CxH,IAAI,CAACH,GAAG,GAAG,CAAC,CACnF,CACF,CAAE,MAAO+H,WAAW,CAAE,CACpBvK,OAAO,CAACE,KAAK,CAAC,0CAA0CyC,IAAI,CAACH,GAAG,IAAI,CAAE+H,WAAW,CAAC,CACpF,CACF,CAEAvK,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CACzD;AACA,KAAM,CAAAwC,UAAU,CAAC,CAAC,CAElB;AACA5B,WAAW,CAAC,KAAK,CAAC,CAClBE,gBAAgB,CAAC,EAAE,CAAC,CACpBE,eAAe,CAAC,CAAC,CAAC,CAAC,CACnBE,YAAY,CAAC,KAAK,CAAC,CAErB,CAAE,MAAOjB,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CAAC,OAAS,CACR;AACAM,UAAU,CAAC,KAAK,CAAC,CACjB;AACAG,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CACF,CAAC,CAED;AACA,KAAM,CAAAsJ,sBAAsB,CAAG,KAAAA,CAAA,GAAY,CACzC,GAAI,CACFjK,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC,CAEhF,KAAM,CAAAwF,QAAQ,CAAGpH,UAAU,CAACD,EAAE,CAAE,OAAO,CAAC,CAExC;AACA4B,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CACnD,KAAM,CAAAuK,SAAS,CAAG5L,KAAK,CAAC6G,QAAQ,CAAEvG,KAAK,CAAC,MAAM,CAAE,IAAI,CAAE,cAAc,CAAC,CAAC,CACtE,KAAM,CAAAuL,YAAY,CAAG,KAAM,CAAAnM,OAAO,CAACkM,SAAS,CAAC,CAE7C,GAAI,CAACC,YAAY,CAACxE,KAAK,CAAE,CACvBjG,OAAO,CAACC,GAAG,CAAC,GAAGwK,YAAY,CAACC,IAAI,yCAAyC,CAAC,CAE1E,IAAK,KAAM,CAAAN,WAAW,GAAI,CAAAK,YAAY,CAACtE,IAAI,CAAE,CAC3C,KAAM,CAAA2C,QAAQ,CAAGsB,WAAW,CAAChE,IAAI,CAAC,CAAC,CACnCpG,OAAO,CAACC,GAAG,CAAC,mBAAmBmK,WAAW,CAAC7H,EAAE,SAASuG,QAAQ,CAACtG,GAAG,UAAUsG,QAAQ,CAAC1G,IAAI,EAAE,CAAC,CAE5F,GAAI0G,QAAQ,CAACtG,GAAG,GAAKsG,QAAQ,CAACtG,GAAG,CAACU,QAAQ,CAAC,MAAM,CAAC,EAAI4F,QAAQ,CAACtG,GAAG,GAAK,eAAe,CAAC,CAAE,CACvFxC,OAAO,CAACC,GAAG,CAAC,sCAAsCmK,WAAW,CAAC7H,EAAE,KAAKuG,QAAQ,CAACtG,GAAG,GAAG,CAAC,CACrF,KAAM,CAAA/D,SAAS,CAAC2L,WAAW,CAACE,GAAG,CAAC,CAChCtK,OAAO,CAACC,GAAG,CAAC,sBAAsBmK,WAAW,CAAC7H,EAAE,KAAKuG,QAAQ,CAACtG,GAAG,wBAAwB,CAAC,CAC5F,CACF,CACF,CAAC,IAAM,CACLxC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAC3D,CAEA;AACAD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACpD,KAAM,CAAA0K,SAAS,CAAG/L,KAAK,CAAC6G,QAAQ,CAAEvG,KAAK,CAAC,KAAK,CAAE,IAAI,CAAE,MAAM,CAAC,CAAEA,KAAK,CAAC,KAAK,CAAE,IAAI,CAAE,YAAY,CAAC,CAAC,CAC/F,KAAM,CAAA0L,YAAY,CAAG,KAAM,CAAAtM,OAAO,CAACqM,SAAS,CAAC,CAE7C,GAAI,CAACC,YAAY,CAAC3E,KAAK,CAAE,CACvBjG,OAAO,CAACC,GAAG,CAAC,GAAG2K,YAAY,CAACF,IAAI,6CAA6C,CAAC,CAE9E,IAAK,KAAM,CAAAN,WAAW,GAAI,CAAAQ,YAAY,CAACzE,IAAI,CAAE,CAC3C,KAAM,CAAA2C,QAAQ,CAAGsB,WAAW,CAAChE,IAAI,CAAC,CAAC,CACnCpG,OAAO,CAACC,GAAG,CAAC,wBAAwBmK,WAAW,CAAC7H,EAAE,SAASuG,QAAQ,CAACtG,GAAG,EAAE,CAAC,CAE1ExC,OAAO,CAACC,GAAG,CAAC,6BAA6BmK,WAAW,CAAC7H,EAAE,KAAKuG,QAAQ,CAACtG,GAAG,GAAG,CAAC,CAC5E,KAAM,CAAA/D,SAAS,CAAC2L,WAAW,CAACE,GAAG,CAAC,CAChCtK,OAAO,CAACC,GAAG,CAAC,aAAamK,WAAW,CAAC7H,EAAE,KAAKuG,QAAQ,CAACtG,GAAG,wBAAwB,CAAC,CACnF,CACF,CAAC,IAAM,CACLxC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAC1D,CAEA;AACAD,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CACzD,KAAM,CAAA4K,UAAU,CAAGjM,KAAK,CAAC6G,QAAQ,CAAEvG,KAAK,CAAC,KAAK,CAAE,IAAI,CAAE,eAAe,CAAC,CAAC,CACvE,KAAM,CAAA4L,aAAa,CAAG,KAAM,CAAAxM,OAAO,CAACuM,UAAU,CAAC,CAE/C,GAAI,CAACC,aAAa,CAAC7E,KAAK,CAAE,CACxBjG,OAAO,CAACC,GAAG,CAAC,GAAG6K,aAAa,CAACJ,IAAI,+CAA+C,CAAC,CAEjF,IAAK,KAAM,CAAAN,WAAW,GAAI,CAAAU,aAAa,CAAC3E,IAAI,CAAE,CAC5CnG,OAAO,CAACC,GAAG,CAAC,8BAA8BmK,WAAW,CAAC7H,EAAE,kBAAkB,CAAC,CAC3E,KAAM,CAAA9D,SAAS,CAAC2L,WAAW,CAACE,GAAG,CAAC,CAChCtK,OAAO,CAACC,GAAG,CAAC,cAAcmK,WAAW,CAAC7H,EAAE,uCAAuC,CAAC,CAClF,CACF,CAAC,IAAM,CACLvC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CACjE,CAEA;AACAD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CACtD,KAAM,CAAA8K,aAAa,CAAGnM,KAAK,CAAC6G,QAAQ,CAAE5G,KAAK,CAAC,IAAI,CAAC,CAAC,CAClD,KAAM,CAAAmM,gBAAgB,CAAG,KAAM,CAAA1M,OAAO,CAACyM,aAAa,CAAC,CAErD,GAAI,CAAAE,oBAAoB,CAAG,KAAK,CAEhC,IAAK,KAAM,CAAAb,WAAW,GAAI,CAAAY,gBAAgB,CAAC7E,IAAI,CAAE,CAC/C,KAAM,CAAA2C,QAAQ,CAAGsB,WAAW,CAAChE,IAAI,CAAC,CAAC,CAEnC;AACA,GAAI,CAAC0C,QAAQ,CAAC1G,IAAI,GAAK,cAAc,EAAI0G,QAAQ,CAAC1G,IAAI,GAAK,MAAM,GAC5D0G,QAAQ,CAACtG,GAAG,GAAKsG,QAAQ,CAACtG,GAAG,CAACU,QAAQ,CAAC,MAAM,CAAC,EAAI4F,QAAQ,CAACtG,GAAG,GAAK,eAAe,CAAE,CAAE,CACzFyI,oBAAoB,CAAG,IAAI,CAC3BjL,OAAO,CAACC,GAAG,CAAC,wDAAwDmK,WAAW,CAAC7H,EAAE,SAASuG,QAAQ,CAACtG,GAAG,UAAUsG,QAAQ,CAAC1G,IAAI,EAAE,CAAC,CAEjIpC,OAAO,CAACC,GAAG,CAAC,sCAAsCmK,WAAW,CAAC7H,EAAE,EAAE,CAAC,CACnE,KAAM,CAAA9D,SAAS,CAAC2L,WAAW,CAACE,GAAG,CAAC,CAChCtK,OAAO,CAACC,GAAG,CAAC,sBAAsBmK,WAAW,CAAC7H,EAAE,uBAAuB,CAAC,CAC1E,CACF,CAEA,GAAI,CAAC0I,oBAAoB,CAAE,CACzBjL,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC,CACvE,CAEA,MAAO,KAAI,CACb,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,iEAAiE,CAAEA,KAAK,CAAC,CACvF,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAgL,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CAACC,MAAM,CAACC,OAAO,CAAC,qGAAqG,CAAC,CAAE,CAC1H,OACF,CAEA,GAAI,CACF5K,UAAU,CAAC,IAAI,CAAC,CAChBC,QAAQ,CAAC,IAAI,CAAC,CACdE,kBAAkB,CAAC,oCAAoC,CAAC,CAExD;AACA,KAAM,CAAA8E,QAAQ,CAAGpH,UAAU,CAACD,EAAE,CAAE,OAAO,CAAC,CACxC,KAAM,CAAA4H,QAAQ,CAAG,KAAM,CAAA/G,iBAAiB,CAACL,KAAK,CAAC6G,QAAQ,CAAE5G,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAEtE,GAAImH,QAAQ,CAACC,KAAK,CAAE,CAClBtF,kBAAkB,CAAC,4CAA4C,CAAC,CAChE0F,UAAU,CAAC,IAAM1F,kBAAkB,CAAC,IAAI,CAAC,CAAE,IAAI,CAAC,CAChDH,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA;AACA,KAAM,CAAA6K,WAAW,CAAG,GAAI,CAAAC,GAAG,CAAyC,CAAC,CAErE;AACAtF,QAAQ,CAACG,IAAI,CAACsC,OAAO,CAAC/J,GAAG,EAAI,KAAA6M,SAAA,CAC3B,KAAM,CAAAnF,IAAI,CAAG1H,GAAG,CAAC0H,IAAI,CAAC,CAAC,CACvB,KAAM,CAAAoF,IAAI,EAAAD,SAAA,CAAGnF,IAAI,CAAC5D,GAAG,UAAA+I,SAAA,iBAARA,SAAA,CAAU1I,IAAI,CAAC,CAAC,CAE7B,GAAI2I,IAAI,CAAE,KAAAC,gBAAA,CACR;AACA,KAAM,CAAAC,cAAc,CAAGF,IAAI,CAACvI,WAAW,CAAC,CAAC,CAAC0I,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAE9D,GAAI,CAACN,WAAW,CAACO,GAAG,CAACF,cAAc,CAAC,CAAE,CACpCL,WAAW,CAACQ,GAAG,CAACH,cAAc,CAAE,EAAE,CAAC,CACrC,CAEA,CAAAD,gBAAA,CAAAJ,WAAW,CAACS,GAAG,CAACJ,cAAc,CAAC,UAAAD,gBAAA,iBAA/BA,gBAAA,CAAiCnD,IAAI,CAAC,CACpC/F,EAAE,CAAE7D,GAAG,CAAC6D,EAAE,CACV6D,IAAI,CAAEA,IACR,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAA2F,cAAwB,CAAG,EAAE,CACnCV,WAAW,CAAC5C,OAAO,CAAC,CAACpI,KAAK,CAAEmL,IAAI,GAAK,CACnC,GAAInL,KAAK,CAACuC,MAAM,CAAG,CAAC,CAAE,CACpBmJ,cAAc,CAACzD,IAAI,CAACkD,IAAI,CAAC,CAC3B,CACF,CAAC,CAAC,CAEF,GAAIO,cAAc,CAACnJ,MAAM,GAAK,CAAC,CAAE,CAC/BjC,kBAAkB,CAAC,+CAA+C,CAAC,CACnE0F,UAAU,CAAC,IAAM1F,kBAAkB,CAAC,IAAI,CAAC,CAAE,IAAI,CAAC,CAChDH,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEAG,kBAAkB,CAAC,GAAGoL,cAAc,CAACnJ,MAAM,sDAAsD,CAAC,CAElG,GAAI,CAAAoJ,sBAAsB,CAAG,CAAC,CAC9B,GAAI,CAAAC,cAAc,CAAG,CAAC,CAEtB;AACA,KAAM,CAAAC,UAAU,CAAG,EAAE,CAErB,IAAK,GAAI,CAAAxE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGqE,cAAc,CAACnJ,MAAM,CAAE8E,CAAC,EAAIwE,UAAU,CAAE,CAC1D,KAAM,CAAAC,KAAK,CAAGJ,cAAc,CAACxH,KAAK,CAACmD,CAAC,CAAEA,CAAC,CAAGwE,UAAU,CAAC,CAErD;AACA,KAAM,CAAA3E,OAAO,CAAC6E,GAAG,CAACD,KAAK,CAACzJ,GAAG,CAAC,KAAO,CAAA8I,IAAI,EAAK,CAC1C,KAAM,CAAAnL,KAAK,CAAGgL,WAAW,CAACS,GAAG,CAACN,IAAI,CAAC,EAAI,EAAE,CACzCxL,OAAO,CAACC,GAAG,CAAC,iCAAiCuL,IAAI,MAAMnL,KAAK,CAACuC,MAAM,eAAe,CAAC,CAEnF;AACAvC,KAAK,CAACgM,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CACnB;AACA,KAAM,CAAAC,UAAU,CAAGF,CAAC,CAAClG,IAAI,CAACiB,QAAQ,EAAIiF,CAAC,CAAClG,IAAI,CAACkB,SAAS,CACtD,KAAM,CAAAmF,UAAU,CAAGF,CAAC,CAACnG,IAAI,CAACiB,QAAQ,EAAIkF,CAAC,CAACnG,IAAI,CAACkB,SAAS,CAEtD,GAAIkF,UAAU,EAAI,CAACC,UAAU,CAAE,MAAO,CAAC,CAAC,CACxC,GAAI,CAACD,UAAU,EAAIC,UAAU,CAAE,MAAO,EAAC,CAEvC;AACA,KAAM,CAAAC,eAAe,CAAGJ,CAAC,CAAClG,IAAI,CAACjD,OAAO,EAAImJ,CAAC,CAAClG,IAAI,CAAChD,KAAK,EAAIkJ,CAAC,CAAClG,IAAI,CAAC/C,UAAU,CAC3E,KAAM,CAAAsJ,eAAe,CAAGJ,CAAC,CAACnG,IAAI,CAACjD,OAAO,EAAIoJ,CAAC,CAACnG,IAAI,CAAChD,KAAK,EAAImJ,CAAC,CAACnG,IAAI,CAAC/C,UAAU,CAE3E,GAAIqJ,eAAe,EAAI,CAACC,eAAe,CAAE,MAAO,CAAC,CAAC,CAClD,GAAI,CAACD,eAAe,EAAIC,eAAe,CAAE,MAAO,EAAC,CAEjD;AACA,KAAM,CAAAC,WAAW,CAAGrD,MAAM,CAACF,IAAI,CAACiD,CAAC,CAAClG,IAAI,CAAC,CAACrD,MAAM,CAACyG,GAAG,EAAI8C,CAAC,CAAClG,IAAI,CAACoD,GAAG,CAAC,CAAC,CAAC5G,MAAM,CACzE,KAAM,CAAAiK,WAAW,CAAGtD,MAAM,CAACF,IAAI,CAACkD,CAAC,CAACnG,IAAI,CAAC,CAACrD,MAAM,CAACyG,GAAG,EAAI+C,CAAC,CAACnG,IAAI,CAACoD,GAAG,CAAC,CAAC,CAAC5G,MAAM,CAEzE,GAAIgK,WAAW,CAAGC,WAAW,CAAE,MAAO,CAAC,CAAC,CACxC,GAAID,WAAW,CAAGC,WAAW,CAAE,MAAO,EAAC,CAEvC;AACA,MAAO,CAAAN,CAAC,CAAChK,EAAE,CAACuK,aAAa,CAACR,CAAC,CAAC/J,EAAE,CAAC,CACjC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAwK,UAAU,CAAG1M,KAAK,CAAC,CAAC,CAAC,CAC3B,KAAM,CAAA2M,aAAa,CAAG3M,KAAK,CAACkE,KAAK,CAAC,CAAC,CAAC,CAEpCvE,OAAO,CAACC,GAAG,CAAC,wBAAwB8M,UAAU,CAACxK,EAAE,KAAKwK,UAAU,CAAC3G,IAAI,CAAC5D,GAAG,uBAAuBwK,aAAa,CAACpK,MAAM,WAAW,CAAC,CAEhI;AACA,IAAK,KAAM,CAAAD,IAAI,GAAI,CAAAqK,aAAa,CAAE,CAChC,GAAI,CACF,KAAM,CAAAhF,OAAO,CAAGtJ,GAAG,CAACN,EAAE,CAAE,OAAO,CAAEuE,IAAI,CAACJ,EAAE,CAAC,CACzC,KAAM,CAAA9D,SAAS,CAACuJ,OAAO,CAAC,CACxBhI,OAAO,CAACC,GAAG,CAAC,4BAA4B0C,IAAI,CAACJ,EAAE,KAAKI,IAAI,CAACyD,IAAI,CAAC5D,GAAG,GAAG,CAAC,CACrEwJ,sBAAsB,EAAE,CAC1B,CAAE,MAAO9L,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,4CAA4CyC,IAAI,CAACJ,EAAE,GAAG,CAAErC,KAAK,CAAC,CAC9E,CACF,CAEA+L,cAAc,EAAE,CAChB,GAAIA,cAAc,CAAG,CAAC,GAAK,CAAC,EAAIA,cAAc,GAAKF,cAAc,CAACnJ,MAAM,CAAE,CACxEjC,kBAAkB,CAAC,wBAAwBsL,cAAc,IAAIF,cAAc,CAACnJ,MAAM,mBAAmBoJ,sBAAsB,qBAAqB,CAAC,CACnJ,CACF,CAAC,CAAC,CAAC,CACL,CAEArL,kBAAkB,CAAC,sBAAsBqL,sBAAsB,2BAA2BD,cAAc,CAACnJ,MAAM,SAAS,CAAC,CAEzH;AACA,KAAM,CAAAH,UAAU,CAAC,CAAC,CAElB;AACA4D,UAAU,CAAC,IAAM,CACf1F,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAE,IAAI,CAAC,CAEV,CAAE,MAAOT,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,6CAA6C,CAAEA,KAAK,CAAC,CACnES,kBAAkB,CAAC,+CAA+CT,KAAK,EAAE,CAAC,CAC1EmG,UAAU,CAAC,IAAM1F,kBAAkB,CAAC,IAAI,CAAC,CAAE,IAAI,CAAC,CAClD,CAAC,OAAS,CACRH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAyM,mBAAmB,CAAI1K,EAAU,EAAK,CAC1C,GAAIzB,aAAa,CAACoC,QAAQ,CAACX,EAAE,CAAC,CAAE,CAC9BxB,gBAAgB,CAACD,aAAa,CAACiC,MAAM,CAAC+D,MAAM,EAAIA,MAAM,GAAKvE,EAAE,CAAC,CAAC,CAC/D;AACApB,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,IAAM,CACLJ,gBAAgB,CAAC,CAAC,GAAGD,aAAa,CAAEyB,EAAE,CAAC,CAAC,CACxC;AACA,GAAIzB,aAAa,CAAC8B,MAAM,CAAG,CAAC,GAAKvC,KAAK,CAACuC,MAAM,CAAE,CAC7CzB,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CACF,CAAC,CAED,KAAM,CAAA+L,gBAAgB,CAAGA,CAAC3K,EAAU,CAAE4K,KAAiB,CAAElI,KAAU,GAAK,CACtEhE,eAAe,CAAC,CACd,GAAGD,YAAY,CACf,CAACuB,EAAE,EAAG,CACJ,GAAGvB,YAAY,CAACuB,EAAE,CAAC,CACnB,CAAC4K,KAAK,EAAGlI,KACX,CACF,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAmI,aAAa,CAAGA,CAAA,GAAM,CAC1B;AACA,GAAI,CAACxM,QAAQ,CAAE,CACbC,WAAW,CAAC,IAAI,CAAC,CACnB,CAEA,KAAM,CAAAgI,OAAsB,CAAG,CAC7BtG,EAAE,CAAE,QAAQ8K,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CACxB9K,GAAG,CAAE,EAAE,CACPJ,IAAI,CAAE,EAAE,CACRoB,IAAI,CAAE,EAAE,CAAG;AACXL,OAAO,CAAE,EAAE,CACXC,KAAK,CAAE,EAAE,CACTC,UAAU,CAAE,EAAE,CACdC,SAAS,CAAE,EAAE,CACbC,KAAK,CAAE,EAAE,CACTG,UAAU,CAAE,EAAE,CACd6J,QAAQ,CAAE,EAAE,CACZC,UAAU,CAAE,EAAE,CACdC,WAAW,CAAE,EAAE,CACfhK,MAAM,CAAE,OACV,CAAC,CAED;AACApC,WAAW,CAACqM,YAAY,EAAI,CAAC7E,OAAO,CAAE,GAAG6E,YAAY,CAAC,CAAC,CAEvD;AACA7L,cAAc,CAAC,CAAC,CAAC,CAEjB;AACAwE,UAAU,CAAC,IAAM,CACf,KAAM,CAAAsH,UAAU,CAAGC,QAAQ,CAACC,aAAa,CAAC,4CAA4C,CAAqB,CAC3G,GAAIF,UAAU,CAAE,CACdA,UAAU,CAACG,KAAK,CAAC,CAAC,CACpB,CACF,CAAC,CAAE,GAAG,CAAC,CACT,CAAC,CAED,KAAM,CAAAC,mBAAmB,CAAGA,CAAClE,KAAa,CAAEsD,KAAiB,CAAElI,KAAU,GAAK,CAC5E,KAAM,CAAA+I,eAAe,CAAG,CAAC,GAAG5M,QAAQ,CAAC,CACrC4M,eAAe,CAACnE,KAAK,CAAC,CAAG,CACvB,GAAGmE,eAAe,CAACnE,KAAK,CAAC,CACzB,CAACsD,KAAK,EAAGlI,KACX,CAAC,CACD5D,WAAW,CAAC2M,eAAe,CAAC,CAC9B,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAIpE,KAAa,EAAK,CAC1C,KAAM,CAAAmE,eAAe,CAAG5M,QAAQ,CAAC2B,MAAM,CAAC,CAACmL,CAAC,CAAExG,CAAC,GAAKA,CAAC,GAAKmC,KAAK,CAAC,CAC9DxI,WAAW,CAAC2M,eAAe,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAAG,gBAAgB,CAAI/L,IAAY,EAAK,CACzCT,eAAe,CAACS,IAAI,CAAC,CACvB,CAAC,CAED,GAAI7B,OAAO,CAAE,CACX,mBACEX,KAAA,QAAKmF,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCtF,IAAA,QAAKqF,SAAS,CAAC,iBAAiB,CAAM,CAAC,cACvCrF,IAAA,MAAAsF,QAAA,CAAG,yBAAuB,CAAG,CAAC,EAC3B,CAAC,CAEV,CAEA,mBACEpF,KAAA,QAAAoF,QAAA,eACEtF,IAAA,QAAKqF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,cAC7BtF,IAAA,OAAIqF,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,OAAK,CAAI,CAAC,CACrC,CAAC,cAENpF,KAAA,QAAKmF,SAAS,CAAC,yBAAyB,CAAAC,QAAA,eACtCtF,IAAA,QAAKqF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAC5BpE,QAAQ,cACPhB,KAAA,CAAAE,SAAA,EAAAkF,QAAA,eACEpF,KAAA,WACEmF,SAAS,CAAC,QAAQ,CAClBQ,OAAO,CAAEmD,UAAW,CACpBlD,QAAQ,CAAEjF,OAAO,EAAKO,aAAa,CAAC8B,MAAM,GAAK,CAAC,EAAIxB,QAAQ,CAACwB,MAAM,GAAK,CAAG,CAC3EwL,KAAK,CAAE,CACLC,eAAe,CAAE,SAAS,CAAE;AAC5BC,KAAK,CAAE,OAAO,CACdC,UAAU,CAAE,MACd,CAAE,CACFlJ,KAAK,CAAC,+BAA+B,CAAAL,QAAA,eAErCtF,IAAA,MAAGqF,SAAS,CAAC,aAAa,CAAI,CAAC,SAAM,CAACjE,aAAa,CAAC8B,MAAM,CAAG,CAAC,EAAIxB,QAAQ,CAACwB,MAAM,CAAG,CAAC,CACnF,IAAI9B,aAAa,CAAC8B,MAAM,GAAGxB,QAAQ,CAACwB,MAAM,CAAG,CAAC,CAAG,IAAIxB,QAAQ,CAACwB,MAAM,EAAE,CAAG,EAAE,GAAG,CAC9E,EAAE,EACE,CAAC,cACThD,KAAA,WACEmF,SAAS,CAAC,yBAAyB,CACnCQ,OAAO,CAAEA,CAAA,GAAM,CACb,GAAI4F,MAAM,CAACC,OAAO,CAAC,6DAA6D,CAAC,CAAE,CACjFnK,eAAe,CAAC,CAAC,CAAC,CAAC,CACnBI,WAAW,CAAC,EAAE,CAAC,CACfN,gBAAgB,CAAC,EAAE,CAAC,CACpBI,YAAY,CAAC,KAAK,CAAC,CACnBN,WAAW,CAAC,KAAK,CAAC,CACpB,CACF,CAAE,CACFuN,KAAK,CAAE,CAAEI,UAAU,CAAE,KAAM,CAAE,CAC7BhJ,QAAQ,CAAEjF,OAAQ,CAClB8E,KAAK,CAAC,2BAA2B,CAAAL,QAAA,eAEjCtF,IAAA,MAAGqF,SAAS,CAAC,cAAc,CAAI,CAAC,WAClC,EAAQ,CAAC,cACTnF,KAAA,WACEmF,SAAS,CAAC,QAAQ,CAClBQ,OAAO,CAAE6H,aAAc,CACvBgB,KAAK,CAAE,CACLI,UAAU,CAAE,KAAK,CACjBH,eAAe,CAAE,SAAS,CAAE;AAC5BC,KAAK,CAAE,OAAO,CACdC,UAAU,CAAE,MACd,CAAE,CACF/I,QAAQ,CAAEjF,OAAQ,CAClB8E,KAAK,CAAC,yBAAyB,CAAAL,QAAA,eAE/BtF,IAAA,MAAGqF,SAAS,CAAC,aAAa,CAAI,CAAC,WACjC,EAAQ,CAAC,cACTnF,KAAA,WACEmF,SAAS,CAAC,sBAAsB,CAChCQ,OAAO,CAAEuE,YAAa,CACtBtE,QAAQ,CAAE1E,aAAa,CAAC8B,MAAM,GAAK,CAAC,EAAIrC,OAAQ,CAChD6N,KAAK,CAAE,CACLI,UAAU,CAAE,KAAK,CACjBH,eAAe,CAAE,SAAS,CAC1BC,KAAK,CAAE,OAAO,CACdC,UAAU,CAAE,MACd,CAAE,CACFlJ,KAAK,CAAC,wCAAkC,CAAAL,QAAA,eAExCtF,IAAA,MAAGqF,SAAS,CAAC,kBAAkB,CAAI,CAAC,UAAO,CAACjE,aAAa,CAAC8B,MAAM,CAAC,GACnE,EAAQ,CAAC,cACThD,KAAA,WACEmF,SAAS,CAAC,QAAQ,CAClBQ,OAAO,CAAEgB,oBAAqB,CAC9Bf,QAAQ,CAAE1E,aAAa,CAAC8B,MAAM,GAAK,CAAC,EAAIrC,OAAQ,CAChD6N,KAAK,CAAE,CAAEI,UAAU,CAAE,KAAM,CAAE,CAC7BnJ,KAAK,CAAC,0CAAiC,CAAAL,QAAA,eAEvCtF,IAAA,MAAGqF,SAAS,CAAC,uBAAuB,CAAI,CAAC,aAAO,CAACjE,aAAa,CAAC8B,MAAM,CAAC,GACxE,EAAQ,CAAC,EACT,CAAC,cAEHhD,KAAA,WACEmF,SAAS,CAAC,QAAQ,CAClBQ,OAAO,CAAEgD,cAAe,CAAAvD,QAAA,eAExBtF,IAAA,MAAGqF,SAAS,CAAC,aAAa,CAAI,CAAC,YACjC,EAAQ,CACT,CACE,CAAC,cAENnF,KAAA,QAAKmF,SAAS,CAAC,wBAAwB,CAACqJ,KAAK,CAAE,CAAEK,SAAS,CAAE,MAAO,CAAE,CAAAzJ,QAAA,eACnEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXuB,SAAS,CAAC,oBAAoB,CAC9B2J,WAAW,CAAC,qBAAqB,CACjCzJ,KAAK,CAAE3D,WAAY,CACnB4D,QAAQ,CAAGC,CAAC,EAAK5D,cAAc,CAAC4D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAChDO,QAAQ,CAAEjF,OAAQ,CACnB,CAAC,cACFb,IAAA,QAAKqF,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1BtF,IAAA,CAACH,UAAU,EACToP,YAAY,CAAER,gBAAiB,CAC/BzM,YAAY,CAAEA,YAAa,CAC3BkN,KAAK,CAAC,qBAAkB,CACxB7J,SAAS,CAAC,uBAAuB,CAClC,CAAC,CACC,CAAC,EACH,CAAC,EACH,CAAC,CAEL7E,KAAK,eAAIR,IAAA,QAAKqF,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAE9E,KAAK,CAAM,CAAC,cAEtDN,KAAA,QAAKmF,SAAS,CAAC,uBAAuB,CAACqJ,KAAK,CAAE,CAAES,SAAS,CAAE,MAAO,CAAE,CAAA7J,QAAA,eAClEtF,IAAA,QAAKqF,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3BpF,KAAA,MAAAoF,QAAA,EAAIxD,aAAa,CAACoB,MAAM,CAAC,8BAAsB,CAACtB,WAAW,CAAG,uBAAuBA,WAAW,GAAG,CAAG,EAAE,EAAI,CAAC,CAC1G,CAAC,cACN1B,KAAA,UAAOmF,SAAS,CAAE,cAAcnE,QAAQ,CAAG,SAAS,CAAG,EAAE,EAAG,CAAAoE,QAAA,eAC1DtF,IAAA,UAAAsF,QAAA,cACEpF,KAAA,OAAAoF,QAAA,EACGpE,QAAQ,eACPlB,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,UAAU,CACfsL,OAAO,CAAE5N,SAAU,CACnBgE,QAAQ,CAAEoB,qBAAsB,CAChCjB,KAAK,CAAC,2CAAkC,CACzC,CAAC,CACA,CACL,cACD3F,IAAA,OAAAsF,QAAA,CAAI,SAAI,CAAI,CAAC,cACbtF,IAAA,OAAAsF,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBtF,IAAA,OAAAsF,QAAA,CAAI,KAAG,CAAI,CAAC,cACZtF,IAAA,OAAAsF,QAAA,CAAI,SAAO,CAAI,CAAC,cAChBtF,IAAA,OAAAsF,QAAA,CAAI,eAAU,CAAI,CAAC,cACnBtF,IAAA,OAAAsF,QAAA,CAAI,OAAK,CAAI,CAAC,cACdtF,IAAA,OAAAsF,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBtF,IAAA,OAAAsF,QAAA,CAAI,aAAQ,CAAI,CAAC,cACjBtF,IAAA,OAAAsF,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBtF,IAAA,OAAAsF,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBtF,IAAA,OAAAsF,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBtF,IAAA,OAAAsF,QAAA,CAAI,gBAAW,CAAI,CAAC,cACpBtF,IAAA,OAAAsF,QAAA,CAAI,IAAE,CAAI,CAAC,cACXtF,IAAA,OAAAsF,QAAA,CAAI,QAAM,CAAI,CAAC,EACb,CAAC,CACA,CAAC,cACRpF,KAAA,UAAAoF,QAAA,EAEGpE,QAAQ,EAAIQ,QAAQ,CAACsB,GAAG,CAAC,CAACC,IAAI,CAAEkH,KAAK,QAAAkF,cAAA,oBACpCnP,KAAA,OAAgCmF,SAAS,CAAC,cAAc,CAAAC,QAAA,eACtDtF,IAAA,OAAI0O,KAAK,CAAE,CAACY,OAAO,CAAE,MAAM,CAAE,CAEzB,CAAC,cACLtP,IAAA,OAAAsF,QAAA,cACEtF,IAAA,CAACJ,YAAY,EACX2F,KAAK,CAAEtC,IAAI,CAACP,IAAI,EAAI,EAAG,CACvB8C,QAAQ,CAAGD,KAAK,EAAK8I,mBAAmB,CAAClE,KAAK,CAAE,MAAM,CAAE5E,KAAK,CAAE,CAC/DyJ,WAAW,CAAC,4BAAsB,CAClCN,KAAK,CAAE,CAAEa,KAAK,CAAE,MAAO,CAAE,CACzBC,UAAU,MACVC,UAAU,MACV9J,KAAK,CAAC,iBAAc,CACrB,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEpF,KAAA,WACEqF,KAAK,CAAEtC,IAAI,CAACa,IAAI,EAAI,EAAG,CACvB0B,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,MAAM,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACpEF,SAAS,CAAC,oBAAoB,CAC9BM,KAAK,CAAC,cAAc,CAAAL,QAAA,eAEpBtF,IAAA,WAAQuF,KAAK,CAAC,EAAE,CAAAD,QAAA,CAAC,yBAAoB,CAAQ,CAAC,CAC7C7E,UAAU,CAACuC,GAAG,CAACc,IAAI,eAClB9D,IAAA,WAAmBuF,KAAK,CAAEzB,IAAK,CAAAwB,QAAA,CAAExB,IAAI,EAAxBA,IAAiC,CAC/C,CAAC,EACI,CAAC,CACP,CAAC,cACL9D,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACH,GAAG,EAAI,EAAG,CACtB0C,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,KAAK,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACnEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,KAAK,CACZ,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACQ,OAAO,EAAI,EAAG,CAC1B+B,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,SAAS,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACvEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,SAAS,CAChB,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACyM,iBAAiB,EAAI,EAAG,CACpClK,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,mBAAmB,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACjFF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,yBAAsB,CAC7B,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACS,KAAK,EAAI,EAAG,CACxB8B,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,OAAO,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACrEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,OAAO,CACd,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACU,UAAU,EAAI,EAAG,CAC7B6B,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,YAAY,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1EF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,aAAa,CACpB,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA8J,cAAA,CAAApM,IAAI,CAAC4K,QAAQ,UAAAwB,cAAA,iBAAbA,cAAA,CAAe5H,IAAI,CAAC,IAAI,CAAC,GAAI,EAAG,CACvCjC,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,UAAU,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAACoK,KAAK,CAAC,GAAG,CAAC,CAAC3M,GAAG,CAAC4M,CAAC,EAAIA,CAAC,CAACzM,IAAI,CAAC,CAAC,CAAC,CAAE,CACtGkC,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,aAAU,CACjB,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAAC4M,UAAU,EAAI,EAAG,CAC7BrK,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,YAAY,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1EF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,yBAAyB,CAC/BqJ,WAAW,CAAC,aAAa,CAC1B,CAAC,CACA,CAAC,cACLhP,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAAC6M,cAAc,EAAI,EAAG,CACjCtK,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,gBAAgB,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC9EF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,iBAAiB,CACvBqJ,WAAW,CAAC,aAAa,CAC1B,CAAC,CACA,CAAC,cACLhP,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAEtC,IAAI,CAACe,UAAU,EAAI,EAAG,CAC7BwB,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,YAAY,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1EF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,YAAY,CACnB,CAAC,CACA,CAAC,cACL3F,IAAA,OAAAsF,QAAA,cACEpF,KAAA,SAAMmF,SAAS,CAAC,mBAAmB,CAAAC,QAAA,EAAC,uBAChB,cAAAtF,IAAA,QAAK,CAAC,6BAE1B,EAAM,CAAC,CACL,CAAC,cACLA,IAAA,OAAAsF,QAAA,CAAKrC,IAAI,CAACJ,EAAE,CAAK,CAAC,cAClB7C,IAAA,OAAAsF,QAAA,cACEpF,KAAA,WACEqF,KAAK,CAAEtC,IAAI,CAACc,MAAM,EAAI,OAAQ,CAC9ByB,QAAQ,CAAGC,CAAC,EAAK4I,mBAAmB,CAAClE,KAAK,CAAE,QAAQ,CAAE1E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACtEF,SAAS,CAAC,oBAAoB,CAC9BM,KAAK,CAAC,gBAAgB,CAAAL,QAAA,eAEtBtF,IAAA,WAAQuF,KAAK,CAAC,OAAO,CAAAD,QAAA,CAAC,OAAK,CAAQ,CAAC,cACpCtF,IAAA,WAAQuF,KAAK,CAAC,SAAS,CAAAD,QAAA,CAAC,SAAO,CAAQ,CAAC,EAClC,CAAC,CACP,CAAC,GAhIE,YAAYrC,IAAI,CAACJ,EAAE,EAiIxB,CAAC,EACN,CAAC,CAGDoB,yBAAyB,CAACjB,GAAG,CAAC,CAACC,IAAI,CAAEkH,KAAK,QAAA4F,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,eAAA,CAAAC,uBAAA,CAAAC,uBAAA,CAAAC,uBAAA,CAAAC,uBAAA,oBACzC1Q,KAAA,OAAqCmF,SAAS,CAAEjE,aAAa,CAACoC,QAAQ,CAACP,IAAI,CAACJ,EAAE,CAAC,CAAG,cAAc,CAAG,EAAG,CAAAyC,QAAA,EACnGpE,QAAQ,eACPlB,IAAA,OAAAsF,QAAA,cACEtF,IAAA,UACE8D,IAAI,CAAC,UAAU,CACfsL,OAAO,CAAEhO,aAAa,CAACoC,QAAQ,CAACP,IAAI,CAACJ,EAAE,CAAE,CACzC2C,QAAQ,CAAEA,CAAA,GAAM+H,mBAAmB,CAACtK,IAAI,CAACJ,EAAE,CAAE,CAC7C8C,KAAK,CAAC,yBAAsB,CAC7B,CAAC,CACA,CACL,cACD3F,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,CAACJ,YAAY,EACX2F,KAAK,CAAE,EAAAwK,qBAAA,CAAAzO,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAkN,qBAAA,iBAArBA,qBAAA,CAAuBrN,IAAI,GAAIO,IAAI,CAACP,IAAI,EAAI,EAAG,CACtD8C,QAAQ,CAAGD,KAAK,EAAKiI,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,MAAM,CAAE0C,KAAK,CAAE,CAC9DyJ,WAAW,CAAC,4BAAsB,CAClCN,KAAK,CAAE,CAAEa,KAAK,CAAE,MAAO,CAAE,CACzBC,UAAU,MACVC,UAAU,MACV9J,KAAK,CAAC,iBAAc,CACrB,CAAC,CAEFnD,eAAe,CAACS,IAAI,CAACP,IAAI,CAC1B,CACC,CAAC,cACL1C,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPhB,KAAA,WACEqF,KAAK,CAAE,EAAAyK,sBAAA,CAAA1O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAmN,sBAAA,iBAArBA,sBAAA,CAAuBlM,IAAI,GAAIb,IAAI,CAACa,IAAI,EAAI,EAAG,CACtD0B,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,MAAM,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACnEF,SAAS,CAAC,oBAAoB,CAC9BM,KAAK,CAAC,cAAc,CAAAL,QAAA,eAEpBtF,IAAA,WAAQuF,KAAK,CAAC,EAAE,CAAAD,QAAA,CAAC,yBAAoB,CAAQ,CAAC,CAC7C7E,UAAU,CAACuC,GAAG,CAACc,IAAI,eAClB9D,IAAA,WAAmBuF,KAAK,CAAEzB,IAAK,CAAAwB,QAAA,CAAExB,IAAI,EAAxBA,IAAiC,CAC/C,CAAC,EACI,CAAC,CAETb,IAAI,CAACa,IAAI,EAAI,EACd,CACC,CAAC,cACL9D,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA0K,sBAAA,CAAA3O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAoN,sBAAA,iBAArBA,sBAAA,CAAuBnN,GAAG,GAAIG,IAAI,CAACH,GAAG,EAAI,EAAG,CACpD0C,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,KAAK,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAClEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,KAAK,CACZ,CAAC,CAEF1C,IAAI,CAACH,GAAG,EAAI,EACb,CACC,CAAC,cACL9C,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA2K,sBAAA,CAAA5O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAqN,sBAAA,iBAArBA,sBAAA,CAAuBzM,OAAO,GAAIR,IAAI,CAACQ,OAAO,EAAI,EAAG,CAC5D+B,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,SAAS,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACtEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,SAAS,CAChB,CAAC,CAEF1C,IAAI,CAACQ,OAAO,EAAI,EACjB,CACC,CAAC,cACLzD,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA4K,sBAAA,CAAA7O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAsN,sBAAA,iBAArBA,sBAAA,CAAuBT,iBAAiB,GAAIzM,IAAI,CAACyM,iBAAiB,EAAI,EAAG,CAChFlK,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,mBAAmB,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAChFF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,yBAAsB,CAC7B,CAAC,CAEF1C,IAAI,CAACyM,iBAAiB,EAAI,EAC3B,CACC,CAAC,cACL1P,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA6K,sBAAA,CAAA9O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAuN,sBAAA,iBAArBA,sBAAA,CAAuB1M,KAAK,GAAIT,IAAI,CAACS,KAAK,EAAI,EAAG,CACxD8B,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,OAAO,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACpEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,OAAO,CACd,CAAC,CAEF1C,IAAI,CAACS,KAAK,EAAI,EACf,CACC,CAAC,cACL1D,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA8K,sBAAA,CAAA/O,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAwN,sBAAA,iBAArBA,sBAAA,CAAuB1M,UAAU,GAAIV,IAAI,CAACU,UAAU,EAAI,EAAG,CAClE6B,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,YAAY,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACzEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,aAAa,CACpB,CAAC,CAEF1C,IAAI,CAACU,UAAU,EAAI,EACpB,CACC,CAAC,cACL3D,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAA+K,sBAAA,CAAAhP,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAAyN,sBAAA,kBAAAC,sBAAA,CAArBD,sBAAA,CAAuBzC,QAAQ,UAAA0C,sBAAA,iBAA/BA,sBAAA,CAAiC9I,IAAI,CAAC,IAAI,CAAC,GAAI,EAAG,CACzDjC,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,UAAU,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAACoK,KAAK,CAAC,GAAG,CAAC,CAAC3M,GAAG,CAAC4M,CAAC,EAAIA,CAAC,CAACzM,IAAI,CAAC,CAAC,CAAC,CAAE,CACrGkC,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,aAAU,CACjB,CAAC,CAEF,EAAA6K,eAAA,CAAAvN,IAAI,CAAC4K,QAAQ,UAAA2C,eAAA,iBAAbA,eAAA,CAAe/I,IAAI,CAAC,IAAI,CAAC,GAAI,EAC9B,CACC,CAAC,cACLzH,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAAkL,uBAAA,CAAAnP,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAA4N,uBAAA,iBAArBA,uBAAA,CAAuBZ,UAAU,GAAI5M,IAAI,CAAC4M,UAAU,EAAI,EAAG,CAClErK,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,YAAY,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACzEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,yBAAyB,CAC/BqJ,WAAW,CAAC,aAAa,CACzB6B,OAAO,CAAC,+DAA+D,CACxE,CAAC,CAEF5N,IAAI,CAAC4M,UAAU,EAAI,EACpB,CACC,CAAC,cACL7P,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAAmL,uBAAA,CAAApP,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAA6N,uBAAA,iBAArBA,uBAAA,CAAuBZ,cAAc,GAAI7M,IAAI,CAAC6M,cAAc,EAAI,EAAG,CAC1EtK,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,gBAAgB,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC7EF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,iBAAiB,CACvBqJ,WAAW,CAAC,aAAa,CACzB6B,OAAO,CAAC,+DAA+D,CACxE,CAAC,CAEF5N,IAAI,CAAC6M,cAAc,EAAI,EACxB,CACC,CAAC,cACL9P,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPlB,IAAA,UACE8D,IAAI,CAAC,MAAM,CACXyB,KAAK,CAAE,EAAAoL,uBAAA,CAAArP,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAA8N,uBAAA,iBAArBA,uBAAA,CAAuB3M,UAAU,GAAIf,IAAI,CAACe,UAAU,EAAI,EAAG,CAClEwB,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,YAAY,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACzEF,SAAS,CAAC,mBAAmB,CAC7BM,KAAK,CAAC,YAAY,CACnB,CAAC,CAEF1C,IAAI,CAACe,UAAU,EAAI,EACpB,CACC,CAAC,cACLhE,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,CACP+B,IAAI,CAAC0E,QAAQ,EAAI1E,IAAI,CAAC2E,SAAS,cAC7B1H,KAAA,SAAMmF,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EAAC,OAC/B,CAACrC,IAAI,CAAC0E,QAAQ,CAACmJ,OAAO,CAAC,CAAC,CAAC,cAAC9Q,IAAA,QAAI,CAAC,QAC/B,CAACiD,IAAI,CAAC2E,SAAS,CAACkJ,OAAO,CAAC,CAAC,CAAC,EAC3B,CAAC,cAEP5Q,KAAA,SAAMmF,SAAS,CAAC,mBAAmB,CAAAC,QAAA,EAAC,uBAChB,cAAAtF,IAAA,QAAI,CAAC,6BAEzB,EAAM,CACP,CAEDiD,IAAI,CAAC0E,QAAQ,EAAI1E,IAAI,CAAC2E,SAAS,CAC/B,QAAQ3E,IAAI,CAAC0E,QAAQ,CAACmJ,OAAO,CAAC,CAAC,CAAC,UAAU7N,IAAI,CAAC2E,SAAS,CAACkJ,OAAO,CAAC,CAAC,CAAC,EAAE,CACrE,GACD,CACC,CAAC,cACL9Q,IAAA,OAAAsF,QAAA,CAAKrC,IAAI,CAACJ,EAAE,CAAK,CAAC,cAClB7C,IAAA,OAAAsF,QAAA,CACGpE,QAAQ,cACPhB,KAAA,WACEqF,KAAK,CAAE,EAAAqL,uBAAA,CAAAtP,YAAY,CAAC2B,IAAI,CAACJ,EAAE,CAAC,UAAA+N,uBAAA,iBAArBA,uBAAA,CAAuB7M,MAAM,GAAId,IAAI,CAACc,MAAM,EAAI,OAAQ,CAC/DyB,QAAQ,CAAGC,CAAC,EAAK+H,gBAAgB,CAACvK,IAAI,CAACJ,EAAE,CAAE,QAAQ,CAAE4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACrEF,SAAS,CAAC,oBAAoB,CAC9BM,KAAK,CAAC,gBAAgB,CAAAL,QAAA,eAEtBtF,IAAA,WAAQuF,KAAK,CAAC,OAAO,CAAAD,QAAA,CAAC,OAAK,CAAQ,CAAC,cACpCtF,IAAA,WAAQuF,KAAK,CAAC,SAAS,CAAAD,QAAA,CAAC,SAAO,CAAQ,CAAC,EAClC,CAAC,CAERrC,IAAI,CAACc,MAAM,GAAK,OAAO,EAAI,CAACd,IAAI,CAACc,MAAM,CAAI,OAAO,CAAG,SACvD,CACC,CAAC,GAtME,QAAQd,IAAI,CAACJ,EAAE,IAAIsH,KAAK,EAuM7B,CAAC,EACN,CAAC,EACG,CAAC,EACH,CAAC,CAGP/E,gBAAgB,CAAC,CAAC,EAChB,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAA1E,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}