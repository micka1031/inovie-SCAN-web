{"ast":null,"code":"import{db}from'../config/firebase';import{collection,getDocs,query,where,Timestamp,doc,writeBatch}from'firebase/firestore';import SharePointService from'./SharePointService';import JSZip from'jszip';/**\n * Service pour g√©rer les fonctionnalit√©s d'administration\n */export class AdminService{constructor(){// Collections Firebase\nthis.collections=['passages','sites','tournees','vehicules','users'];}/**\n   * R√©cup√®re les statistiques des collections\n   * @returns Statistiques des collections\n   */async getCollectionsStats(){try{console.log('üîÑ R√©cup√©ration des statistiques des collections...');const stats={};for(const collectionName of this.collections){const querySnapshot=await getDocs(collection(db,collectionName));stats[collectionName]=querySnapshot.size;}console.log('‚úÖ Statistiques r√©cup√©r√©es:',stats);return stats;}catch(error){console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:',error);throw error;}}/**\n   * Cr√©e une sauvegarde compl√®te de la base de donn√©es\n   * @returns Fichier ZIP contenant toutes les collections\n   */async createFullBackup(){try{console.log('üîÑ Cr√©ation d\\'une sauvegarde compl√®te...');// Utiliser le service SharePoint pour g√©n√©rer la sauvegarde\nawait SharePointService.generateCompleteBackup();console.log('‚úÖ Sauvegarde compl√®te cr√©√©e avec succ√®s');}catch(error){console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde compl√®te:',error);throw error;}}/**\n   * Cr√©e une sauvegarde s√©lective de certaines collections\n   * @param selectedCollections Collections √† sauvegarder\n   */async createSelectiveBackup(selectedCollections){try{console.log(`üîÑ Cr√©ation d'une sauvegarde s√©lective pour les collections: ${selectedCollections.join(', ')}...`);// V√©rifier que les collections s√©lectionn√©es sont valides\nconst validCollections=selectedCollections.filter(col=>this.collections.includes(col));if(validCollections.length===0){throw new Error('Aucune collection valide s√©lectionn√©e pour la sauvegarde');}// Cr√©er un objet ZIP\nconst zip=new JSZip();// Ajouter chaque collection s√©lectionn√©e au ZIP\nfor(const collectionName of validCollections){const data=await SharePointService.exportCollectionToJSON(collectionName);if(data&&data.length>0){zip.file(`${collectionName}.json`,JSON.stringify(data,null,2));}}// G√©n√©rer le fichier ZIP\nconst content=await zip.generateAsync({type:'blob'});// T√©l√©charger le fichier\nconst url=URL.createObjectURL(content);const link=document.createElement('a');link.setAttribute('href',url);link.setAttribute('download',`selective_backup_${new Date().toISOString().split('T')[0]}.zip`);link.style.visibility='hidden';document.body.appendChild(link);link.click();document.body.removeChild(link);console.log('‚úÖ Sauvegarde s√©lective cr√©√©e avec succ√®s');}catch(error){console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde s√©lective:',error);throw error;}}/**\n   * Nettoie les donn√©es obsol√®tes d'une collection\n   * @param collectionName Nom de la collection √† nettoyer\n   * @param olderThan Date limite (les documents plus anciens seront supprim√©s)\n   * @returns Nombre de documents supprim√©s\n   */async cleanupObsoleteData(collectionName,olderThan){try{console.log(`üîÑ Nettoyage des donn√©es obsol√®tes de la collection ${collectionName}...`);// V√©rifier que la collection est valide\nif(!this.collections.includes(collectionName)){throw new Error(`La collection ${collectionName} n'est pas valide`);}// Convertir la date en Timestamp\nconst olderThanTimestamp=Timestamp.fromDate(olderThan);// R√©cup√©rer les documents √† supprimer\nconst collectionRef=collection(db,collectionName);let queryRef;// Adapter la requ√™te en fonction de la collection\nif(collectionName==='passages'){queryRef=query(collectionRef,where('date','<',olderThanTimestamp));}else if(collectionName==='users'){queryRef=query(collectionRef,where('lastLogin','<',olderThanTimestamp));}else{queryRef=query(collectionRef,where('updatedAt','<',olderThanTimestamp));}const snapshot=await getDocs(queryRef);if(snapshot.empty){console.log(`‚ÑπÔ∏è Aucune donn√©e obsol√®te trouv√©e dans la collection ${collectionName}`);return 0;}// Supprimer les documents\nconst batch=writeBatch(db);let batchCount=0;snapshot.docs.forEach(document=>{batch.delete(doc(db,collectionName,document.id));batchCount++;// Ex√©cuter le batch toutes les 500 op√©rations (limite Firestore)\nif(batchCount>=500){batch.commit();console.log(`‚úÖ Lot de ${batchCount} documents supprim√©s`);batchCount=0;}});// Ex√©cuter le dernier batch s'il reste des op√©rations\nif(batchCount>0){await batch.commit();console.log(`‚úÖ Dernier lot de ${batchCount} documents supprim√©s`);}console.log(`‚úÖ Nettoyage termin√©: ${snapshot.size} documents supprim√©s de la collection ${collectionName}`);return snapshot.size;}catch(error){console.error(`‚ùå Erreur lors du nettoyage des donn√©es obsol√®tes:`,error);throw error;}}/**\n   * Optimise les index de la base de donn√©es\n   * Cette fonction est simul√©e car Firestore g√®re automatiquement ses index\n   */async optimizeIndexes(){try{console.log('üîÑ Optimisation des index...');// Simuler une op√©ration d'optimisation\nawait new Promise(resolve=>setTimeout(resolve,2000));console.log('‚úÖ Optimisation des index termin√©e');}catch(error){console.error('‚ùå Erreur lors de l\\'optimisation des index:',error);throw error;}}/**\n   * R√©initialise la base de donn√©es (DANGER)\n   * @param confirmation Code de confirmation pour √©viter les suppressions accidentelles\n   */async resetDatabase(confirmation){try{// V√©rifier le code de confirmation\nif(confirmation!=='RESET_DATABASE_CONFIRM'){throw new Error('Code de confirmation invalide');}console.log('‚ö†Ô∏è R√âINITIALISATION DE LA BASE DE DONN√âES EN COURS...');// Sauvegarder d'abord les donn√©es\nawait this.createFullBackup();// Supprimer toutes les collections\nfor(const collectionName of this.collections){if(collectionName==='users'){console.log('‚ÑπÔ∏è La collection users ne sera pas supprim√©e pour pr√©server les acc√®s');continue;}const collectionRef=collection(db,collectionName);const snapshot=await getDocs(collectionRef);if(snapshot.empty){console.log(`‚ÑπÔ∏è La collection ${collectionName} est d√©j√† vide`);continue;}const batch=writeBatch(db);let batchCount=0;snapshot.docs.forEach(document=>{batch.delete(doc(db,collectionName,document.id));batchCount++;// Ex√©cuter le batch toutes les 500 op√©rations (limite Firestore)\nif(batchCount>=500){batch.commit();console.log(`‚úÖ Lot de ${batchCount} documents supprim√©s de ${collectionName}`);batchCount=0;}});// Ex√©cuter le dernier batch s'il reste des op√©rations\nif(batchCount>0){await batch.commit();console.log(`‚úÖ Dernier lot de ${batchCount} documents supprim√©s de ${collectionName}`);}console.log(`‚úÖ Collection ${collectionName} r√©initialis√©e`);}console.log('‚úÖ R√©initialisation de la base de donn√©es termin√©e');}catch(error){console.error('‚ùå Erreur lors de la r√©initialisation de la base de donn√©es:',error);throw error;}}/**\n   * R√©cup√®re les journaux d'erreurs\n   * Cette fonction est simul√©e car nous n'avons pas de syst√®me de journalisation\n   */async getErrorLogs(){try{console.log('üîÑ R√©cup√©ration des journaux d\\'erreurs...');// Simuler des journaux d'erreurs\nconst logs=[{timestamp:new Date().toISOString(),level:'INFO',message:'Application d√©marr√©e',source:'App.tsx'},{timestamp:new Date(Date.now()-3600000).toISOString(),level:'WARNING',message:'Tentative de connexion √©chou√©e',source:'AuthContext.tsx'},{timestamp:new Date(Date.now()-7200000).toISOString(),level:'ERROR',message:'Erreur lors de la r√©cup√©ration des donn√©es',source:'FirebaseService.ts',stack:'Error: Failed to fetch data\\n    at FirebaseService.fetchData (/src/services/FirebaseService.ts:42:7)'}];console.log('‚úÖ Journaux d\\'erreurs r√©cup√©r√©s');return logs;}catch(error){console.error('‚ùå Erreur lors de la r√©cup√©ration des journaux d\\'erreurs:',error);throw error;}}/**\n   * Exporte les journaux d'erreurs\n   * Cette fonction est simul√©e car nous n'avons pas de syst√®me de journalisation\n   */async exportErrorLogs(){try{console.log('üîÑ Exportation des journaux d\\'erreurs...');// R√©cup√©rer les journaux\nconst logs=await this.getErrorLogs();// Cr√©er un fichier JSON\nconst blob=new Blob([JSON.stringify(logs,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const link=document.createElement('a');link.setAttribute('href',url);link.setAttribute('download',`error_logs_${new Date().toISOString().split('T')[0]}.json`);link.style.visibility='hidden';document.body.appendChild(link);link.click();document.body.removeChild(link);console.log('‚úÖ Exportation des journaux d\\'erreurs termin√©e');}catch(error){console.error('‚ùå Erreur lors de l\\'exportation des journaux d\\'erreurs:',error);throw error;}}/**\n   * Ex√©cute un diagnostic complet du syst√®me\n   * Cette fonction est simul√©e\n   */async runFullDiagnostic(){try{console.log('üîÑ Ex√©cution d\\'un diagnostic complet...');// Simuler un diagnostic\nawait new Promise(resolve=>setTimeout(resolve,3000));const diagnostic={timestamp:new Date().toISOString(),system:{status:'online',uptime:'7 days, 3 hours, 42 minutes',memory:{used:'1.2 GB',total:'2 GB',percentage:60},cpu:{usage:'23%',temperature:'45¬∞C'}},database:{status:'connected',latency:'42ms',collections:await this.getCollectionsStats(),lastBackup:'Jamais'},storage:{used:'2.1 GB',total:'5 GB',percentage:42},errors:{critical:0,warning:2,info:5}};console.log('‚úÖ Diagnostic complet termin√©');return diagnostic;}catch(error){console.error('‚ùå Erreur lors de l\\'ex√©cution du diagnostic complet:',error);throw error;}}/**\n   * Met √† jour les param√®tres de l'application\n   * Cette fonction est simul√©e\n   */async updateAppSettings(settings){try{console.log('üîÑ Mise √† jour des param√®tres de l\\'application...',settings);// Simuler une mise √† jour des param√®tres\nawait new Promise(resolve=>setTimeout(resolve,1000));console.log('‚úÖ Param√®tres de l\\'application mis √† jour');}catch(error){console.error('‚ùå Erreur lors de la mise √† jour des param√®tres de l\\'application:',error);throw error;}}}","map":{"version":3,"names":["db","collection","getDocs","query","where","Timestamp","doc","writeBatch","SharePointService","JSZip","AdminService","constructor","collections","getCollectionsStats","console","log","stats","collectionName","querySnapshot","size","error","createFullBackup","generateCompleteBackup","createSelectiveBackup","selectedCollections","join","validCollections","filter","col","includes","length","Error","zip","data","exportCollectionToJSON","file","JSON","stringify","content","generateAsync","type","url","URL","createObjectURL","link","document","createElement","setAttribute","Date","toISOString","split","style","visibility","body","appendChild","click","removeChild","cleanupObsoleteData","olderThan","olderThanTimestamp","fromDate","collectionRef","queryRef","snapshot","empty","batch","batchCount","docs","forEach","delete","id","commit","optimizeIndexes","Promise","resolve","setTimeout","resetDatabase","confirmation","getErrorLogs","logs","timestamp","level","message","source","now","stack","exportErrorLogs","blob","Blob","runFullDiagnostic","diagnostic","system","status","uptime","memory","used","total","percentage","cpu","usage","temperature","database","latency","lastBackup","storage","errors","critical","warning","info","updateAppSettings","settings"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/AdminService.ts"],"sourcesContent":["import { db } from '../config/firebase';\nimport { collection, getDocs, query, where, orderBy, limit, Timestamp, addDoc, doc, setDoc, deleteDoc, writeBatch, deleteField } from 'firebase/firestore';\nimport SharePointService from './SharePointService';\nimport JSZip from 'jszip';\n\n/**\n * Service pour g√©rer les fonctionnalit√©s d'administration\n */\nexport class AdminService {\n  // Collections Firebase\n  private collections = ['passages', 'sites', 'tournees', 'vehicules', 'users'];\n  \n  /**\n   * R√©cup√®re les statistiques des collections\n   * @returns Statistiques des collections\n   */\n  async getCollectionsStats(): Promise<Record<string, number>> {\n    try {\n      console.log('üîÑ R√©cup√©ration des statistiques des collections...');\n      \n      const stats: Record<string, number> = {};\n      \n      for (const collectionName of this.collections) {\n        const querySnapshot = await getDocs(collection(db, collectionName));\n        stats[collectionName] = querySnapshot.size;\n      }\n      \n      console.log('‚úÖ Statistiques r√©cup√©r√©es:', stats);\n      return stats;\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Cr√©e une sauvegarde compl√®te de la base de donn√©es\n   * @returns Fichier ZIP contenant toutes les collections\n   */\n  async createFullBackup(): Promise<void> {\n    try {\n      console.log('üîÑ Cr√©ation d\\'une sauvegarde compl√®te...');\n      \n      // Utiliser le service SharePoint pour g√©n√©rer la sauvegarde\n      await SharePointService.generateCompleteBackup();\n      \n      console.log('‚úÖ Sauvegarde compl√®te cr√©√©e avec succ√®s');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde compl√®te:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Cr√©e une sauvegarde s√©lective de certaines collections\n   * @param selectedCollections Collections √† sauvegarder\n   */\n  async createSelectiveBackup(selectedCollections: string[]): Promise<void> {\n    try {\n      console.log(`üîÑ Cr√©ation d'une sauvegarde s√©lective pour les collections: ${selectedCollections.join(', ')}...`);\n      \n      // V√©rifier que les collections s√©lectionn√©es sont valides\n      const validCollections = selectedCollections.filter(col => this.collections.includes(col));\n      \n      if (validCollections.length === 0) {\n        throw new Error('Aucune collection valide s√©lectionn√©e pour la sauvegarde');\n      }\n      \n      // Cr√©er un objet ZIP\n      const zip = new JSZip();\n      \n      // Ajouter chaque collection s√©lectionn√©e au ZIP\n      for (const collectionName of validCollections) {\n        const data = await SharePointService.exportCollectionToJSON(collectionName);\n        \n        if (data && data.length > 0) {\n          zip.file(`${collectionName}.json`, JSON.stringify(data, null, 2));\n        }\n      }\n      \n      // G√©n√©rer le fichier ZIP\n      const content = await zip.generateAsync({ type: 'blob' });\n      \n      // T√©l√©charger le fichier\n      const url = URL.createObjectURL(content);\n      const link = document.createElement('a');\n      \n      link.setAttribute('href', url);\n      link.setAttribute('download', `selective_backup_${new Date().toISOString().split('T')[0]}.zip`);\n      link.style.visibility = 'hidden';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      console.log('‚úÖ Sauvegarde s√©lective cr√©√©e avec succ√®s');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde s√©lective:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Nettoie les donn√©es obsol√®tes d'une collection\n   * @param collectionName Nom de la collection √† nettoyer\n   * @param olderThan Date limite (les documents plus anciens seront supprim√©s)\n   * @returns Nombre de documents supprim√©s\n   */\n  async cleanupObsoleteData(collectionName: string, olderThan: Date): Promise<number> {\n    try {\n      console.log(`üîÑ Nettoyage des donn√©es obsol√®tes de la collection ${collectionName}...`);\n      \n      // V√©rifier que la collection est valide\n      if (!this.collections.includes(collectionName)) {\n        throw new Error(`La collection ${collectionName} n'est pas valide`);\n      }\n      \n      // Convertir la date en Timestamp\n      const olderThanTimestamp = Timestamp.fromDate(olderThan);\n      \n      // R√©cup√©rer les documents √† supprimer\n      const collectionRef = collection(db, collectionName);\n      let queryRef;\n      \n      // Adapter la requ√™te en fonction de la collection\n      if (collectionName === 'passages') {\n        queryRef = query(collectionRef, where('date', '<', olderThanTimestamp));\n      } else if (collectionName === 'users') {\n        queryRef = query(collectionRef, where('lastLogin', '<', olderThanTimestamp));\n      } else {\n        queryRef = query(collectionRef, where('updatedAt', '<', olderThanTimestamp));\n      }\n      \n      const snapshot = await getDocs(queryRef);\n      \n      if (snapshot.empty) {\n        console.log(`‚ÑπÔ∏è Aucune donn√©e obsol√®te trouv√©e dans la collection ${collectionName}`);\n        return 0;\n      }\n      \n      // Supprimer les documents\n      const batch = writeBatch(db);\n      let batchCount = 0;\n      \n      snapshot.docs.forEach(document => {\n        batch.delete(doc(db, collectionName, document.id));\n        batchCount++;\n        \n        // Ex√©cuter le batch toutes les 500 op√©rations (limite Firestore)\n        if (batchCount >= 500) {\n          batch.commit();\n          console.log(`‚úÖ Lot de ${batchCount} documents supprim√©s`);\n          batchCount = 0;\n        }\n      });\n      \n      // Ex√©cuter le dernier batch s'il reste des op√©rations\n      if (batchCount > 0) {\n        await batch.commit();\n        console.log(`‚úÖ Dernier lot de ${batchCount} documents supprim√©s`);\n      }\n      \n      console.log(`‚úÖ Nettoyage termin√©: ${snapshot.size} documents supprim√©s de la collection ${collectionName}`);\n      return snapshot.size;\n    } catch (error) {\n      console.error(`‚ùå Erreur lors du nettoyage des donn√©es obsol√®tes:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Optimise les index de la base de donn√©es\n   * Cette fonction est simul√©e car Firestore g√®re automatiquement ses index\n   */\n  async optimizeIndexes(): Promise<void> {\n    try {\n      console.log('üîÑ Optimisation des index...');\n      \n      // Simuler une op√©ration d'optimisation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      console.log('‚úÖ Optimisation des index termin√©e');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de l\\'optimisation des index:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * R√©initialise la base de donn√©es (DANGER)\n   * @param confirmation Code de confirmation pour √©viter les suppressions accidentelles\n   */\n  async resetDatabase(confirmation: string): Promise<void> {\n    try {\n      // V√©rifier le code de confirmation\n      if (confirmation !== 'RESET_DATABASE_CONFIRM') {\n        throw new Error('Code de confirmation invalide');\n      }\n      \n      console.log('‚ö†Ô∏è R√âINITIALISATION DE LA BASE DE DONN√âES EN COURS...');\n      \n      // Sauvegarder d'abord les donn√©es\n      await this.createFullBackup();\n      \n      // Supprimer toutes les collections\n      for (const collectionName of this.collections) {\n        if (collectionName === 'users') {\n          console.log('‚ÑπÔ∏è La collection users ne sera pas supprim√©e pour pr√©server les acc√®s');\n          continue;\n        }\n        \n        const collectionRef = collection(db, collectionName);\n        const snapshot = await getDocs(collectionRef);\n        \n        if (snapshot.empty) {\n          console.log(`‚ÑπÔ∏è La collection ${collectionName} est d√©j√† vide`);\n          continue;\n        }\n        \n        const batch = writeBatch(db);\n        let batchCount = 0;\n        \n        snapshot.docs.forEach(document => {\n          batch.delete(doc(db, collectionName, document.id));\n          batchCount++;\n          \n          // Ex√©cuter le batch toutes les 500 op√©rations (limite Firestore)\n          if (batchCount >= 500) {\n            batch.commit();\n            console.log(`‚úÖ Lot de ${batchCount} documents supprim√©s de ${collectionName}`);\n            batchCount = 0;\n          }\n        });\n        \n        // Ex√©cuter le dernier batch s'il reste des op√©rations\n        if (batchCount > 0) {\n          await batch.commit();\n          console.log(`‚úÖ Dernier lot de ${batchCount} documents supprim√©s de ${collectionName}`);\n        }\n        \n        console.log(`‚úÖ Collection ${collectionName} r√©initialis√©e`);\n      }\n      \n      console.log('‚úÖ R√©initialisation de la base de donn√©es termin√©e');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la r√©initialisation de la base de donn√©es:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * R√©cup√®re les journaux d'erreurs\n   * Cette fonction est simul√©e car nous n'avons pas de syst√®me de journalisation\n   */\n  async getErrorLogs(): Promise<any[]> {\n    try {\n      console.log('üîÑ R√©cup√©ration des journaux d\\'erreurs...');\n      \n      // Simuler des journaux d'erreurs\n      const logs = [\n        {\n          timestamp: new Date().toISOString(),\n          level: 'INFO',\n          message: 'Application d√©marr√©e',\n          source: 'App.tsx'\n        },\n        {\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          level: 'WARNING',\n          message: 'Tentative de connexion √©chou√©e',\n          source: 'AuthContext.tsx'\n        },\n        {\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\n          level: 'ERROR',\n          message: 'Erreur lors de la r√©cup√©ration des donn√©es',\n          source: 'FirebaseService.ts',\n          stack: 'Error: Failed to fetch data\\n    at FirebaseService.fetchData (/src/services/FirebaseService.ts:42:7)'\n        }\n      ];\n      \n      console.log('‚úÖ Journaux d\\'erreurs r√©cup√©r√©s');\n      return logs;\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la r√©cup√©ration des journaux d\\'erreurs:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Exporte les journaux d'erreurs\n   * Cette fonction est simul√©e car nous n'avons pas de syst√®me de journalisation\n   */\n  async exportErrorLogs(): Promise<void> {\n    try {\n      console.log('üîÑ Exportation des journaux d\\'erreurs...');\n      \n      // R√©cup√©rer les journaux\n      const logs = await this.getErrorLogs();\n      \n      // Cr√©er un fichier JSON\n      const blob = new Blob([JSON.stringify(logs, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      \n      link.setAttribute('href', url);\n      link.setAttribute('download', `error_logs_${new Date().toISOString().split('T')[0]}.json`);\n      link.style.visibility = 'hidden';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      console.log('‚úÖ Exportation des journaux d\\'erreurs termin√©e');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de l\\'exportation des journaux d\\'erreurs:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Ex√©cute un diagnostic complet du syst√®me\n   * Cette fonction est simul√©e\n   */\n  async runFullDiagnostic(): Promise<any> {\n    try {\n      console.log('üîÑ Ex√©cution d\\'un diagnostic complet...');\n      \n      // Simuler un diagnostic\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const diagnostic = {\n        timestamp: new Date().toISOString(),\n        system: {\n          status: 'online',\n          uptime: '7 days, 3 hours, 42 minutes',\n          memory: {\n            used: '1.2 GB',\n            total: '2 GB',\n            percentage: 60\n          },\n          cpu: {\n            usage: '23%',\n            temperature: '45¬∞C'\n          }\n        },\n        database: {\n          status: 'connected',\n          latency: '42ms',\n          collections: await this.getCollectionsStats(),\n          lastBackup: 'Jamais'\n        },\n        storage: {\n          used: '2.1 GB',\n          total: '5 GB',\n          percentage: 42\n        },\n        errors: {\n          critical: 0,\n          warning: 2,\n          info: 5\n        }\n      };\n      \n      console.log('‚úÖ Diagnostic complet termin√©');\n      return diagnostic;\n    } catch (error) {\n      console.error('‚ùå Erreur lors de l\\'ex√©cution du diagnostic complet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Met √† jour les param√®tres de l'application\n   * Cette fonction est simul√©e\n   */\n  async updateAppSettings(settings: any): Promise<void> {\n    try {\n      console.log('üîÑ Mise √† jour des param√®tres de l\\'application...', settings);\n      \n      // Simuler une mise √† jour des param√®tres\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('‚úÖ Param√®tres de l\\'application mis √† jour');\n    } catch (error) {\n      console.error('‚ùå Erreur lors de la mise √† jour des param√®tres de l\\'application:', error);\n      throw error;\n    }\n  }\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}