{"ast":null,"code":"var _SELASService;\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { getAuth } from 'firebase/auth';\n/**\r\n * Service de gestion des SELAS\r\n */\nexport class SELASService {\n  // Constructeur privé pour le pattern Singleton\n  constructor() {\n    this.collectionName = 'selas';\n  }\n\n  // Méthode pour obtenir l'instance\n  static getInstance() {\n    if (!SELASService.instance) {\n      SELASService.instance = new SELASService();\n    }\n    return SELASService.instance;\n  }\n\n  /**\r\n   * Récupérer toutes les SELAS\r\n   */\n  async getSELAS() {\n    try {\n      const auth = getAuth();\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        console.error('Erreur lors de la récupération des SELAS: Utilisateur non authentifié');\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\n      }\n      console.log(`Tentative d'accès à la collection SELAS avec l'utilisateur: ${currentUser.email}`);\n      const selasRef = collection(db, this.collectionName);\n      const snapshot = await getDocs(selasRef);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Erreur lors de la récupération des SELAS:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Récupérer une SELAS par son ID\r\n   */\n  async getSELASById(id) {\n    try {\n      const auth = getAuth();\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        console.error(`Erreur lors de la récupération de la SELAS ${id}: Utilisateur non authentifié`);\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\n      }\n      const selasRef = doc(db, this.collectionName, id);\n      const snapshot = await getDoc(selasRef);\n      if (snapshot.exists()) {\n        return {\n          id: snapshot.id,\n          ...snapshot.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de la SELAS ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Ajouter une nouvelle SELAS\r\n   */\n  async addSELAS(selas) {\n    try {\n      const now = new Date().toISOString();\n      const selasWithDates = {\n        ...selas,\n        dateCreation: now,\n        dateModification: now\n      };\n      const selasRef = collection(db, this.collectionName);\n      const docRef = await addDoc(selasRef, selasWithDates);\n      return {\n        id: docRef.id,\n        ...selasWithDates\n      };\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la SELAS:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Mettre à jour une SELAS existante\r\n   */\n  async updateSELAS(id, updates) {\n    try {\n      const selasRef = doc(db, this.collectionName, id);\n      const updatesWithDate = {\n        ...updates,\n        dateModification: new Date().toISOString()\n      };\n      await updateDoc(selasRef, updatesWithDate);\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour de la SELAS ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Supprimer une SELAS\r\n   */\n  async deleteSELAS(id) {\n    try {\n      const selasRef = doc(db, this.collectionName, id);\n      await deleteDoc(selasRef);\n    } catch (error) {\n      console.error(`Erreur lors de la suppression de la SELAS ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Récupérer les statistiques d'une SELAS\r\n   */\n  async getSELASStats(selasId) {\n    try {\n      // Vérifier si la SELAS existe\n      const selas = await this.getSELASById(selasId);\n      if (!selas) return null;\n\n      // Compter les utilisateurs, sites, passages, tournées et véhicules associés à cette SELAS\n      const collections = ['users', 'sites', 'passages', 'tournees', 'vehicules'];\n      const counts = {};\n      for (const collectionName of collections) {\n        const q = query(collection(db, collectionName), where('selasId', '==', selasId));\n        const snapshot = await getDocs(q);\n        counts[collectionName] = snapshot.size;\n      }\n      return {\n        id: selasId,\n        nom: selas.nom,\n        nbUtilisateurs: counts['users'] || 0,\n        nbSites: counts['sites'] || 0,\n        nbPassages: counts['passages'] || 0,\n        nbTournees: counts['tournees'] || 0,\n        nbVehicules: counts['vehicules'] || 0\n      };\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des statistiques de la SELAS ${selasId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Exporte les données des SELAS sélectionnées\r\n   * @param selasIds Liste des IDs de SELAS à exporter, si vide, exporte toutes les SELAS\r\n   */\n  async exportSELAS(selasIds = []) {\n    try {\n      // Si aucun ID n'est spécifié, exporter toutes les SELAS\n      let selasToExport = [];\n      if (selasIds.length === 0) {\n        selasToExport = await this.getSELAS();\n      } else {\n        // Récupérer seulement les SELAS sélectionnées\n        const selasPromises = selasIds.map(id => this.getSELASById(id));\n        const selasResults = await Promise.all(selasPromises);\n        selasToExport = selasResults.filter(sela => sela !== null);\n      }\n\n      // Préparer les données d'exportation\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        selasCount: selasToExport.length,\n        data: selasToExport.map(sela => ({\n          ...sela\n          // Ne pas inclure d'informations sensibles si nécessaire\n        }))\n      };\n      return exportData;\n    } catch (error) {\n      console.error('Erreur lors de l\\'exportation des SELAS:', error);\n      throw error;\n    }\n  }\n}\n_SELASService = SELASService;\nSELASService.instance = void 0;","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","db","getAuth","SELASService","constructor","collectionName","getInstance","instance","getSELAS","auth","currentUser","console","error","Error","log","email","selasRef","snapshot","docs","map","id","data","getSELASById","exists","addSELAS","selas","now","Date","toISOString","selasWithDates","dateCreation","dateModification","docRef","updateSELAS","updates","updatesWithDate","deleteSELAS","getSELASStats","selasId","collections","counts","q","size","nom","nbUtilisateurs","nbSites","nbPassages","nbTournees","nbVehicules","exportSELAS","selasIds","selasToExport","length","selasPromises","selasResults","Promise","all","filter","sela","exportData","exportDate","selasCount","_SELASService"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/SELASService.ts"],"sourcesContent":["import { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, serverTimestamp, Timestamp, query, where } from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { SELAS, SELASCreation, SELASStats } from '../types/SELAS';\r\n\r\n/**\r\n * Service de gestion des SELAS\r\n */\r\nexport class SELASService {\r\n  private static instance: SELASService;\r\n  private readonly collectionName = 'selas';\r\n  \r\n  // Constructeur privé pour le pattern Singleton\r\n  private constructor() {}\r\n  \r\n  // Méthode pour obtenir l'instance\r\n  public static getInstance(): SELASService {\r\n    if (!SELASService.instance) {\r\n      SELASService.instance = new SELASService();\r\n    }\r\n    return SELASService.instance;\r\n  }\r\n  \r\n  /**\r\n   * Récupérer toutes les SELAS\r\n   */\r\n  public async getSELAS(): Promise<SELAS[]> {\r\n    try {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        console.error('Erreur lors de la récupération des SELAS: Utilisateur non authentifié');\r\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\r\n      }\r\n      \r\n      console.log(`Tentative d'accès à la collection SELAS avec l'utilisateur: ${currentUser.email}`);\r\n      \r\n      const selasRef = collection(db, this.collectionName);\r\n      const snapshot = await getDocs(selasRef);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      } as SELAS));\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Récupérer une SELAS par son ID\r\n   */\r\n  public async getSELASById(id: string): Promise<SELAS | null> {\r\n    try {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        console.error(`Erreur lors de la récupération de la SELAS ${id}: Utilisateur non authentifié`);\r\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\r\n      }\r\n      \r\n      const selasRef = doc(db, this.collectionName, id);\r\n      const snapshot = await getDoc(selasRef);\r\n      \r\n      if (snapshot.exists()) {\r\n        return {\r\n          id: snapshot.id,\r\n          ...snapshot.data()\r\n        } as SELAS;\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la récupération de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Ajouter une nouvelle SELAS\r\n   */\r\n  public async addSELAS(selas: Omit<SELAS, 'id' | 'dateCreation' | 'dateModification'>): Promise<SELAS> {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const selasWithDates = {\r\n        ...selas,\r\n        dateCreation: now,\r\n        dateModification: now\r\n      };\r\n      \r\n      const selasRef = collection(db, this.collectionName);\r\n      const docRef = await addDoc(selasRef, selasWithDates);\r\n      \r\n      return {\r\n        id: docRef.id,\r\n        ...selasWithDates\r\n      } as SELAS;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout de la SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Mettre à jour une SELAS existante\r\n   */\r\n  public async updateSELAS(id: string, updates: Partial<SELAS>): Promise<void> {\r\n    try {\r\n      const selasRef = doc(db, this.collectionName, id);\r\n      \r\n      const updatesWithDate = {\r\n        ...updates,\r\n        dateModification: new Date().toISOString()\r\n      };\r\n      \r\n      await updateDoc(selasRef, updatesWithDate);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la mise à jour de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Supprimer une SELAS\r\n   */\r\n  public async deleteSELAS(id: string): Promise<void> {\r\n    try {\r\n      const selasRef = doc(db, this.collectionName, id);\r\n      await deleteDoc(selasRef);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la suppression de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Récupérer les statistiques d'une SELAS\r\n   */\r\n  public async getSELASStats(selasId: string): Promise<SELASStats | null> {\r\n    try {\r\n      // Vérifier si la SELAS existe\r\n      const selas = await this.getSELASById(selasId);\r\n      if (!selas) return null;\r\n      \r\n      // Compter les utilisateurs, sites, passages, tournées et véhicules associés à cette SELAS\r\n      const collections = ['users', 'sites', 'passages', 'tournees', 'vehicules'];\r\n      const counts: Record<string, number> = {};\r\n      \r\n      for (const collectionName of collections) {\r\n        const q = query(collection(db, collectionName), where('selasId', '==', selasId));\r\n        const snapshot = await getDocs(q);\r\n        counts[collectionName] = snapshot.size;\r\n      }\r\n      \r\n      return {\r\n        id: selasId,\r\n        nom: selas.nom,\r\n        nbUtilisateurs: counts['users'] || 0,\r\n        nbSites: counts['sites'] || 0,\r\n        nbPassages: counts['passages'] || 0,\r\n        nbTournees: counts['tournees'] || 0,\r\n        nbVehicules: counts['vehicules'] || 0\r\n      };\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la récupération des statistiques de la SELAS ${selasId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exporte les données des SELAS sélectionnées\r\n   * @param selasIds Liste des IDs de SELAS à exporter, si vide, exporte toutes les SELAS\r\n   */\r\n  public async exportSELAS(selasIds: string[] = []): Promise<any> {\r\n    try {\r\n      // Si aucun ID n'est spécifié, exporter toutes les SELAS\r\n      let selasToExport: SELAS[] = [];\r\n      \r\n      if (selasIds.length === 0) {\r\n        selasToExport = await this.getSELAS();\r\n      } else {\r\n        // Récupérer seulement les SELAS sélectionnées\r\n        const selasPromises = selasIds.map(id => this.getSELASById(id));\r\n        const selasResults = await Promise.all(selasPromises);\r\n        selasToExport = selasResults.filter(sela => sela !== null) as SELAS[];\r\n      }\r\n      \r\n      // Préparer les données d'exportation\r\n      const exportData = {\r\n        exportDate: new Date().toISOString(),\r\n        selasCount: selasToExport.length,\r\n        data: selasToExport.map(sela => ({\r\n          ...sela,\r\n          // Ne pas inclure d'informations sensibles si nécessaire\r\n        }))\r\n      };\r\n      \r\n      return exportData;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'exportation des SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}