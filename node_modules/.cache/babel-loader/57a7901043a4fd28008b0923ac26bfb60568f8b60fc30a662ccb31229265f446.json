{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\components\\\\SELASSelector.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Select, Spin, Button, Modal, message } from 'antd';\nimport { useSelasContext } from '../contexts/SelasContext';\nimport { getAuth } from 'firebase/auth';\nimport { collection, getDocs, doc, writeBatch, query, limit } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport './SELASSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelasSelector = () => {\n  _s();\n  const {\n    currentSelasId,\n    setCurrentSelasId,\n    availableSelas,\n    loading\n  } = useSelasContext();\n  const [isMigrating, setIsMigrating] = useState(false);\n  const [migrationResult, setMigrationResult] = useState('');\n  const [showMigrationModal, setShowMigrationModal] = useState(false);\n\n  // Débogage - Afficher l'état du sélecteur de SELAS\n  useEffect(() => {\n    console.log('🏢 SelasSelector - État:', {\n      currentSelasId,\n      availableSelasCount: availableSelas.length,\n      availableSelas,\n      loading\n    });\n  }, [currentSelasId, availableSelas, loading]);\n  const handleSelasChange = selasId => {\n    if (selasId === currentSelasId) return;\n    if (window.confirm(\"Changer de SELAS va recharger toutes les données. Voulez-vous continuer ?\")) {\n      console.log(`🔄 Changement de SELAS demandé: ${selasId}`);\n      setCurrentSelasId(selasId);\n\n      // Recharger la page pour actualiser toutes les données\n      setTimeout(() => {\n        window.location.reload();\n      }, 300); // Petit délai pour permettre à localStorage d'être mis à jour\n    }\n  };\n\n  // Vérifier si l'utilisateur est administrateur\n  const isAdmin = () => {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    // Vous pouvez ajouter votre propre logique pour vérifier si l'utilisateur est un administrateur\n    return !!user; // Pour l'instant, tous les utilisateurs connectés sont considérés comme administrateurs\n  };\n\n  // Fonction pour migrer les données\n  const migrateData = async () => {\n    if (!currentSelasId) {\n      message.error('Aucune SELAS sélectionnée');\n      return;\n    }\n    try {\n      setIsMigrating(true);\n      setMigrationResult('');\n      setShowMigrationModal(true);\n      const collections = ['passages', 'sites', 'tournees', 'vehicules', 'users', 'markerPreferences'];\n      let totalUpdated = 0;\n      for (const collectionName of collections) {\n        const result = await processBatch(collectionName, currentSelasId);\n        totalUpdated += result;\n      }\n      setMigrationResult(`✅ Migration terminée ! ${totalUpdated} documents mis à jour.`);\n      message.success(`Migration terminée! ${totalUpdated} documents mis à jour.`);\n    } catch (error) {\n      console.error('❌ Erreur lors de la migration:', error);\n      setMigrationResult(`❌ Erreur lors de la migration: ${error}`);\n      message.error(`Erreur lors de la migration: ${error}`);\n    } finally {\n      setIsMigrating(false);\n    }\n  };\n\n  // Fonction pour traiter une collection par lots\n  const processBatch = async (collectionName, selasId, batchSize = 200) => {\n    const results = [];\n    try {\n      const collectionRef = collection(db, collectionName);\n      const snapshot = await getDocs(query(collectionRef, limit(batchSize)));\n      if (snapshot.empty) {\n        results.push(`ℹ️ Aucun document trouvé dans ${collectionName}`);\n        return 0;\n      }\n      let count = 0;\n      const batch = writeBatch(db);\n      for (const docSnapshot of snapshot.docs) {\n        const docRef = doc(db, collectionName, docSnapshot.id);\n        const data = docSnapshot.data();\n\n        // Vérifier si le document a déjà un selasId\n        if (!data.selasId) {\n          batch.update(docRef, {\n            selasId: selasId\n          });\n          count++;\n        }\n      }\n\n      // Commit le lot\n      if (count > 0) {\n        await batch.commit();\n        results.push(`✅ ${count} documents mis à jour dans ${collectionName}`);\n      } else {\n        results.push(`ℹ️ Aucune mise à jour nécessaire pour ${collectionName}`);\n      }\n\n      // Mettre à jour le résultat de la migration\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      return count;\n    } catch (error) {\n      results.push(`❌ Erreur lors du traitement de ${collectionName}: ${error}`);\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      console.error(`Erreur lors du traitement de ${collectionName}:`, error);\n      return 0;\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selas-selector\",\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Afficher même s'il n'y a qu'une seule SELAS\n  // if (availableSelas.length <= 1) {\n  //   return null; // Ne pas afficher le sélecteur s'il n'y a qu'une seule SELAS\n  // }\n\n  // Cas où aucune SELAS n'est disponible\n  if (availableSelas.length === 0) {\n    console.warn('⚠️ Aucune SELAS disponible!');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selas-selector error\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"selas-label\",\n        children: \"SELAS:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"selas-error\",\n        children: \"Aucune SELAS disponible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selas-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"selas-label\",\n      children: \"SELAS:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      value: currentSelasId || undefined,\n      onChange: handleSelasChange,\n      options: availableSelas.map(selas => ({\n        value: selas.id,\n        label: selas.nom\n      })),\n      placeholder: \"S\\xE9lectionner une SELAS\",\n      style: {\n        width: 200\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), isAdmin() && /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      size: \"small\",\n      onClick: migrateData,\n      loading: isMigrating,\n      className: \"migration-button\",\n      children: \"Migrer les donn\\xE9es\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Migration des donn\\xE9es\",\n      open: showMigrationModal,\n      onCancel: () => setShowMigrationModal(false),\n      footer: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setShowMigrationModal(false),\n        children: \"Fermer\"\n      }, \"close\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"migration-log\",\n        children: migrationResult ? /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: migrationResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Migration en cours...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(SelasSelector, \"z+3b+kOH4aUn2hVk48X60C/xRV0=\", false, function () {\n  return [useSelasContext];\n});\n_c = SelasSelector;\nexport default SelasSelector;\nvar _c;\n$RefreshReg$(_c, \"SelasSelector\");","map":{"version":3,"names":["React","useEffect","useState","Select","Spin","Button","Modal","message","useSelasContext","getAuth","collection","getDocs","doc","writeBatch","query","limit","db","jsxDEV","_jsxDEV","SelasSelector","_s","currentSelasId","setCurrentSelasId","availableSelas","loading","isMigrating","setIsMigrating","migrationResult","setMigrationResult","showMigrationModal","setShowMigrationModal","console","log","availableSelasCount","length","handleSelasChange","selasId","window","confirm","setTimeout","location","reload","isAdmin","auth","user","currentUser","migrateData","error","collections","totalUpdated","collectionName","result","processBatch","success","batchSize","results","collectionRef","snapshot","empty","push","count","batch","docSnapshot","docs","docRef","id","data","update","commit","prev","join","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","warn","value","undefined","onChange","options","map","selas","label","nom","placeholder","style","width","type","onClick","title","open","onCancel","footer","tip","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/SELASSelector.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Select, Spin, Button, Modal, message } from 'antd';\nimport { useSelasContext } from '../contexts/SelasContext';\nimport { getAuth } from 'firebase/auth';\nimport { collection, getDocs, doc, updateDoc, writeBatch, query, limit } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport './SELASSelector.css';\n\nconst SelasSelector: React.FC = () => {\n  const { currentSelasId, setCurrentSelasId, availableSelas, loading } = useSelasContext();\n  const [isMigrating, setIsMigrating] = useState<boolean>(false);\n  const [migrationResult, setMigrationResult] = useState<string>('');\n  const [showMigrationModal, setShowMigrationModal] = useState<boolean>(false);\n  \n  // Débogage - Afficher l'état du sélecteur de SELAS\n  useEffect(() => {\n    console.log('🏢 SelasSelector - État:', {\n      currentSelasId,\n      availableSelasCount: availableSelas.length,\n      availableSelas,\n      loading\n    });\n  }, [currentSelasId, availableSelas, loading]);\n  \n  const handleSelasChange = (selasId: string) => {\n    if (selasId === currentSelasId) return;\n    \n    if (window.confirm(\"Changer de SELAS va recharger toutes les données. Voulez-vous continuer ?\")) {\n      console.log(`🔄 Changement de SELAS demandé: ${selasId}`);\n      setCurrentSelasId(selasId);\n      \n      // Recharger la page pour actualiser toutes les données\n      setTimeout(() => {\n        window.location.reload();\n      }, 300); // Petit délai pour permettre à localStorage d'être mis à jour\n    }\n  };\n  \n  // Vérifier si l'utilisateur est administrateur\n  const isAdmin = () => {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    // Vous pouvez ajouter votre propre logique pour vérifier si l'utilisateur est un administrateur\n    return !!user; // Pour l'instant, tous les utilisateurs connectés sont considérés comme administrateurs\n  };\n  \n  // Fonction pour migrer les données\n  const migrateData = async () => {\n    if (!currentSelasId) {\n      message.error('Aucune SELAS sélectionnée');\n      return;\n    }\n    \n    try {\n      setIsMigrating(true);\n      setMigrationResult('');\n      setShowMigrationModal(true);\n      \n      const collections = [\n        'passages',\n        'sites',\n        'tournees',\n        'vehicules',\n        'users',\n        'markerPreferences'\n      ];\n      \n      let totalUpdated = 0;\n      \n      for (const collectionName of collections) {\n        const result = await processBatch(collectionName, currentSelasId);\n        totalUpdated += result;\n      }\n      \n      setMigrationResult(`✅ Migration terminée ! ${totalUpdated} documents mis à jour.`);\n      message.success(`Migration terminée! ${totalUpdated} documents mis à jour.`);\n    } catch (error) {\n      console.error('❌ Erreur lors de la migration:', error);\n      setMigrationResult(`❌ Erreur lors de la migration: ${error}`);\n      message.error(`Erreur lors de la migration: ${error}`);\n    } finally {\n      setIsMigrating(false);\n    }\n  };\n  \n  // Fonction pour traiter une collection par lots\n  const processBatch = async (collectionName: string, selasId: string, batchSize = 200) => {\n    const results = [];\n    \n    try {\n      const collectionRef = collection(db, collectionName);\n      const snapshot = await getDocs(query(collectionRef, limit(batchSize)));\n      \n      if (snapshot.empty) {\n        results.push(`ℹ️ Aucun document trouvé dans ${collectionName}`);\n        return 0;\n      }\n      \n      let count = 0;\n      const batch = writeBatch(db);\n      \n      for (const docSnapshot of snapshot.docs) {\n        const docRef = doc(db, collectionName, docSnapshot.id);\n        const data = docSnapshot.data();\n        \n        // Vérifier si le document a déjà un selasId\n        if (!data.selasId) {\n          batch.update(docRef, { selasId: selasId });\n          count++;\n        }\n      }\n      \n      // Commit le lot\n      if (count > 0) {\n        await batch.commit();\n        results.push(`✅ ${count} documents mis à jour dans ${collectionName}`);\n      } else {\n        results.push(`ℹ️ Aucune mise à jour nécessaire pour ${collectionName}`);\n      }\n      \n      // Mettre à jour le résultat de la migration\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      \n      return count;\n    } catch (error) {\n      results.push(`❌ Erreur lors du traitement de ${collectionName}: ${error}`);\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      console.error(`Erreur lors du traitement de ${collectionName}:`, error);\n      return 0;\n    }\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"selas-selector\">\n        <Spin size=\"small\" />\n      </div>\n    );\n  }\n  \n  // Afficher même s'il n'y a qu'une seule SELAS\n  // if (availableSelas.length <= 1) {\n  //   return null; // Ne pas afficher le sélecteur s'il n'y a qu'une seule SELAS\n  // }\n  \n  // Cas où aucune SELAS n'est disponible\n  if (availableSelas.length === 0) {\n    console.warn('⚠️ Aucune SELAS disponible!');\n    return (\n      <div className=\"selas-selector error\">\n        <span className=\"selas-label\">SELAS:</span>\n        <span className=\"selas-error\">Aucune SELAS disponible</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"selas-selector\">\n      <span className=\"selas-label\">SELAS:</span>\n      <Select\n        value={currentSelasId || undefined}\n        onChange={handleSelasChange}\n        options={availableSelas.map(selas => ({\n          value: selas.id,\n          label: selas.nom\n        }))}\n        placeholder=\"Sélectionner une SELAS\"\n        style={{ width: 200 }}\n      />\n      \n      {isAdmin() && (\n        <Button \n          type=\"primary\" \n          size=\"small\" \n          onClick={migrateData} \n          loading={isMigrating}\n          className=\"migration-button\"\n        >\n          Migrer les données\n        </Button>\n      )}\n      \n      <Modal\n        title=\"Migration des données\"\n        open={showMigrationModal}\n        onCancel={() => setShowMigrationModal(false)}\n        footer={[\n          <Button key=\"close\" onClick={() => setShowMigrationModal(false)}>\n            Fermer\n          </Button>\n        ]}\n      >\n        <div className=\"migration-log\">\n          {migrationResult ? (\n            <pre>{migrationResult}</pre>\n          ) : (\n            <Spin tip=\"Migration en cours...\" />\n          )}\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default SelasSelector; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}