{"ast":null,"code":"var _SELASService;import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,where}from'firebase/firestore';import{db}from'../config/firebase';import{getAuth}from'firebase/auth';/**\r\n * Service de gestion des SELAS\r\n */export class SELASService{// Constructeur privé pour le pattern Singleton\nconstructor(){this.collectionName='selas';}// Méthode pour obtenir l'instance\nstatic getInstance(){if(!SELASService.instance){SELASService.instance=new SELASService();}return SELASService.instance;}/**\r\n   * Récupérer toutes les SELAS\r\n   */async getSELAS(){try{const auth=getAuth();const currentUser=auth.currentUser;if(!currentUser){console.error('Erreur lors de la récupération des SELAS: Utilisateur non authentifié');throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');}console.log(`Tentative d'accès à la collection SELAS avec l'utilisateur: ${currentUser.email}`);const selasRef=collection(db,this.collectionName);const snapshot=await getDocs(selasRef);return snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));}catch(error){console.error('Erreur lors de la récupération des SELAS:',error);throw error;}}/**\r\n   * Récupérer une SELAS par son ID\r\n   */async getSELASById(id){try{const auth=getAuth();const currentUser=auth.currentUser;if(!currentUser){console.error(`Erreur lors de la récupération de la SELAS ${id}: Utilisateur non authentifié`);throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');}const selasRef=doc(db,this.collectionName,id);const snapshot=await getDoc(selasRef);if(snapshot.exists()){return{id:snapshot.id,...snapshot.data()};}return null;}catch(error){console.error(`Erreur lors de la récupération de la SELAS ${id}:`,error);throw error;}}/**\r\n   * Ajouter une nouvelle SELAS\r\n   */async addSELAS(selas){try{const now=new Date().toISOString();const selasWithDates={...selas,dateCreation:now,dateModification:now};const selasRef=collection(db,this.collectionName);const docRef=await addDoc(selasRef,selasWithDates);return{id:docRef.id,...selasWithDates};}catch(error){console.error('Erreur lors de l\\'ajout de la SELAS:',error);throw error;}}/**\r\n   * Mettre à jour une SELAS existante\r\n   */async updateSELAS(id,updates){try{const selasRef=doc(db,this.collectionName,id);const updatesWithDate={...updates,dateModification:new Date().toISOString()};await updateDoc(selasRef,updatesWithDate);}catch(error){console.error(`Erreur lors de la mise à jour de la SELAS ${id}:`,error);throw error;}}/**\r\n   * Supprimer une SELAS\r\n   */async deleteSELAS(id){try{const selasRef=doc(db,this.collectionName,id);await deleteDoc(selasRef);}catch(error){console.error(`Erreur lors de la suppression de la SELAS ${id}:`,error);throw error;}}/**\r\n   * Récupérer les statistiques d'une SELAS\r\n   */async getSELASStats(selasId){try{// Vérifier si la SELAS existe\nconst selas=await this.getSELASById(selasId);if(!selas)return null;// Compter les utilisateurs, sites, passages, tournées et véhicules associés à cette SELAS\nconst collections=['users','sites','passages','tournees','vehicules'];const counts={};for(const collectionName of collections){const q=query(collection(db,collectionName),where('selasId','==',selasId));const snapshot=await getDocs(q);counts[collectionName]=snapshot.size;}return{id:selasId,nom:selas.nom,nbUtilisateurs:counts['users']||0,nbSites:counts['sites']||0,nbPassages:counts['passages']||0,nbTournees:counts['tournees']||0,nbVehicules:counts['vehicules']||0};}catch(error){console.error(`Erreur lors de la récupération des statistiques de la SELAS ${selasId}:`,error);throw error;}}/**\r\n   * Exporte les données des SELAS sélectionnées\r\n   * @param selasIds Liste des IDs de SELAS à exporter, si vide, exporte toutes les SELAS\r\n   */async exportSELAS(){let selasIds=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];try{// Si aucun ID n'est spécifié, exporter toutes les SELAS\nlet selasToExport=[];if(selasIds.length===0){selasToExport=await this.getSELAS();}else{// Récupérer seulement les SELAS sélectionnées\nconst selasPromises=selasIds.map(id=>this.getSELASById(id));const selasResults=await Promise.all(selasPromises);selasToExport=selasResults.filter(sela=>sela!==null);}// Préparer les données d'exportation\nconst exportData={exportDate:new Date().toISOString(),selasCount:selasToExport.length,data:selasToExport.map(sela=>({...sela// Ne pas inclure d'informations sensibles si nécessaire\n}))};return exportData;}catch(error){console.error('Erreur lors de l\\'exportation des SELAS:',error);throw error;}}}_SELASService=SELASService;SELASService.instance=void 0;","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","db","getAuth","SELASService","constructor","collectionName","getInstance","instance","getSELAS","auth","currentUser","console","error","Error","log","email","selasRef","snapshot","docs","map","id","data","getSELASById","exists","addSELAS","selas","now","Date","toISOString","selasWithDates","dateCreation","dateModification","docRef","updateSELAS","updates","updatesWithDate","deleteSELAS","getSELASStats","selasId","collections","counts","q","size","nom","nbUtilisateurs","nbSites","nbPassages","nbTournees","nbVehicules","exportSELAS","selasIds","arguments","length","undefined","selasToExport","selasPromises","selasResults","Promise","all","filter","sela","exportData","exportDate","selasCount","_SELASService"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/SELASService.ts"],"sourcesContent":["import { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, serverTimestamp, Timestamp, query, where } from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { SELAS, SELASCreation, SELASStats } from '../types/SELAS';\r\n\r\n/**\r\n * Service de gestion des SELAS\r\n */\r\nexport class SELASService {\r\n  private static instance: SELASService;\r\n  private readonly collectionName = 'selas';\r\n  \r\n  // Constructeur privé pour le pattern Singleton\r\n  private constructor() {}\r\n  \r\n  // Méthode pour obtenir l'instance\r\n  public static getInstance(): SELASService {\r\n    if (!SELASService.instance) {\r\n      SELASService.instance = new SELASService();\r\n    }\r\n    return SELASService.instance;\r\n  }\r\n  \r\n  /**\r\n   * Récupérer toutes les SELAS\r\n   */\r\n  public async getSELAS(): Promise<SELAS[]> {\r\n    try {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        console.error('Erreur lors de la récupération des SELAS: Utilisateur non authentifié');\r\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\r\n      }\r\n      \r\n      console.log(`Tentative d'accès à la collection SELAS avec l'utilisateur: ${currentUser.email}`);\r\n      \r\n      const selasRef = collection(db, this.collectionName);\r\n      const snapshot = await getDocs(selasRef);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      } as SELAS));\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Récupérer une SELAS par son ID\r\n   */\r\n  public async getSELASById(id: string): Promise<SELAS | null> {\r\n    try {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        console.error(`Erreur lors de la récupération de la SELAS ${id}: Utilisateur non authentifié`);\r\n        throw new Error('Utilisateur non authentifié. Veuillez vous connecter pour accéder aux SELAS.');\r\n      }\r\n      \r\n      const selasRef = doc(db, this.collectionName, id);\r\n      const snapshot = await getDoc(selasRef);\r\n      \r\n      if (snapshot.exists()) {\r\n        return {\r\n          id: snapshot.id,\r\n          ...snapshot.data()\r\n        } as SELAS;\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la récupération de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Ajouter une nouvelle SELAS\r\n   */\r\n  public async addSELAS(selas: Omit<SELAS, 'id' | 'dateCreation' | 'dateModification'>): Promise<SELAS> {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const selasWithDates = {\r\n        ...selas,\r\n        dateCreation: now,\r\n        dateModification: now\r\n      };\r\n      \r\n      const selasRef = collection(db, this.collectionName);\r\n      const docRef = await addDoc(selasRef, selasWithDates);\r\n      \r\n      return {\r\n        id: docRef.id,\r\n        ...selasWithDates\r\n      } as SELAS;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout de la SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Mettre à jour une SELAS existante\r\n   */\r\n  public async updateSELAS(id: string, updates: Partial<SELAS>): Promise<void> {\r\n    try {\r\n      const selasRef = doc(db, this.collectionName, id);\r\n      \r\n      const updatesWithDate = {\r\n        ...updates,\r\n        dateModification: new Date().toISOString()\r\n      };\r\n      \r\n      await updateDoc(selasRef, updatesWithDate);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la mise à jour de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Supprimer une SELAS\r\n   */\r\n  public async deleteSELAS(id: string): Promise<void> {\r\n    try {\r\n      const selasRef = doc(db, this.collectionName, id);\r\n      await deleteDoc(selasRef);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la suppression de la SELAS ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Récupérer les statistiques d'une SELAS\r\n   */\r\n  public async getSELASStats(selasId: string): Promise<SELASStats | null> {\r\n    try {\r\n      // Vérifier si la SELAS existe\r\n      const selas = await this.getSELASById(selasId);\r\n      if (!selas) return null;\r\n      \r\n      // Compter les utilisateurs, sites, passages, tournées et véhicules associés à cette SELAS\r\n      const collections = ['users', 'sites', 'passages', 'tournees', 'vehicules'];\r\n      const counts: Record<string, number> = {};\r\n      \r\n      for (const collectionName of collections) {\r\n        const q = query(collection(db, collectionName), where('selasId', '==', selasId));\r\n        const snapshot = await getDocs(q);\r\n        counts[collectionName] = snapshot.size;\r\n      }\r\n      \r\n      return {\r\n        id: selasId,\r\n        nom: selas.nom,\r\n        nbUtilisateurs: counts['users'] || 0,\r\n        nbSites: counts['sites'] || 0,\r\n        nbPassages: counts['passages'] || 0,\r\n        nbTournees: counts['tournees'] || 0,\r\n        nbVehicules: counts['vehicules'] || 0\r\n      };\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la récupération des statistiques de la SELAS ${selasId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exporte les données des SELAS sélectionnées\r\n   * @param selasIds Liste des IDs de SELAS à exporter, si vide, exporte toutes les SELAS\r\n   */\r\n  public async exportSELAS(selasIds: string[] = []): Promise<any> {\r\n    try {\r\n      // Si aucun ID n'est spécifié, exporter toutes les SELAS\r\n      let selasToExport: SELAS[] = [];\r\n      \r\n      if (selasIds.length === 0) {\r\n        selasToExport = await this.getSELAS();\r\n      } else {\r\n        // Récupérer seulement les SELAS sélectionnées\r\n        const selasPromises = selasIds.map(id => this.getSELASById(id));\r\n        const selasResults = await Promise.all(selasPromises);\r\n        selasToExport = selasResults.filter(sela => sela !== null) as SELAS[];\r\n      }\r\n      \r\n      // Préparer les données d'exportation\r\n      const exportData = {\r\n        exportDate: new Date().toISOString(),\r\n        selasCount: selasToExport.length,\r\n        data: selasToExport.map(sela => ({\r\n          ...sela,\r\n          // Ne pas inclure d'informations sensibles si nécessaire\r\n        }))\r\n      };\r\n      \r\n      return exportData;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'exportation des SELAS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}