{"ast":null,"code":"import React,{useState,useEffect}from'react';import{RoleService}from'../services/RoleService';import'./PageAccessManagement.css';// Mapping des noms de pages en français\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PAGE_LABELS={dashboard:'Tableau de bord',passages:'Passages',sites:'Sites',tournees:'Tournées',vehicules:'Véhicules',carte:'Carte',userManagement:'Gestion des utilisateurs',administration:'Administration'};// Types de pages possibles\nconst PAGE_TYPES=['dashboard','passages','sites','tournees','vehicules','carte','userManagement','administration'];const PageAccessManagement=()=>{const[roles,setRoles]=useState([]);const[selectedRole,setSelectedRole]=useState(null);const[pageAccess,setPageAccess]=useState({});const[loading,setLoading]=useState(true);const[saving,setSaving]=useState(false);const[message,setMessage]=useState(null);useEffect(()=>{const fetchRoles=async()=>{try{setLoading(true);const roleService=RoleService.getInstance();const fetchedRoles=await roleService.getRoles();setRoles(fetchedRoles);// Sélectionner automatiquement le premier rôle\nif(fetchedRoles.length>0&&!selectedRole){setSelectedRole(fetchedRoles[0]);setPageAccess(fetchedRoles[0].pageAccess||{});}}catch(error){console.error('Erreur lors du chargement des rôles:',error);setMessage({text:'Impossible de charger les rôles. Veuillez réessayer.',type:'error'});}finally{setLoading(false);}};fetchRoles();},[]);const handleRoleSelect=role=>{setSelectedRole(role);setPageAccess(role.pageAccess||{});};const togglePageAccess=pageName=>{setPageAccess(prev=>({...prev,[pageName]:!prev[pageName]}));};const handleSavePageAccess=async()=>{if(!selectedRole)return;try{setSaving(true);const roleService=RoleService.getInstance();await roleService.updatePageAccess(selectedRole.id,pageAccess);// Forcer le rechargement des rôles globaux\nawait roleService.refreshRoles();// Afficher un message de succès\nsetMessage({text:'Accès aux pages mis à jour avec succès ! Veuillez vous déconnecter et vous reconnecter pour que les changements prennent effet.',type:'success'});// Mettre à jour le rôle sélectionné avec les nouveaux accès\nconst updatedRole={...selectedRole,pageAccess};setSelectedRole(updatedRole);// Mettre à jour la liste des rôles\nsetRoles(prevRoles=>prevRoles.map(role=>role.id===updatedRole.id?updatedRole:role));// Cacher le message après 5 secondes\nsetTimeout(()=>{setMessage(null);},5000);}catch(error){console.error(\"Erreur lors de la mise à jour des accès aux pages:\",error);setMessage({text:'Erreur lors de la mise à jour des accès aux pages.',type:'error'});}finally{setSaving(false);}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"page-access-loading\",children:\"Chargement des r\\xF4les...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"page-access-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"page-access-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Gestion des Acc\\xE8s aux Pages\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Configurez les autorisations d'acc\\xE8s pour chaque r\\xF4le\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"page-access-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"role-selector\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"S\\xE9lectionnez un r\\xF4le\"}),/*#__PURE__*/_jsx(\"div\",{className:\"role-buttons\",children:roles.map(role=>/*#__PURE__*/_jsxs(\"button\",{className:`role-button ${(selectedRole===null||selectedRole===void 0?void 0:selectedRole.id)===role.id?'active':''}`,onClick:()=>handleRoleSelect(role),children:[role.name,role.isAdmin&&/*#__PURE__*/_jsx(\"span\",{className:\"admin-badge\",children:\"Admin\"})]},role.id))})]}),selectedRole&&/*#__PURE__*/_jsxs(\"div\",{className:\"page-access-panel\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Acc\\xE8s aux pages pour \",selectedRole.name]}),/*#__PURE__*/_jsx(\"div\",{className:\"page-access-cards\",children:PAGE_TYPES.map(pageKey=>/*#__PURE__*/_jsx(\"div\",{className:\"page-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"page-card-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"page-name\",children:PAGE_LABELS[pageKey]}),/*#__PURE__*/_jsxs(\"label\",{className:\"toggle\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:pageAccess[pageKey]||false,onChange:()=>togglePageAccess(pageKey)}),/*#__PURE__*/_jsx(\"span\",{className:\"toggle-slider\"})]})]})},pageKey))}),/*#__PURE__*/_jsx(\"div\",{className:\"action-buttons\",children:/*#__PURE__*/_jsx(\"button\",{className:\"save-button\",onClick:handleSavePageAccess,disabled:saving,children:saving?'Enregistrement...':'Enregistrer les accès'})}),message&&/*#__PURE__*/_jsx(\"div\",{className:`message ${message.type}`,children:message.text})]})]})]});};export default PageAccessManagement;","map":{"version":3,"names":["React","useState","useEffect","RoleService","jsx","_jsx","jsxs","_jsxs","PAGE_LABELS","dashboard","passages","sites","tournees","vehicules","carte","userManagement","administration","PAGE_TYPES","PageAccessManagement","roles","setRoles","selectedRole","setSelectedRole","pageAccess","setPageAccess","loading","setLoading","saving","setSaving","message","setMessage","fetchRoles","roleService","getInstance","fetchedRoles","getRoles","length","error","console","text","type","handleRoleSelect","role","togglePageAccess","pageName","prev","handleSavePageAccess","updatePageAccess","id","refreshRoles","updatedRole","prevRoles","map","setTimeout","className","children","onClick","name","isAdmin","pageKey","checked","onChange","disabled"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/PageAccessManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Role } from '../types/roles';\nimport { RoleService } from '../services/RoleService';\nimport './PageAccessManagement.css';\n\n// Mapping des noms de pages en français\nconst PAGE_LABELS = {\n  dashboard: 'Tableau de bord',\n  passages: 'Passages',\n  sites: 'Sites',\n  tournees: 'Tournées',\n  vehicules: 'Véhicules',\n  carte: 'Carte',\n  userManagement: 'Gestion des utilisateurs',\n  administration: 'Administration'\n};\n\n// Types de pages possibles\nconst PAGE_TYPES = ['dashboard', 'passages', 'sites', 'tournees', 'vehicules', 'carte', 'userManagement', 'administration'] as const;\ntype PageKey = typeof PAGE_TYPES[number];\n\nconst PageAccessManagement: React.FC = () => {\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [pageAccess, setPageAccess] = useState<{[key in PageKey]?: boolean}>({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState<{text: string, type: 'success' | 'error'} | null>(null);\n\n  useEffect(() => {\n    const fetchRoles = async () => {\n      try {\n        setLoading(true);\n        const roleService = RoleService.getInstance();\n        const fetchedRoles = await roleService.getRoles();\n        setRoles(fetchedRoles);\n        \n        // Sélectionner automatiquement le premier rôle\n        if (fetchedRoles.length > 0 && !selectedRole) {\n          setSelectedRole(fetchedRoles[0]);\n          setPageAccess(fetchedRoles[0].pageAccess || {});\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des rôles:', error);\n        setMessage({\n          text: 'Impossible de charger les rôles. Veuillez réessayer.',\n          type: 'error'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRoles();\n  }, []);\n\n  const handleRoleSelect = (role: Role) => {\n    setSelectedRole(role);\n    setPageAccess(role.pageAccess || {});\n  };\n\n  const togglePageAccess = (pageName: PageKey) => {\n    setPageAccess(prev => ({\n      ...prev,\n      [pageName]: !prev[pageName]\n    }));\n  };\n\n  const handleSavePageAccess = async () => {\n    if (!selectedRole) return;\n    \n    try {\n      setSaving(true);\n      const roleService = RoleService.getInstance();\n      await roleService.updatePageAccess(selectedRole.id, pageAccess);\n      \n      // Forcer le rechargement des rôles globaux\n      await roleService.refreshRoles();\n\n      // Afficher un message de succès\n      setMessage({\n        text: 'Accès aux pages mis à jour avec succès ! Veuillez vous déconnecter et vous reconnecter pour que les changements prennent effet.',\n        type: 'success'\n      });\n      \n      // Mettre à jour le rôle sélectionné avec les nouveaux accès\n      const updatedRole = { ...selectedRole, pageAccess };\n      setSelectedRole(updatedRole);\n      \n      // Mettre à jour la liste des rôles\n      setRoles(prevRoles => \n        prevRoles.map(role => \n          role.id === updatedRole.id ? updatedRole : role\n        )\n      );\n      \n      // Cacher le message après 5 secondes\n      setTimeout(() => {\n        setMessage(null);\n      }, 5000);\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour des accès aux pages:\", error);\n      setMessage({\n        text: 'Erreur lors de la mise à jour des accès aux pages.',\n        type: 'error'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"page-access-loading\">Chargement des rôles...</div>;\n  }\n\n  return (\n    <div className=\"page-access-container\">\n      <div className=\"page-access-header\">\n        <h1>Gestion des Accès aux Pages</h1>\n        <p>Configurez les autorisations d'accès pour chaque rôle</p>\n      </div>\n\n      <div className=\"page-access-content\">\n        <div className=\"role-selector\">\n          <h3>Sélectionnez un rôle</h3>\n          <div className=\"role-buttons\">\n            {roles.map(role => (\n              <button \n                key={role.id} \n                className={`role-button ${selectedRole?.id === role.id ? 'active' : ''}`}\n                onClick={() => handleRoleSelect(role)}\n              >\n                {role.name}\n                {role.isAdmin && <span className=\"admin-badge\">Admin</span>}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {selectedRole && (\n          <div className=\"page-access-panel\">\n            <h2>Accès aux pages pour {selectedRole.name}</h2>\n            \n            <div className=\"page-access-cards\">\n              {PAGE_TYPES.map(pageKey => (\n                <div key={pageKey} className=\"page-card\">\n                  <div className=\"page-card-content\">\n                    <div className=\"page-name\">{PAGE_LABELS[pageKey]}</div>\n                    <label className=\"toggle\">\n                      <input\n                        type=\"checkbox\"\n                        checked={pageAccess[pageKey] || false}\n                        onChange={() => togglePageAccess(pageKey)}\n                      />\n                      <span className=\"toggle-slider\"></span>\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"action-buttons\">\n              <button \n                className=\"save-button\" \n                onClick={handleSavePageAccess}\n                disabled={saving}\n              >\n                {saving ? 'Enregistrement...' : 'Enregistrer les accès'}\n              </button>\n            </div>\n            \n            {message && (\n              <div className={`message ${message.type}`}>\n                {message.text}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PageAccessManagement;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}