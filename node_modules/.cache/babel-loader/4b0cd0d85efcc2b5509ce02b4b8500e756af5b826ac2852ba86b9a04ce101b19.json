{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\contexts\\\\SelasContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { SELASService } from '../services/SELASService';\nimport { useAuth } from './AuthContext';\n\n// Interface pour le contexte\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Création du contexte avec des valeurs par défaut\nconst SelasContext = /*#__PURE__*/createContext({\n  currentSelasId: null,\n  setCurrentSelasId: () => {},\n  availableSelas: [],\n  loading: false,\n  error: null\n});\n\n// Hook pour utiliser le contexte dans les composants\nexport const useSelasContext = () => {\n  _s();\n  return useContext(SelasContext);\n};\n\n// Props pour le provider\n_s(useSelasContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n// Provider du contexte\nexport const SelasProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentSelasId, setCurrentSelasIdState] = useState(localStorage.getItem('currentSelasId'));\n  const [availableSelas, setAvailableSelas] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    currentUser\n  } = useAuth();\n\n  // Charger la liste des SELAS disponibles uniquement si l'utilisateur est authentifié\n  useEffect(() => {\n    const fetchSelas = async () => {\n      // Si l'utilisateur n'est pas authentifié, ne rien faire\n      if (!currentUser) {\n        setAvailableSelas([]);\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        const selasService = SELASService.getInstance();\n        const selasData = await selasService.getSELAS();\n\n        // Filtrer uniquement les SELAS actives\n        const activeSelas = selasData.filter(sela => sela.active);\n        setAvailableSelas(activeSelas);\n\n        // Si aucune SELAS active n'est trouvée\n        if (activeSelas.length === 0) {\n          console.warn(\"Aucune SELAS active n'a été trouvée!\");\n          setError(\"Aucune SELAS active disponible\");\n        }\n\n        // Si l'ID SELAS actuel n'est pas dans la liste des SELAS actives\n        if (currentSelasId && !activeSelas.some(sela => sela.id === currentSelasId)) {\n          // Si au moins une SELAS active existe, définir la première comme courante\n          if (activeSelas.length > 0) {\n            setCurrentSelasId(activeSelas[0].id);\n          } else {\n            // Sinon, effacer l'ID SELAS actuel\n            setCurrentSelasId(null);\n          }\n        }\n\n        // Si aucune SELAS n'est sélectionnée et qu'il en existe au moins une\n        if (!currentSelasId && activeSelas.length > 0) {\n          setCurrentSelasId(activeSelas[0].id);\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des SELAS:', error);\n        setError('Erreur lors du chargement des SELAS');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSelas();\n  }, [currentSelasId, currentUser]);\n\n  // Fonction pour définir l'ID SELAS actuel\n  const setCurrentSelasId = id => {\n    if (id) {\n      localStorage.setItem('currentSelasId', id);\n    } else {\n      localStorage.removeItem('currentSelasId');\n    }\n    setCurrentSelasIdState(id);\n  };\n\n  // Valeur du contexte\n  const value = {\n    currentSelasId,\n    setCurrentSelasId,\n    availableSelas,\n    loading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(SelasContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(SelasProvider, \"s3GENXvepsW+2TnDeJ7LDqZQlg0=\", false, function () {\n  return [useAuth];\n});\n_c = SelasProvider;\nexport default SelasContext;\nvar _c;\n$RefreshReg$(_c, \"SelasProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","SELASService","useAuth","jsxDEV","_jsxDEV","SelasContext","currentSelasId","setCurrentSelasId","availableSelas","loading","error","useSelasContext","_s","SelasProvider","children","_s2","setCurrentSelasIdState","localStorage","getItem","setAvailableSelas","setLoading","setError","currentUser","fetchSelas","selasService","getInstance","selasData","getSELAS","activeSelas","filter","sela","active","length","console","warn","some","id","setItem","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/contexts/SelasContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { SELAS } from '../types/SELAS';\r\nimport { SELASService } from '../services/SELASService';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Interface pour le contexte\r\ninterface SelasContextType {\r\n  currentSelasId: string | null;\r\n  setCurrentSelasId: (id: string | null) => void;\r\n  availableSelas: SELAS[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\n// Création du contexte avec des valeurs par défaut\r\nconst SelasContext = createContext<SelasContextType>({\r\n  currentSelasId: null,\r\n  setCurrentSelasId: () => {},\r\n  availableSelas: [],\r\n  loading: false,\r\n  error: null\r\n});\r\n\r\n// Hook pour utiliser le contexte dans les composants\r\nexport const useSelasContext = () => useContext(SelasContext);\r\n\r\n// Props pour le provider\r\ninterface SelasProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Provider du contexte\r\nexport const SelasProvider: React.FC<SelasProviderProps> = ({ children }) => {\r\n  const [currentSelasId, setCurrentSelasIdState] = useState<string | null>(\r\n    localStorage.getItem('currentSelasId')\r\n  );\r\n  const [availableSelas, setAvailableSelas] = useState<SELAS[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { currentUser } = useAuth();\r\n  \r\n  // Charger la liste des SELAS disponibles uniquement si l'utilisateur est authentifié\r\n  useEffect(() => {\r\n    const fetchSelas = async () => {\r\n      // Si l'utilisateur n'est pas authentifié, ne rien faire\r\n      if (!currentUser) {\r\n        setAvailableSelas([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const selasService = SELASService.getInstance();\r\n        const selasData = await selasService.getSELAS();\r\n        \r\n        // Filtrer uniquement les SELAS actives\r\n        const activeSelas = selasData.filter(sela => sela.active);\r\n        setAvailableSelas(activeSelas);\r\n        \r\n        // Si aucune SELAS active n'est trouvée\r\n        if (activeSelas.length === 0) {\r\n          console.warn(\"Aucune SELAS active n'a été trouvée!\");\r\n          setError(\"Aucune SELAS active disponible\");\r\n        }\r\n        \r\n        // Si l'ID SELAS actuel n'est pas dans la liste des SELAS actives\r\n        if (currentSelasId && !activeSelas.some(sela => sela.id === currentSelasId)) {\r\n          // Si au moins une SELAS active existe, définir la première comme courante\r\n          if (activeSelas.length > 0) {\r\n            setCurrentSelasId(activeSelas[0].id);\r\n          } else {\r\n            // Sinon, effacer l'ID SELAS actuel\r\n            setCurrentSelasId(null);\r\n          }\r\n        }\r\n        \r\n        // Si aucune SELAS n'est sélectionnée et qu'il en existe au moins une\r\n        if (!currentSelasId && activeSelas.length > 0) {\r\n          setCurrentSelasId(activeSelas[0].id);\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des SELAS:', error);\r\n        setError('Erreur lors du chargement des SELAS');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchSelas();\r\n  }, [currentSelasId, currentUser]);\r\n  \r\n  // Fonction pour définir l'ID SELAS actuel\r\n  const setCurrentSelasId = (id: string | null) => {\r\n    if (id) {\r\n      localStorage.setItem('currentSelasId', id);\r\n    } else {\r\n      localStorage.removeItem('currentSelasId');\r\n    }\r\n    setCurrentSelasIdState(id);\r\n  };\r\n  \r\n  // Valeur du contexte\r\n  const value = {\r\n    currentSelasId,\r\n    setCurrentSelasId,\r\n    availableSelas,\r\n    loading,\r\n    error\r\n  };\r\n  \r\n  return (\r\n    <SelasContext.Provider value={value}>\r\n      {children}\r\n    </SelasContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SelasContext; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}