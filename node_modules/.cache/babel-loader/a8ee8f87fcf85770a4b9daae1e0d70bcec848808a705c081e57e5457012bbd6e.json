{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Select,Spin,Button,Modal,message}from'antd';import{useSelasContext}from'../contexts/SelasContext';import{getAuth}from'firebase/auth';import{collection,getDocs,doc,writeBatch,query,limit}from'firebase/firestore';import{db}from'../config/firebase';import'./SELASSelector.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SelasSelector=()=>{const{currentSelasId,setCurrentSelasId,availableSelas,loading}=useSelasContext();const[isMigrating,setIsMigrating]=useState(false);const[migrationResult,setMigrationResult]=useState('');const[showMigrationModal,setShowMigrationModal]=useState(false);// Débogage - Afficher l'état du sélecteur de SELAS\nuseEffect(()=>{console.log('🏢 SelasSelector - État:',{currentSelasId,availableSelasCount:availableSelas.length,availableSelas,loading});},[currentSelasId,availableSelas,loading]);const handleSelasChange=selasId=>{if(selasId===currentSelasId)return;if(window.confirm(\"Changer de SELAS va recharger toutes les données. Voulez-vous continuer ?\")){console.log(`🔄 Changement de SELAS demandé: ${selasId}`);setCurrentSelasId(selasId);// Recharger la page pour actualiser toutes les données\nsetTimeout(()=>{window.location.reload();},300);// Petit délai pour permettre à localStorage d'être mis à jour\n}};// Vérifier si l'utilisateur est administrateur\nconst isAdmin=()=>{const auth=getAuth();const user=auth.currentUser;// Vous pouvez ajouter votre propre logique pour vérifier si l'utilisateur est un administrateur\nreturn!!user;// Pour l'instant, tous les utilisateurs connectés sont considérés comme administrateurs\n};// Fonction pour migrer les données\nconst migrateData=async()=>{if(!currentSelasId){message.error('Aucune SELAS sélectionnée');return;}try{setIsMigrating(true);setMigrationResult('');setShowMigrationModal(true);const collections=['passages','sites','tournees','vehicules','users','markerPreferences'];let totalUpdated=0;for(const collectionName of collections){const result=await processBatch(collectionName,currentSelasId);totalUpdated+=result;}setMigrationResult(`✅ Migration terminée ! ${totalUpdated} documents mis à jour.`);message.success(`Migration terminée! ${totalUpdated} documents mis à jour.`);}catch(error){console.error('❌ Erreur lors de la migration:',error);setMigrationResult(`❌ Erreur lors de la migration: ${error}`);message.error(`Erreur lors de la migration: ${error}`);}finally{setIsMigrating(false);}};// Fonction pour traiter une collection par lots\nconst processBatch=async function(collectionName,selasId){let batchSize=arguments.length>2&&arguments[2]!==undefined?arguments[2]:200;const results=[];try{const collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,limit(batchSize)));if(snapshot.empty){results.push(`ℹ️ Aucun document trouvé dans ${collectionName}`);return 0;}let count=0;const batch=writeBatch(db);for(const docSnapshot of snapshot.docs){const docRef=doc(db,collectionName,docSnapshot.id);const data=docSnapshot.data();// Vérifier si le document a déjà un selasId\nif(!data.selasId){batch.update(docRef,{selasId:selasId});count++;}}// Commit le lot\nif(count>0){await batch.commit();results.push(`✅ ${count} documents mis à jour dans ${collectionName}`);}else{results.push(`ℹ️ Aucune mise à jour nécessaire pour ${collectionName}`);}// Mettre à jour le résultat de la migration\nsetMigrationResult(prev=>prev+'\\n'+results.join('\\n'));return count;}catch(error){results.push(`❌ Erreur lors du traitement de ${collectionName}: ${error}`);setMigrationResult(prev=>prev+'\\n'+results.join('\\n'));console.error(`Erreur lors du traitement de ${collectionName}:`,error);return 0;}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"selas-selector\",children:/*#__PURE__*/_jsx(Spin,{size:\"small\"})});}// Afficher même s'il n'y a qu'une seule SELAS\n// if (availableSelas.length <= 1) {\n//   return null; // Ne pas afficher le sélecteur s'il n'y a qu'une seule SELAS\n// }\n// Cas où aucune SELAS n'est disponible\nif(availableSelas.length===0){console.warn('⚠️ Aucune SELAS disponible!');return/*#__PURE__*/_jsxs(\"div\",{className:\"selas-selector error\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"selas-label\",children:\"SELAS:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"selas-error\",children:\"Aucune SELAS disponible\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"selas-selector\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"selas-label\",children:\"SELAS:\"}),/*#__PURE__*/_jsx(Select,{value:currentSelasId||undefined,onChange:handleSelasChange,options:availableSelas.map(selas=>({value:selas.id,label:selas.nom})),placeholder:\"S\\xE9lectionner une SELAS\",style:{width:200}}),isAdmin()&&/*#__PURE__*/_jsx(Button,{type:\"primary\",size:\"small\",onClick:migrateData,loading:isMigrating,className:\"migration-button\",children:\"Migrer les donn\\xE9es\"}),/*#__PURE__*/_jsx(Modal,{title:\"Migration des donn\\xE9es\",open:showMigrationModal,onCancel:()=>setShowMigrationModal(false),footer:[/*#__PURE__*/_jsx(Button,{onClick:()=>setShowMigrationModal(false),children:\"Fermer\"},\"close\")],children:/*#__PURE__*/_jsx(\"div\",{className:\"migration-log\",children:migrationResult?/*#__PURE__*/_jsx(\"pre\",{children:migrationResult}):/*#__PURE__*/_jsx(Spin,{tip:\"Migration en cours...\"})})})]});};export default SelasSelector;","map":{"version":3,"names":["React","useEffect","useState","Select","Spin","Button","Modal","message","useSelasContext","getAuth","collection","getDocs","doc","writeBatch","query","limit","db","jsx","_jsx","jsxs","_jsxs","SelasSelector","currentSelasId","setCurrentSelasId","availableSelas","loading","isMigrating","setIsMigrating","migrationResult","setMigrationResult","showMigrationModal","setShowMigrationModal","console","log","availableSelasCount","length","handleSelasChange","selasId","window","confirm","setTimeout","location","reload","isAdmin","auth","user","currentUser","migrateData","error","collections","totalUpdated","collectionName","result","processBatch","success","batchSize","arguments","undefined","results","collectionRef","snapshot","empty","push","count","batch","docSnapshot","docs","docRef","id","data","update","commit","prev","join","className","children","size","warn","value","onChange","options","map","selas","label","nom","placeholder","style","width","type","onClick","title","open","onCancel","footer","tip"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/SELASSelector.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Select, Spin, Button, Modal, message } from 'antd';\nimport { useSelasContext } from '../contexts/SelasContext';\nimport { getAuth } from 'firebase/auth';\nimport { collection, getDocs, doc, updateDoc, writeBatch, query, limit } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport './SELASSelector.css';\n\nconst SelasSelector: React.FC = () => {\n  const { currentSelasId, setCurrentSelasId, availableSelas, loading } = useSelasContext();\n  const [isMigrating, setIsMigrating] = useState<boolean>(false);\n  const [migrationResult, setMigrationResult] = useState<string>('');\n  const [showMigrationModal, setShowMigrationModal] = useState<boolean>(false);\n  \n  // Débogage - Afficher l'état du sélecteur de SELAS\n  useEffect(() => {\n    console.log('🏢 SelasSelector - État:', {\n      currentSelasId,\n      availableSelasCount: availableSelas.length,\n      availableSelas,\n      loading\n    });\n  }, [currentSelasId, availableSelas, loading]);\n  \n  const handleSelasChange = (selasId: string) => {\n    if (selasId === currentSelasId) return;\n    \n    if (window.confirm(\"Changer de SELAS va recharger toutes les données. Voulez-vous continuer ?\")) {\n      console.log(`🔄 Changement de SELAS demandé: ${selasId}`);\n      setCurrentSelasId(selasId);\n      \n      // Recharger la page pour actualiser toutes les données\n      setTimeout(() => {\n        window.location.reload();\n      }, 300); // Petit délai pour permettre à localStorage d'être mis à jour\n    }\n  };\n  \n  // Vérifier si l'utilisateur est administrateur\n  const isAdmin = () => {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    // Vous pouvez ajouter votre propre logique pour vérifier si l'utilisateur est un administrateur\n    return !!user; // Pour l'instant, tous les utilisateurs connectés sont considérés comme administrateurs\n  };\n  \n  // Fonction pour migrer les données\n  const migrateData = async () => {\n    if (!currentSelasId) {\n      message.error('Aucune SELAS sélectionnée');\n      return;\n    }\n    \n    try {\n      setIsMigrating(true);\n      setMigrationResult('');\n      setShowMigrationModal(true);\n      \n      const collections = [\n        'passages',\n        'sites',\n        'tournees',\n        'vehicules',\n        'users',\n        'markerPreferences'\n      ];\n      \n      let totalUpdated = 0;\n      \n      for (const collectionName of collections) {\n        const result = await processBatch(collectionName, currentSelasId);\n        totalUpdated += result;\n      }\n      \n      setMigrationResult(`✅ Migration terminée ! ${totalUpdated} documents mis à jour.`);\n      message.success(`Migration terminée! ${totalUpdated} documents mis à jour.`);\n    } catch (error) {\n      console.error('❌ Erreur lors de la migration:', error);\n      setMigrationResult(`❌ Erreur lors de la migration: ${error}`);\n      message.error(`Erreur lors de la migration: ${error}`);\n    } finally {\n      setIsMigrating(false);\n    }\n  };\n  \n  // Fonction pour traiter une collection par lots\n  const processBatch = async (collectionName: string, selasId: string, batchSize = 200) => {\n    const results = [];\n    \n    try {\n      const collectionRef = collection(db, collectionName);\n      const snapshot = await getDocs(query(collectionRef, limit(batchSize)));\n      \n      if (snapshot.empty) {\n        results.push(`ℹ️ Aucun document trouvé dans ${collectionName}`);\n        return 0;\n      }\n      \n      let count = 0;\n      const batch = writeBatch(db);\n      \n      for (const docSnapshot of snapshot.docs) {\n        const docRef = doc(db, collectionName, docSnapshot.id);\n        const data = docSnapshot.data();\n        \n        // Vérifier si le document a déjà un selasId\n        if (!data.selasId) {\n          batch.update(docRef, { selasId: selasId });\n          count++;\n        }\n      }\n      \n      // Commit le lot\n      if (count > 0) {\n        await batch.commit();\n        results.push(`✅ ${count} documents mis à jour dans ${collectionName}`);\n      } else {\n        results.push(`ℹ️ Aucune mise à jour nécessaire pour ${collectionName}`);\n      }\n      \n      // Mettre à jour le résultat de la migration\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      \n      return count;\n    } catch (error) {\n      results.push(`❌ Erreur lors du traitement de ${collectionName}: ${error}`);\n      setMigrationResult(prev => prev + '\\n' + results.join('\\n'));\n      console.error(`Erreur lors du traitement de ${collectionName}:`, error);\n      return 0;\n    }\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"selas-selector\">\n        <Spin size=\"small\" />\n      </div>\n    );\n  }\n  \n  // Afficher même s'il n'y a qu'une seule SELAS\n  // if (availableSelas.length <= 1) {\n  //   return null; // Ne pas afficher le sélecteur s'il n'y a qu'une seule SELAS\n  // }\n  \n  // Cas où aucune SELAS n'est disponible\n  if (availableSelas.length === 0) {\n    console.warn('⚠️ Aucune SELAS disponible!');\n    return (\n      <div className=\"selas-selector error\">\n        <span className=\"selas-label\">SELAS:</span>\n        <span className=\"selas-error\">Aucune SELAS disponible</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"selas-selector\">\n      <span className=\"selas-label\">SELAS:</span>\n      <Select\n        value={currentSelasId || undefined}\n        onChange={handleSelasChange}\n        options={availableSelas.map(selas => ({\n          value: selas.id,\n          label: selas.nom\n        }))}\n        placeholder=\"Sélectionner une SELAS\"\n        style={{ width: 200 }}\n      />\n      \n      {isAdmin() && (\n        <Button \n          type=\"primary\" \n          size=\"small\" \n          onClick={migrateData} \n          loading={isMigrating}\n          className=\"migration-button\"\n        >\n          Migrer les données\n        </Button>\n      )}\n      \n      <Modal\n        title=\"Migration des données\"\n        open={showMigrationModal}\n        onCancel={() => setShowMigrationModal(false)}\n        footer={[\n          <Button key=\"close\" onClick={() => setShowMigrationModal(false)}>\n            Fermer\n          </Button>\n        ]}\n      >\n        <div className=\"migration-log\">\n          {migrationResult ? (\n            <pre>{migrationResult}</pre>\n          ) : (\n            <Spin tip=\"Migration en cours...\" />\n          )}\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default SelasSelector; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}