{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\components\\\\Sites.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { db } from '../config/firebase';\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, getDoc, query, limit, startAfter, orderBy, setDoc, getDocsFromServer, where, disableNetwork, enableNetwork } from 'firebase/firestore';\nimport { geocodeAddress } from '../utils/geocoding';\nimport './EditMode.css';\nimport './Sites.css';\nimport PoleSelector from './PoleSelector';\nimport PoleFilter from './PoleFilter';\nimport { usePoles } from '../services/PoleService';\n\n// Désactiver le suivi de structure et de chronologie pour améliorer les performances\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst disableStructuralAndChronologicalTracking = async () => {\n  try {\n    // Désactiver temporairement le réseau pour éviter les requêtes pendant la configuration\n    await disableNetwork(db);\n    console.log(\"Réseau temporairement désactivé pour configuration\");\n\n    // Réactiver le réseau avec les optimisations\n    await enableNetwork(db);\n    console.log(\"Réseau réactivé avec optimisations de performance\");\n  } catch (error) {\n    console.error(\"Erreur lors de l'optimisation de Firestore:\", error);\n  }\n};\n\n// Appeler la fonction d'optimisation au chargement du composant\ndisableStructuralAndChronologicalTracking();\n\n// Ajouter la constante des types de sites disponibles\nconst SITE_TYPES = ['Laboratoire', 'Clinique', 'Plateau technique', 'Point de collecte', 'Etablissement de santé', 'Ehpad', 'Vétérinaire'];\nconst Sites = () => {\n  _s();\n  const [sites, setSites] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [geocodingStatus, setGeocodingStatus] = useState(null);\n\n  // État pour le mode édition et la sélection multiple\n  const [editMode, setEditMode] = useState(false);\n  const [selectedSites, setSelectedSites] = useState([]);\n  const [editingSites, setEditingSites] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n\n  // Ajouter un nouvel état pour les nouveaux sites temporaires\n  const [newSites, setNewSites] = useState([]);\n\n  // État pour la recherche rapide\n  const [quickSearch, setQuickSearch] = useState('');\n  const [filteredSites, setFilteredSites] = useState([]);\n\n  // Ajout du filtre par pôle\n  const [selectedPole, setSelectedPole] = useState('');\n\n  // Nouveaux états pour la pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(20); // Par défaut 20 éléments\n\n  // Options pour le nombre d'éléments par page\n  const itemsPerPageOptions = [20, 30, 50, 100, 'Tous'];\n\n  // Ajoutez le hook usePoles\n  const {\n    poles\n  } = usePoles();\n\n  // Fonction pour convertir ID de pôle en nom\n  const getPoleNameById = poleId => {\n    if (!poleId) return '';\n    const pole = poles.find(p => p.id === poleId);\n    return pole ? pole.nom : poleId;\n  };\n  useEffect(() => {\n    fetchSites();\n  }, []);\n\n  // Effet pour gérer la sélection/désélection de tous les sites\n  useEffect(() => {\n    if (selectAll) {\n      setSelectedSites(sites.map(site => site.id));\n    } else if (selectedSites.length === sites.length) {\n      // Si tous les sites sont sélectionnés mais que selectAll est false, cela signifie que l'utilisateur a désélectionné\n      setSelectedSites([]);\n    }\n  }, [selectAll]);\n\n  // Initialiser les sites filtrés au chargement\n  useEffect(() => {\n    setFilteredSites(sites);\n  }, [sites]);\n\n  // Effet pour filtrer les sites en fonction de la recherche rapide\n  useEffect(() => {\n    if (!quickSearch.trim() && !selectedPole) {\n      // Si la recherche est vide et aucun pôle sélectionné, afficher tous les sites\n      setFilteredSites(sites);\n      return;\n    }\n    let results = sites;\n\n    // Filtrer par pôle si un pôle est sélectionné\n    if (selectedPole) {\n      results = results.filter(site => site.pole === selectedPole);\n    }\n\n    // Ensuite filtrer par recherche rapide\n    if (quickSearch.trim()) {\n      const searchTerm = quickSearch.toLowerCase().trim();\n      results = results.filter(site => {\n        // Rechercher dans tous les champs textuels du site\n        return (site.nom || '').toLowerCase().includes(searchTerm) || (site.adresse || '').toLowerCase().includes(searchTerm) || (site.ville || '').toLowerCase().includes(searchTerm) || (site.codePostal || '').toLowerCase().includes(searchTerm) || (site.telephone || '').toLowerCase().includes(searchTerm) || (site.email || '').toLowerCase().includes(searchTerm) || (site.type || '').toLowerCase().includes(searchTerm) || (site.statut || '').toLowerCase().includes(searchTerm) || (site.codeBarres || '').toLowerCase().includes(searchTerm);\n      });\n    }\n    setFilteredSites(results);\n  }, [quickSearch, sites, selectedPole]);\n\n  // Pagination et filtrage des sites\n  const paginatedAndFilteredSites = useMemo(() => {\n    // D'abord filtrer\n    const filtered = filteredSites;\n\n    // Si itemsPerPage est très grand (option \"Tous\"), retourner tous les sites filtrés\n    if (itemsPerPage === Number.MAX_SAFE_INTEGER) {\n      return filtered;\n    }\n\n    // Sinon, paginer normalement\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = Math.min(startIndex + itemsPerPage, filtered.length);\n\n    // S'il y a des nouveaux sites en mode édition, réduire le nombre de sites existants affichés\n    if (editMode && newSites.length > 0) {\n      const adjustedStartIndex = Math.min(startIndex, filtered.length);\n      const remainingSlots = Math.max(0, itemsPerPage - newSites.length);\n      const adjustedEndIndex = Math.min(adjustedStartIndex + remainingSlots, filtered.length);\n      return filtered.slice(adjustedStartIndex, adjustedEndIndex);\n    }\n    return filtered.slice(startIndex, endIndex);\n  }, [filteredSites, currentPage, itemsPerPage, editMode, newSites.length]);\n\n  // Calculer le nombre total de pages\n  const totalPages = Math.ceil(filteredSites.length / itemsPerPage);\n\n  // Fonction pour changer de page\n  const handlePageChange = newPage => {\n    setCurrentPage(newPage);\n  };\n\n  // Fonction pour changer le nombre d'éléments par page\n  const handleItemsPerPageChange = newItemsPerPage => {\n    if (newItemsPerPage === 'Tous') {\n      // Si \"Tous\" est sélectionné, définir le nombre d'éléments par page à un nombre très élevé\n      // pour afficher tous les sites sur une seule page\n      setItemsPerPage(Number.MAX_SAFE_INTEGER);\n    } else {\n      setItemsPerPage(Number(newItemsPerPage));\n    }\n    // Réinitialiser à la première page quand on change le nombre d'éléments\n    setCurrentPage(1);\n  };\n\n  // Rendu de la pagination\n  const renderPagination = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items-per-page\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\xC9l\\xE9ments par page : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: itemsPerPage === Number.MAX_SAFE_INTEGER ? 'Tous' : itemsPerPage,\n          onChange: e => handleItemsPerPageChange(e.target.value),\n          title: \"Nombre d'\\xE9l\\xE9ments par page\",\n          \"aria-label\": \"Nombre d'\\xE9l\\xE9ments par page\",\n          children: itemsPerPageOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage - 1),\n          disabled: currentPage === 1 || itemsPerPage === Number.MAX_SAFE_INTEGER,\n          children: \"Pr\\xE9c\\xE9dent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: itemsPerPage === Number.MAX_SAFE_INTEGER ? 'Tous les éléments affichés' : `Page ${currentPage} sur ${totalPages}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage + 1),\n          disabled: currentPage === totalPages || itemsPerPage === Number.MAX_SAFE_INTEGER,\n          children: \"Suivant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"total-results\",\n        children: [\"Total : \", filteredSites.length, \" r\\xE9sultat(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  };\n  const fetchSites = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setGeocodingStatus(\"Chargement des sites...\");\n      console.log(\"Récupération des sites depuis Firestore avec optimisations\");\n\n      // Récupérer les sites depuis Firestore avec pagination optimisée\n      const sitesRef = collection(db, 'sites');\n      const LIMIT = 250; // Augmenter la taille du lot pour réduire le nombre de requêtes\n\n      let lastDoc = null;\n      let allSites = [];\n      let hasMore = true;\n      let loadedCount = 0;\n      while (hasMore) {\n        // Construire la requête avec pagination\n        let q;\n        if (lastDoc) {\n          q = query(sitesRef, orderBy('nom'), startAfter(lastDoc), limit(LIMIT));\n        } else {\n          q = query(sitesRef, orderBy('nom'), limit(LIMIT));\n        }\n\n        // Utiliser getDocsFromServer pour forcer une requête au serveur sans utiliser le cache\n        const snapshot = await getDocsFromServer(q);\n        if (snapshot.empty) {\n          hasMore = false;\n          break;\n        }\n\n        // Optimiser la transformation des données\n        const batchSites = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        allSites = [...allSites, ...batchSites];\n        loadedCount += batchSites.length;\n\n        // Mettre à jour le statut de chargement moins fréquemment\n        if (loadedCount % 250 === 0 || snapshot.docs.length < LIMIT) {\n          setGeocodingStatus(`Chargement des sites... ${loadedCount} chargés`);\n        }\n\n        // Mettre à jour le dernier document pour la pagination\n        lastDoc = snapshot.docs[snapshot.docs.length - 1];\n\n        // Vérifier s'il y a plus de documents à récupérer\n        if (snapshot.docs.length < LIMIT) {\n          hasMore = false;\n        }\n      }\n      console.log(`${allSites.length} sites chargés depuis Firestore`);\n      setSites(allSites);\n\n      // Effacer les messages de statut après un court délai\n      setTimeout(() => {\n        setGeocodingStatus(null);\n      }, 1000);\n      setLoading(false);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des sites:', error);\n      setError('Erreur lors de la récupération des données');\n      setSites([]);\n      setGeocodingStatus(null);\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour gérer la sélection/désélection de tous les sites\n  const handleSelectAllChange = () => {\n    setSelectAll(!selectAll);\n  };\n\n  // Fonction pour géocoder tous les sites sélectionnés\n  const geocodeSelectedSites = async () => {\n    if (selectedSites.length === 0) {\n      alert('Veuillez sélectionner au moins un site à géocoder');\n      return;\n    }\n    try {\n      setLoading(true);\n      setGeocodingStatus('Géocodage en cours...');\n      const updatedEditingSites = {\n        ...editingSites\n      };\n      let successCount = 0;\n      let failCount = 0;\n      let currentCount = 0;\n      let cacheHitCount = 0;\n\n      // Traiter chaque site sélectionné\n      for (const siteId of selectedSites) {\n        const site = editingSites[siteId];\n        currentCount++;\n        if (site) {\n          setGeocodingStatus(`Géocodage en cours... (${currentCount}/${selectedSites.length})`);\n\n          // Vérifier si les données minimales sont disponibles\n          if (!site.nom && !site.adresse) {\n            failCount++;\n            console.warn(`Données minimales manquantes pour le site: ${site.nom || 'Sans nom'}`);\n            continue;\n          }\n\n          // Construire une adresse complète avec les informations disponibles\n          const addressParts = [site.nom, site.adresse, site.ville, site.codePostal].filter(Boolean);\n          const fullAddress = addressParts.join(', ');\n          console.log(`Tentative de géocodage pour \"${site.nom}\" avec l'adresse: \"${fullAddress}\"`);\n          const coordinates = await geocodeAddress(site.nom || '', site.adresse || '', site.ville || '', site.codePostal || '');\n          if (coordinates) {\n            // Si les coordonnées n'ont pas changé, c'est probablement un hit de cache\n            if (site.latitude === coordinates.latitude && site.longitude === coordinates.longitude) {\n              cacheHitCount++;\n            }\n            updatedEditingSites[siteId] = {\n              ...site,\n              latitude: coordinates.latitude,\n              longitude: coordinates.longitude\n            };\n            successCount++;\n            console.log(`Géocodage réussi pour \"${site.nom}\": Lat=${coordinates.latitude}, Lon=${coordinates.longitude}`);\n          } else {\n            failCount++;\n            console.warn(`Échec du géocodage pour le site: ${site.nom || 'Sans nom'}`);\n          }\n        } else {\n          failCount++;\n          console.warn(`Site non trouvé pour l'ID: ${siteId}`);\n        }\n\n        // Pause pour éviter de dépasser les limites de l'API, sauf pour le dernier élément\n        if (currentCount < selectedSites.length) {\n          await new Promise(resolve => setTimeout(resolve, 500)); // Réduit à 0.5 seconde grâce au cache\n        }\n      }\n      setEditingSites(updatedEditingSites);\n      setGeocodingStatus(`Géocodage terminé : ${successCount} réussis (dont ${cacheHitCount} depuis le cache), ${failCount} échoués. Enregistrement en cours...`);\n\n      // Enregistrer automatiquement les modifications après le géocodage\n      if (successCount > 0) {\n        console.log(\"Enregistrement automatique après géocodage...\");\n\n        // Créer un objet de recherche pour les IDs sélectionnés\n        const selectedIdsMap = {};\n        for (let i = 0; i < selectedSites.length; i++) {\n          selectedIdsMap[selectedSites[i]] = true;\n        }\n\n        // Mettre à jour les documents Firestore\n        let saveSuccessCount = 0;\n        let saveErrorCount = 0;\n\n        // Traiter les sites géocodés\n        for (let i = 0; i < selectedSites.length; i++) {\n          const siteId = selectedSites[i];\n          const editedSite = updatedEditingSites[siteId];\n          if (!editedSite) {\n            console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\n            continue;\n          }\n          try {\n            // Convertir l'ID en chaîne de caractères pour Firestore\n            const siteIdString = String(siteId);\n            console.log(`Sauvegarde des coordonnées pour le site ${siteIdString} (${editedSite.nom})...`);\n            const siteRef = doc(db, 'sites', siteIdString);\n\n            // Vérifier si le document existe\n            const docSnap = await getDoc(siteRef);\n\n            // Extraire l'ID avant la mise à jour\n            const {\n              id,\n              ...updateData\n            } = editedSite;\n            if (docSnap.exists()) {\n              // Le document existe, on peut le mettre à jour\n              await updateDoc(siteRef, updateData);\n              console.log(`Coordonnées du site ${siteIdString} (${editedSite.nom}) enregistrées avec succès`);\n              saveSuccessCount++;\n            } else {\n              // Le document n'existe pas, on doit le créer\n              console.log(`Le site ${siteIdString} n'existe pas, création avec coordonnées...`);\n              await setDoc(siteRef, updateData);\n              console.log(`Site ${siteIdString} créé avec coordonnées`);\n              saveSuccessCount++;\n            }\n          } catch (updateError) {\n            console.error(`Erreur lors de la sauvegarde des coordonnées du site ${siteId}:`, updateError);\n            saveErrorCount++;\n          }\n        }\n\n        // Mettre à jour l'état local\n        const updatedSites = [];\n\n        // Créer une nouvelle liste de sites avec les modifications\n        for (let i = 0; i < sites.length; i++) {\n          const site = sites[i];\n          const siteId = site.id;\n          if (selectedIdsMap[siteId] && updatedEditingSites[siteId]) {\n            // Si le site est sélectionné et modifié, utiliser la version modifiée\n            updatedSites.push({\n              ...updatedEditingSites[siteId]\n            });\n          } else {\n            // Sinon, garder le site inchangé\n            updatedSites.push(site);\n          }\n        }\n\n        // Mettre à jour les états\n        setSites(updatedSites);\n        setFilteredSites(updatedSites);\n        setGeocodingStatus(`Géocodage et enregistrement terminés : ${successCount} sites géocodés, ${saveSuccessCount} sites enregistrés, ${saveErrorCount} erreurs`);\n      }\n\n      // Masquer le statut après quelques secondes\n      setTimeout(() => {\n        setGeocodingStatus(null);\n      }, 5000);\n    } catch (error) {\n      console.error('Erreur lors du géocodage:', error);\n      setGeocodingStatus(`Erreur lors du géocodage: ${error}`);\n\n      // Masquer le message d'erreur après quelques secondes\n      setTimeout(() => {\n        setGeocodingStatus(null);\n      }, 5000);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const toggleEditMode = () => {\n    if (editMode) {\n      // Si on quitte le mode édition, réinitialiser les sélections et les modifications\n      setSelectedSites([]);\n      setEditingSites({});\n      setSelectAll(false);\n      setNewSites([]);\n\n      // Rafraîchir les données depuis Firebase\n      fetchSites();\n    } else {\n      // Si on entre en mode édition, initialiser les sites en édition\n      const editingSitesObj = {};\n      filteredSites.forEach(site => {\n        editingSitesObj[site.id] = {\n          ...site\n        };\n      });\n      setEditingSites(editingSitesObj);\n    }\n\n    // Inverser le mode édition\n    setEditMode(!editMode);\n\n    // Réinitialiser la recherche rapide et les filtres\n    setQuickSearch('');\n    setSelectedPole('');\n  };\n  const handleSave = async () => {\n    // Ne rien faire si aucun site n'est sélectionné et pas de nouveaux sites\n    if (selectedSites.length === 0 && newSites.length === 0) {\n      alert('Veuillez sélectionner au moins un site à enregistrer ou créer un nouveau site');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(\"Début de la sauvegarde...\");\n      console.log(\"Sites sélectionnés:\", selectedSites);\n      console.log(\"Nouveaux sites à créer:\", newSites.length);\n\n      // Créer un objet de recherche pour les IDs sélectionnés\n      const selectedIdsMap = {};\n      for (let i = 0; i < selectedSites.length; i++) {\n        selectedIdsMap[selectedSites[i]] = true;\n      }\n\n      // Mettre à jour les documents Firestore\n      let successCount = 0;\n      let errorCount = 0;\n      let newSitesAdded = 0;\n\n      // 1. D'abord, traiter les sites existants sélectionnés\n      for (let i = 0; i < selectedSites.length; i++) {\n        const siteId = selectedSites[i];\n        const editedSite = editingSites[siteId];\n        if (!editedSite) {\n          console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\n          continue;\n        }\n        try {\n          // Convertir l'ID en chaîne de caractères pour Firestore\n          const siteIdString = String(siteId);\n          console.log(`Conversion de l'ID ${siteId} (${typeof siteId}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\n          const siteRef = doc(db, 'sites', siteIdString);\n\n          // Vérifier si le document existe\n          const docSnap = await getDoc(siteRef);\n\n          // Extraire l'ID avant la mise à jour\n          const {\n            id,\n            ...updateData\n          } = editedSite;\n          if (docSnap.exists()) {\n            // Le document existe, on peut le mettre à jour\n            console.log(`Mise à jour du site ${siteIdString}...`);\n            await updateDoc(siteRef, updateData);\n            console.log(`Site ${siteIdString} mis à jour avec succès`);\n          } else {\n            // Le document n'existe pas, on doit le créer\n            console.log(`Le site ${siteIdString} n'existe pas, création...`);\n            await setDoc(siteRef, updateData);\n            console.log(`Site ${siteIdString} créé avec succès`);\n          }\n          successCount++;\n        } catch (updateError) {\n          console.error(`Erreur lors de la mise à jour du site ${siteId}:`, updateError);\n          errorCount++;\n        }\n      }\n\n      // 2. Ensuite, traiter les nouveaux sites temporaires\n      for (let i = 0; i < newSites.length; i++) {\n        const newSite = newSites[i];\n\n        // Vérifier que le site a au moins un nom (champ obligatoire)\n        if (!newSite.nom || newSite.nom.trim() === '') {\n          console.log(`Nouveau site #${i + 1} sans nom, ignoré`);\n          continue;\n        }\n        try {\n          // Supprimer l'ID temporaire et préparer les données pour l'ajout\n          const {\n            id,\n            ...siteData\n          } = newSite;\n          console.log(`Ajout du nouveau site \"${newSite.nom}\"...`);\n\n          // Utiliser addDoc pour générer un nouvel ID automatiquement\n          const sitesRef = collection(db, 'sites');\n          const docRef = await addDoc(sitesRef, siteData);\n          console.log(`Nouveau site \"${newSite.nom}\" ajouté avec l'ID: ${docRef.id}`);\n\n          // Ajouter le nouveau site à la liste des sites avec son ID réel\n          const newSiteWithId = {\n            id: docRef.id,\n            ...siteData\n          };\n\n          // Ajouter le nouveau site à la liste des sites\n          sites.push(newSiteWithId);\n          newSitesAdded++;\n          successCount++;\n        } catch (addError) {\n          console.error(`Erreur lors de l'ajout du nouveau site \"${newSite.nom}\":`, addError);\n          errorCount++;\n        }\n      }\n      console.log(`Sauvegarde terminée: ${successCount} succès (dont ${newSitesAdded} nouveaux sites), ${errorCount} erreurs`);\n\n      // Mettre à jour l'état local\n      const updatedSites = [];\n\n      // Créer une nouvelle liste de sites avec les modifications\n      for (let i = 0; i < sites.length; i++) {\n        const site = sites[i];\n        const siteId = site.id;\n        if (selectedIdsMap[siteId] && editingSites[siteId]) {\n          // Si le site est sélectionné et modifié, utiliser la version modifiée\n          updatedSites.push({\n            ...editingSites[siteId]\n          });\n        } else {\n          // Sinon, garder le site inchangé\n          updatedSites.push(site);\n        }\n      }\n\n      // Mettre à jour les états\n      setSites(updatedSites);\n      setFilteredSites(updatedSites);\n\n      // Afficher un message de confirmation\n      alert(`${successCount} sites mis à jour avec succès${newSitesAdded > 0 ? `, ${newSitesAdded} nouveaux sites ajoutés` : ''}${errorCount > 0 ? `, ${errorCount} erreurs` : ''}`);\n\n      // Réinitialiser les états\n      setEditMode(false);\n      setSelectedSites([]);\n      setEditingSites({});\n      setNewSites([]);\n      setSelectAll(false);\n    } catch (error) {\n      console.error('Erreur globale lors de la sauvegarde:', error);\n      alert('Une erreur est survenue lors de la sauvegarde');\n    } finally {\n      setLoading(false);\n      setGeocodingStatus(null);\n    }\n  };\n\n  // Fonction utilitaire pour comparer des objets\n  const isEqual = (obj1, obj2) => {\n    // Comparer les champs de base\n    const keys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);\n    for (const key of keys) {\n      // Gestion spéciale pour les tableaux (comme tournees)\n      if (Array.isArray(obj1[key]) && Array.isArray(obj2[key])) {\n        if (obj1[key].length !== obj2[key].length) return false;\n        if (!obj1[key].every((val, index) => val === obj2[key][index])) return false;\n      }\n      // Comparaison standard pour les autres types\n      else if (obj1[key] !== obj2[key]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Supprimer les sites sélectionnés sans messages\n  const handleDelete = async () => {\n    if (selectedSites.length === 0) {\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`Tentative de suppression de ${selectedSites.length} sites:`, selectedSites);\n\n      // Récupérer les sites sélectionnés à partir de l'état sites\n      const sitesToDelete = sites.filter(site => selectedSites.includes(site.id));\n      console.log(\"Sites à supprimer (détails complets):\", sitesToDelete);\n      if (sitesToDelete.length === 0) {\n        console.warn(\"Aucun site trouvé pour les IDs sélectionnés\");\n        setLoading(false); // Désactiver le chargement si aucun site à supprimer\n        return;\n      }\n\n      // Rechercher spécifiquement le site \"SITE 000 TEST\" ou \"Périphérique TEST\" s'il est dans la liste\n      const testSite = sitesToDelete.find(site => site.nom === \"SITE 000 TEST\" || site.nom.includes(\"TEST\") || site.nom.includes(\"Périphérique\") || site.pole === \"Périphérique\");\n      if (testSite) {\n        console.log(\"Site TEST/Périphérique trouvé pour suppression:\", testSite);\n\n        // Recherche spécifique pour le site problématique\n        await deleteSpecificTestSite();\n      }\n\n      // Supprimer les sites sélectionnés un par un\n      for (const site of sitesToDelete) {\n        try {\n          // Ignorer le site TEST/Périphérique car il est traité séparément\n          if (site.nom.includes(\"TEST\") || site.nom.includes(\"Périphérique\") || site.pole === \"Périphérique\") {\n            console.log(`Site ${site.nom} traité séparément, ignoré dans la boucle principale`);\n            continue;\n          }\n          console.log(`Traitement de la suppression pour le site:`, site);\n\n          // Convertir l'ID en chaîne de caractères pour Firestore\n          const siteIdString = String(site.id);\n          console.log(`Conversion de l'ID ${site.id} (${typeof site.id}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\n\n          // Vérifier si le site existe dans Firestore avant de le supprimer\n          const siteRef = doc(db, 'sites', siteIdString);\n          const docSnap = await getDoc(siteRef);\n          if (docSnap.exists()) {\n            console.log(`Site ${siteIdString} (${site.nom}) trouvé dans Firestore, suppression...`);\n            await deleteDoc(siteRef);\n            console.log(`Site ${siteIdString} (${site.nom}) supprimé avec succès`);\n          } else {\n            console.warn(`Site ${siteIdString} (${site.nom}) non trouvé dans Firestore avec cet ID`);\n\n            // Si le site n'est pas trouvé avec son ID, essayer de le trouver par son nom\n            console.log(`Recherche du site \"${site.nom}\" par nom dans Firestore...`);\n            const sitesRef = collection(db, 'sites');\n            const q = query(sitesRef, where('nom', '==', site.nom));\n            const querySnapshot = await getDocs(q);\n            if (querySnapshot.empty) {\n              console.warn(`Aucun site trouvé avec le nom \"${site.nom}\" dans Firestore`);\n              continue;\n            }\n\n            // Supprimer tous les documents trouvés (normalement un seul)\n            let deletedCount = 0;\n            for (const docSnapshot of querySnapshot.docs) {\n              const docId = docSnapshot.id;\n              console.log(`Site trouvé avec l'ID Firestore: ${docId}, suppression...`);\n              await deleteDoc(docSnapshot.ref);\n              console.log(`Site \"${site.nom}\" (ID Firestore: ${docId}) supprimé avec succès`);\n              deletedCount++;\n            }\n            console.log(`${deletedCount} document(s) supprimé(s) pour le site \"${site.nom}\"`);\n          }\n        } catch (deleteError) {\n          console.error(`Erreur lors de la suppression du site \"${site.nom}\":`, deleteError);\n        }\n      }\n      console.log(\"Rechargement des sites depuis Firestore...\");\n      // Recharger les données depuis Firestore pour s'assurer que nous avons les données les plus récentes\n      await fetchSites();\n\n      // Réinitialiser les états\n      setEditMode(false);\n      setSelectedSites([]);\n      setEditingSites({});\n      setSelectAll(false);\n    } catch (error) {\n      console.error('Erreur lors de la suppression:', error);\n    } finally {\n      // S'assurer que l'état de chargement est toujours désactivé\n      setLoading(false);\n      // Effacer tout message de statut\n      setGeocodingStatus(null);\n    }\n  };\n\n  // Fonction spécifique pour supprimer le site problématique \"Périphérique TEST\"\n  const deleteSpecificTestSite = async () => {\n    try {\n      console.log(\"Recherche spécifique du site problématique 'Périphérique TEST'...\");\n      const sitesRef = collection(db, 'sites');\n\n      // Recherche par pole \"Périphérique\"\n      console.log(\"Recherche par pole 'Périphérique'...\");\n      const poleQuery = query(sitesRef, where('pole', '==', 'Périphérique'));\n      const poleSnapshot = await getDocs(poleQuery);\n      if (!poleSnapshot.empty) {\n        console.log(`${poleSnapshot.size} sites avec pole 'Périphérique' trouvés`);\n        for (const docSnapshot of poleSnapshot.docs) {\n          const siteData = docSnapshot.data();\n          console.log(`Site trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\n          if (siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST')) {\n            console.log(`Suppression du site problématique: ${docSnapshot.id} (${siteData.nom})`);\n            await deleteDoc(docSnapshot.ref);\n            console.log(`Site problématique ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\n          }\n        }\n      } else {\n        console.log(\"Aucun site avec pole 'Périphérique' trouvé\");\n      }\n\n      // Recherche par nom contenant \"TEST\"\n      console.log(\"Recherche par nom contenant 'TEST'...\");\n      const testQuery = query(sitesRef, where('nom', '>=', 'TEST'), where('nom', '<=', 'TEST\\uf8ff'));\n      const testSnapshot = await getDocs(testQuery);\n      if (!testSnapshot.empty) {\n        console.log(`${testSnapshot.size} sites contenant 'TEST' dans le nom trouvés`);\n        for (const docSnapshot of testSnapshot.docs) {\n          const siteData = docSnapshot.data();\n          console.log(`Site TEST trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}`);\n          console.log(`Suppression du site TEST: ${docSnapshot.id} (${siteData.nom})`);\n          await deleteDoc(docSnapshot.ref);\n          console.log(`Site TEST ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\n        }\n      } else {\n        console.log(\"Aucun site avec 'TEST' dans le nom trouvé\");\n      }\n\n      // Recherche par nom exact \"SITE 000 TEST\"\n      console.log(\"Recherche par nom exact 'SITE 000 TEST'...\");\n      const exactQuery = query(sitesRef, where('nom', '==', 'SITE 000 TEST'));\n      const exactSnapshot = await getDocs(exactQuery);\n      if (!exactSnapshot.empty) {\n        console.log(`${exactSnapshot.size} sites avec nom exact 'SITE 000 TEST' trouvés`);\n        for (const docSnapshot of exactSnapshot.docs) {\n          console.log(`Suppression du site exact: ${docSnapshot.id} (SITE 000 TEST)`);\n          await deleteDoc(docSnapshot.ref);\n          console.log(`Site exact ${docSnapshot.id} (SITE 000 TEST) supprimé avec succès`);\n        }\n      } else {\n        console.log(\"Aucun site avec nom exact 'SITE 000 TEST' trouvé\");\n      }\n\n      // Dernière tentative: recherche de tous les sites et filtrage manuel\n      console.log(\"Recherche manuelle de tous les sites...\");\n      const allSitesQuery = query(sitesRef, limit(1000));\n      const allSitesSnapshot = await getDocs(allSitesQuery);\n      let foundProblematicSite = false;\n      for (const docSnapshot of allSitesSnapshot.docs) {\n        const siteData = docSnapshot.data();\n\n        // Vérifier si c'est le site problématique\n        if ((siteData.pole === 'Périphérique' || siteData.pole === 'TEST') && siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST')) {\n          foundProblematicSite = true;\n          console.log(`Site problématique trouvé par recherche manuelle: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\n          console.log(`Suppression du site problématique: ${docSnapshot.id}`);\n          await deleteDoc(docSnapshot.ref);\n          console.log(`Site problématique ${docSnapshot.id} supprimé avec succès`);\n        }\n      }\n      if (!foundProblematicSite) {\n        console.log(\"Aucun site problématique trouvé par recherche manuelle\");\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression spécifique du site problématique:\", error);\n      return false;\n    }\n  };\n\n  // Optimiser la fonction de suppression des doublons\n  const removeDuplicateSites = async () => {\n    if (!window.confirm(\"Cette opération va rechercher et supprimer les sites en double dans la base de données. Continuer ?\")) {\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      setGeocodingStatus(\"Recherche des doublons en cours...\");\n\n      // Récupérer tous les sites depuis Firestore de manière optimisée\n      const sitesRef = collection(db, 'sites');\n      const snapshot = await getDocsFromServer(query(sitesRef, limit(1000)));\n      if (snapshot.empty) {\n        setGeocodingStatus(\"Aucun site trouvé dans la base de données.\");\n        setTimeout(() => setGeocodingStatus(null), 3000);\n        setLoading(false);\n        return;\n      }\n\n      // Utiliser une Map pour de meilleures performances\n      const sitesByName = new Map();\n\n      // Parcourir tous les sites et les regrouper par nom\n      snapshot.docs.forEach(doc => {\n        var _data$nom;\n        const data = doc.data();\n        const name = (_data$nom = data.nom) === null || _data$nom === void 0 ? void 0 : _data$nom.trim();\n        if (name) {\n          var _sitesByName$get;\n          // Normaliser le nom pour éviter les problèmes de casse et d'espaces\n          const normalizedName = name.toLowerCase().replace(/\\s+/g, ' ');\n          if (!sitesByName.has(normalizedName)) {\n            sitesByName.set(normalizedName, []);\n          }\n          (_sitesByName$get = sitesByName.get(normalizedName)) === null || _sitesByName$get === void 0 ? void 0 : _sitesByName$get.push({\n            id: doc.id,\n            data: data\n          });\n        }\n      });\n\n      // Identifier les noms qui ont des doublons\n      const duplicateNames = [];\n      sitesByName.forEach((sites, name) => {\n        if (sites.length > 1) {\n          duplicateNames.push(name);\n        }\n      });\n      if (duplicateNames.length === 0) {\n        setGeocodingStatus(\"Aucun doublon trouvé dans la base de données.\");\n        setTimeout(() => setGeocodingStatus(null), 3000);\n        setLoading(false);\n        return;\n      }\n      setGeocodingStatus(`${duplicateNames.length} sites avec doublons trouvés. Traitement en cours...`);\n      let totalDuplicatesRemoved = 0;\n      let processedCount = 0;\n\n      // Traiter les doublons par lots pour éviter de surcharger Firestore\n      const BATCH_SIZE = 10;\n      for (let i = 0; i < duplicateNames.length; i += BATCH_SIZE) {\n        const batch = duplicateNames.slice(i, i + BATCH_SIZE);\n\n        // Traiter chaque lot en parallèle\n        await Promise.all(batch.map(async name => {\n          const sites = sitesByName.get(name) || [];\n          console.log(`Traitement des doublons pour \"${name}\" (${sites.length} occurrences)`);\n\n          // Trier les sites par priorité\n          sites.sort((a, b) => {\n            // Priorité 1: Sites avec coordonnées\n            const aHasCoords = a.data.latitude && a.data.longitude;\n            const bHasCoords = b.data.latitude && b.data.longitude;\n            if (aHasCoords && !bHasCoords) return -1;\n            if (!aHasCoords && bHasCoords) return 1;\n\n            // Priorité 2: Sites avec adresse complète\n            const aHasFullAddress = a.data.adresse && a.data.ville && a.data.codePostal;\n            const bHasFullAddress = b.data.adresse && b.data.ville && b.data.codePostal;\n            if (aHasFullAddress && !bHasFullAddress) return -1;\n            if (!aHasFullAddress && bHasFullAddress) return 1;\n\n            // Priorité 3: Sites avec plus de champs remplis\n            const aFieldCount = Object.keys(a.data).filter(key => a.data[key]).length;\n            const bFieldCount = Object.keys(b.data).filter(key => b.data[key]).length;\n            if (aFieldCount > bFieldCount) return -1;\n            if (aFieldCount < bFieldCount) return 1;\n\n            // Priorité 4: ID plus récent\n            return b.id.localeCompare(a.id);\n          });\n\n          // Garder le premier site et supprimer les autres\n          const siteToKeep = sites[0];\n          const sitesToRemove = sites.slice(1);\n          console.log(`Conservation du site ${siteToKeep.id} (${siteToKeep.data.nom}) et suppression de ${sitesToRemove.length} doublons`);\n\n          // Supprimer les doublons\n          for (const site of sitesToRemove) {\n            try {\n              const siteRef = doc(db, 'sites', site.id);\n              await deleteDoc(siteRef);\n              console.log(`Site en double supprimé: ${site.id} (${site.data.nom})`);\n              totalDuplicatesRemoved++;\n            } catch (error) {\n              console.error(`Erreur lors de la suppression du doublon ${site.id}:`, error);\n            }\n          }\n          processedCount++;\n          if (processedCount % 5 === 0 || processedCount === duplicateNames.length) {\n            setGeocodingStatus(`Traitement en cours: ${processedCount}/${duplicateNames.length} sites traités, ${totalDuplicatesRemoved} doublons supprimés`);\n          }\n        }));\n      }\n      setGeocodingStatus(`Nettoyage terminé: ${totalDuplicatesRemoved} doublons supprimés sur ${duplicateNames.length} sites.`);\n\n      // Recharger les sites après la suppression des doublons\n      await fetchSites();\n\n      // Masquer le message après quelques secondes\n      setTimeout(() => {\n        setGeocodingStatus(null);\n      }, 5000);\n    } catch (error) {\n      console.error('Erreur lors de la suppression des doublons:', error);\n      setGeocodingStatus(`Erreur lors de la suppression des doublons: ${error}`);\n      setTimeout(() => setGeocodingStatus(null), 5000);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const toggleSiteSelection = id => {\n    if (selectedSites.includes(id)) {\n      setSelectedSites(selectedSites.filter(siteId => siteId !== id));\n      // Si on désélectionne un site, on désactive aussi \"Tout sélectionner\"\n      setSelectAll(false);\n    } else {\n      setSelectedSites([...selectedSites, id]);\n      // Si tous les sites sont sélectionnés, on active \"Tout sélectionner\"\n      if (selectedSites.length + 1 === sites.length) {\n        setSelectAll(true);\n      }\n    }\n  };\n  const handleCellChange = (id, field, value) => {\n    setEditingSites({\n      ...editingSites,\n      [id]: {\n        ...editingSites[id],\n        [field]: value\n      }\n    });\n  };\n  const addNewSiteRow = () => {\n    // Forcer le mode édition si ce n'est pas déjà le cas\n    if (!editMode) {\n      setEditMode(true);\n    }\n    const newSite = {\n      id: `temp-${Date.now()}`,\n      nom: '',\n      pole: '',\n      type: '',\n      // Le type sera sélectionné dans le menu déroulant\n      adresse: '',\n      ville: '',\n      codePostal: '',\n      telephone: '',\n      email: '',\n      codeBarres: '',\n      tournees: [],\n      codesPorte: '',\n      coordonnees: '',\n      statut: 'actif'\n    };\n\n    // Ajouter la nouvelle ligne au début du tableau\n    setNewSites(prevNewSites => [newSite, ...prevNewSites]);\n\n    // Revenir à la première page pour voir le nouveau site\n    setCurrentPage(1);\n\n    // Ajouter un délai pour permettre le rendu\n    setTimeout(() => {\n      const firstInput = document.querySelector('.sites-table-container .new-site-row input');\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }, 100);\n  };\n  const handleNewSiteChange = (index, field, value) => {\n    const updatedNewSites = [...newSites];\n    updatedNewSites[index] = {\n      ...updatedNewSites[index],\n      [field]: value\n    };\n    setNewSites(updatedNewSites);\n  };\n  const removeNewSiteRow = index => {\n    const updatedNewSites = newSites.filter((_, i) => i !== index);\n    setNewSites(updatedNewSites);\n  };\n\n  // Fonction pour gérer le changement de pôle\n  const handlePoleChange = pole => {\n    setSelectedPole(pole);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des sites...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1158,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Sites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sticky-header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleSave,\n            disabled: loading || selectedSites.length === 0 && newSites.length === 0,\n            style: {\n              backgroundColor: '#4CAF50',\n              // Vert\n              color: 'white',\n              fontWeight: 'bold'\n            },\n            title: \"Enregistrer les modifications\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1186,\n              columnNumber: 17\n            }, this), \" Enr. \", selectedSites.length > 0 || newSites.length > 0 ? `(${selectedSites.length}${newSites.length > 0 ? `+${newSites.length}` : ''})` : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1175,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button button-secondary\",\n            onClick: () => {\n              if (window.confirm(\"Êtes-vous sûr de vouloir annuler toutes les modifications ?\")) {\n                setEditingSites({});\n                setNewSites([]);\n                setSelectedSites([]);\n                setSelectAll(false);\n                setEditMode(false);\n              }\n            },\n            style: {\n              marginLeft: '5px'\n            },\n            disabled: loading,\n            title: \"Annuler les modifications\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1205,\n              columnNumber: 17\n            }, this), \" Annuler\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: addNewSiteRow,\n            style: {\n              marginLeft: '5px',\n              backgroundColor: '#FF9800',\n              // Orange\n              color: 'white',\n              fontWeight: 'bold'\n            },\n            disabled: loading,\n            title: \"Ajouter un nouveau site\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-plus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this), \" Ajouter\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button button-danger\",\n            onClick: handleDelete,\n            disabled: selectedSites.length === 0 || loading,\n            style: {\n              marginLeft: '5px',\n              backgroundColor: '#f44336',\n              color: 'white',\n              fontWeight: 'bold'\n            },\n            title: \"Supprimer les sites s\\xE9lectionn\\xE9s\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1233,\n              columnNumber: 17\n            }, this), \" Sup. (\", selectedSites.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: geocodeSelectedSites,\n            disabled: selectedSites.length === 0 || loading,\n            style: {\n              marginLeft: '5px'\n            },\n            title: \"G\\xE9ocoder les sites s\\xE9lectionn\\xE9s\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-map-marker-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1242,\n              columnNumber: 17\n            }, this), \" G\\xE9o. (\", selectedSites.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: toggleEditMode,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1250,\n            columnNumber: 15\n          }, this), \" Modifier\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-search-container\",\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"quick-search-input\",\n          placeholder: \"Recherche rapide...\",\n          value: quickSearch,\n          onChange: e => setQuickSearch(e.target.value),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pole-filter\",\n          children: /*#__PURE__*/_jsxDEV(PoleFilter, {\n            onPoleChange: handlePoleChange,\n            selectedPole: selectedPole,\n            label: \"Filtrer par p\\xF4le\",\n            className: \"pole-filter-component\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1265,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sites-table-container\",\n      style: {\n        overflowX: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-info\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [filteredSites.length, \" r\\xE9sultat(s) trouv\\xE9(s)\", quickSearch ? ` pour la recherche \"${quickSearch}\"` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1279,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: `data-table ${editMode ? 'editing' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [editMode && /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectAll,\n                onChange: handleSelectAllChange,\n                title: \"S\\xE9lectionner/D\\xE9s\\xE9lectionner tout\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"P\\xD4LE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TYPE DE SITE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1295,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"NOM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ADRESSE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"COMPL\\xC9MENT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1298,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VILLE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CODE POSTAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TOURN\\xC9ES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1301,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"HORAIRES L-V\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"HORAIRES SAMEDI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1303,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CODE-BARRE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"COORDONN\\xC9ES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1306,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"STATUT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1307,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1283,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [editMode && newSites.map((site, index) => {\n            var _site$tournees;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"new-site-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  display: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1314,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(PoleSelector, {\n                  value: site.pole || '',\n                  onChange: value => handleNewSiteChange(index, 'pole', value),\n                  placeholder: \"S\\xE9lectionner un p\\xF4le\",\n                  style: {\n                    width: '100%'\n                  },\n                  showSearch: true,\n                  allowClear: true,\n                  title: \"P\\xF4le du site\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1318,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1317,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: site.type || '',\n                  onChange: e => handleNewSiteChange(index, 'type', e.target.value),\n                  className: \"inline-edit-select\",\n                  title: \"Type de site\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"S\\xE9lectionner un type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1335,\n                    columnNumber: 21\n                  }, this), SITE_TYPES.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: type,\n                    children: type\n                  }, type, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1337,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1329,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1328,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.nom || '',\n                  onChange: e => handleNewSiteChange(index, 'nom', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1342,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1341,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.adresse || '',\n                  onChange: e => handleNewSiteChange(index, 'adresse', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Adresse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1351,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1350,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.complementAdresse || '',\n                  onChange: e => handleNewSiteChange(index, 'complementAdresse', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Compl\\xE9ment d'adresse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1360,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1359,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.ville || '',\n                  onChange: e => handleNewSiteChange(index, 'ville', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Ville\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1369,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1368,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.codePostal || '',\n                  onChange: e => handleNewSiteChange(index, 'codePostal', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Code postal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1378,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1377,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_site$tournees = site.tournees) === null || _site$tournees === void 0 ? void 0 : _site$tournees.join(', ')) || '',\n                  onChange: e => handleNewSiteChange(index, 'tournees', e.target.value.split(',').map(s => s.trim())),\n                  className: \"inline-edit-input\",\n                  title: \"Tourn\\xE9es\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1387,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1386,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.horairesLV || '',\n                  onChange: e => handleNewSiteChange(index, 'horairesLV', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Horaires Lundi-Vendredi\",\n                  placeholder: \"HH:MM-HH:MM\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1396,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1395,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.horairesSamedi || '',\n                  onChange: e => handleNewSiteChange(index, 'horairesSamedi', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Horaires Samedi\",\n                  placeholder: \"HH:MM-HH:MM\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1406,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1405,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: site.codeBarres || '',\n                  onChange: e => handleNewSiteChange(index, 'codeBarres', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Code-barre\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1416,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1415,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"coordinates-empty\",\n                  children: [\"Pas de coordonn\\xE9es\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1426,\n                    columnNumber: 39\n                  }, this), \"(utiliser le g\\xE9ocodage)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1425,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1424,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: site.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1430,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: site.statut || 'actif',\n                  onChange: e => handleNewSiteChange(index, 'statut', e.target.value),\n                  className: \"inline-edit-select\",\n                  title: \"Statut du site\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"actif\",\n                    children: \"Actif\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1438,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"inactif\",\n                    children: \"Inactif\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1439,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1432,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1431,\n                columnNumber: 17\n              }, this)]\n            }, `new-site-${site.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1313,\n              columnNumber: 15\n            }, this);\n          }), paginatedAndFilteredSites.map((site, index) => {\n            var _editingSites$site$id, _editingSites$site$id2, _editingSites$site$id3, _editingSites$site$id4, _editingSites$site$id5, _editingSites$site$id6, _editingSites$site$id7, _editingSites$site$id8, _editingSites$site$id9, _site$tournees2, _editingSites$site$id10, _editingSites$site$id11, _editingSites$site$id12, _editingSites$site$id13;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: selectedSites.includes(site.id) ? 'selected-row' : '',\n              children: [editMode && /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedSites.includes(site.id),\n                  onChange: () => toggleSiteSelection(site.id),\n                  title: \"S\\xE9lectionner ce site\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1450,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1449,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(PoleSelector, {\n                  value: ((_editingSites$site$id = editingSites[site.id]) === null || _editingSites$site$id === void 0 ? void 0 : _editingSites$site$id.pole) || site.pole || '',\n                  onChange: value => handleCellChange(site.id, 'pole', value),\n                  placeholder: \"S\\xE9lectionner un p\\xF4le\",\n                  style: {\n                    width: '100%'\n                  },\n                  showSearch: true,\n                  allowClear: true,\n                  title: \"P\\xF4le du site\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1460,\n                  columnNumber: 21\n                }, this) : getPoleNameById(site.pole)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1458,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: ((_editingSites$site$id2 = editingSites[site.id]) === null || _editingSites$site$id2 === void 0 ? void 0 : _editingSites$site$id2.type) || site.type || '',\n                  onChange: e => handleCellChange(site.id, 'type', e.target.value),\n                  className: \"inline-edit-select\",\n                  title: \"Type de site\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"S\\xE9lectionner un type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1481,\n                    columnNumber: 23\n                  }, this), SITE_TYPES.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: type,\n                    children: type\n                  }, type, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1483,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1475,\n                  columnNumber: 21\n                }, this) : site.type || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1473,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id3 = editingSites[site.id]) === null || _editingSites$site$id3 === void 0 ? void 0 : _editingSites$site$id3.nom) || site.nom || '',\n                  onChange: e => handleCellChange(site.id, 'nom', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1492,\n                  columnNumber: 21\n                }, this) : site.nom || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1490,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id4 = editingSites[site.id]) === null || _editingSites$site$id4 === void 0 ? void 0 : _editingSites$site$id4.adresse) || site.adresse || '',\n                  onChange: e => handleCellChange(site.id, 'adresse', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Adresse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1505,\n                  columnNumber: 21\n                }, this) : site.adresse || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1503,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id5 = editingSites[site.id]) === null || _editingSites$site$id5 === void 0 ? void 0 : _editingSites$site$id5.complementAdresse) || site.complementAdresse || '',\n                  onChange: e => handleCellChange(site.id, 'complementAdresse', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Compl\\xE9ment d'adresse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1518,\n                  columnNumber: 21\n                }, this) : site.complementAdresse || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1516,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id6 = editingSites[site.id]) === null || _editingSites$site$id6 === void 0 ? void 0 : _editingSites$site$id6.ville) || site.ville || '',\n                  onChange: e => handleCellChange(site.id, 'ville', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Ville\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1531,\n                  columnNumber: 21\n                }, this) : site.ville || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1529,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id7 = editingSites[site.id]) === null || _editingSites$site$id7 === void 0 ? void 0 : _editingSites$site$id7.codePostal) || site.codePostal || '',\n                  onChange: e => handleCellChange(site.id, 'codePostal', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Code postal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1544,\n                  columnNumber: 21\n                }, this) : site.codePostal || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1542,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id8 = editingSites[site.id]) === null || _editingSites$site$id8 === void 0 ? void 0 : (_editingSites$site$id9 = _editingSites$site$id8.tournees) === null || _editingSites$site$id9 === void 0 ? void 0 : _editingSites$site$id9.join(', ')) || '',\n                  onChange: e => handleCellChange(site.id, 'tournees', e.target.value.split(',').map(s => s.trim())),\n                  className: \"inline-edit-input\",\n                  title: \"Tourn\\xE9es\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1557,\n                  columnNumber: 21\n                }, this) : ((_site$tournees2 = site.tournees) === null || _site$tournees2 === void 0 ? void 0 : _site$tournees2.join(', ')) || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1555,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id10 = editingSites[site.id]) === null || _editingSites$site$id10 === void 0 ? void 0 : _editingSites$site$id10.horairesLV) || site.horairesLV || '',\n                  onChange: e => handleCellChange(site.id, 'horairesLV', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Horaires Lundi-Vendredi\",\n                  placeholder: \"HH:MM-HH:MM\",\n                  pattern: \"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1570,\n                  columnNumber: 21\n                }, this) : site.horairesLV || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1568,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id11 = editingSites[site.id]) === null || _editingSites$site$id11 === void 0 ? void 0 : _editingSites$site$id11.horairesSamedi) || site.horairesSamedi || '',\n                  onChange: e => handleCellChange(site.id, 'horairesSamedi', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Horaires Samedi\",\n                  placeholder: \"HH:MM-HH:MM\",\n                  pattern: \"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1585,\n                  columnNumber: 21\n                }, this) : site.horairesSamedi || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1583,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingSites$site$id12 = editingSites[site.id]) === null || _editingSites$site$id12 === void 0 ? void 0 : _editingSites$site$id12.codeBarres) || site.codeBarres || '',\n                  onChange: e => handleCellChange(site.id, 'codeBarres', e.target.value),\n                  className: \"inline-edit-input\",\n                  title: \"Code-barre\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1600,\n                  columnNumber: 21\n                }, this) : site.codeBarres || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1598,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? site.latitude && site.longitude ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"coordinates-display\",\n                  children: [\"Lat: \", site.latitude.toFixed(6), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1615,\n                    columnNumber: 56\n                  }, this), \"Lon: \", site.longitude.toFixed(6)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1614,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"coordinates-empty\",\n                  children: [\"Pas de coordonn\\xE9es\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1620,\n                    columnNumber: 43\n                  }, this), \"(utiliser le g\\xE9ocodage)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1619,\n                  columnNumber: 23\n                }, this) : site.latitude && site.longitude ? `Lat: ${site.latitude.toFixed(6)}, Lon: ${site.longitude.toFixed(6)}` : '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1611,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: site.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1630,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: ((_editingSites$site$id13 = editingSites[site.id]) === null || _editingSites$site$id13 === void 0 ? void 0 : _editingSites$site$id13.statut) || site.statut || 'actif',\n                  onChange: e => handleCellChange(site.id, 'statut', e.target.value),\n                  className: \"inline-edit-select\",\n                  title: \"Statut du site\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"actif\",\n                    children: \"Actif\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1639,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"inactif\",\n                    children: \"Inactif\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1640,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1633,\n                  columnNumber: 21\n                }, this) : site.statut === 'actif' || !site.statut ? 'Actif' : 'Inactif'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1631,\n                columnNumber: 17\n              }, this)]\n            }, `site-${site.id}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1447,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 9\n      }, this), renderPagination()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1166,\n    columnNumber: 5\n  }, this);\n};\n_s(Sites, \"mwPnj1pWqyiMZUktatHStA+WM2Y=\", false, function () {\n  return [usePoles];\n});\n_c = Sites;\nexport default Sites;\nvar _c;\n$RefreshReg$(_c, \"Sites\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","db","collection","getDocs","addDoc","updateDoc","deleteDoc","doc","getDoc","query","limit","startAfter","orderBy","setDoc","getDocsFromServer","where","disableNetwork","enableNetwork","geocodeAddress","PoleSelector","PoleFilter","usePoles","jsxDEV","_jsxDEV","Fragment","_Fragment","disableStructuralAndChronologicalTracking","console","log","error","SITE_TYPES","Sites","_s","sites","setSites","loading","setLoading","setError","geocodingStatus","setGeocodingStatus","editMode","setEditMode","selectedSites","setSelectedSites","editingSites","setEditingSites","selectAll","setSelectAll","newSites","setNewSites","quickSearch","setQuickSearch","filteredSites","setFilteredSites","selectedPole","setSelectedPole","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","itemsPerPageOptions","poles","getPoleNameById","poleId","pole","find","p","id","nom","fetchSites","map","site","length","trim","results","filter","searchTerm","toLowerCase","includes","adresse","ville","codePostal","telephone","email","type","statut","codeBarres","paginatedAndFilteredSites","filtered","Number","MAX_SAFE_INTEGER","startIndex","endIndex","Math","min","adjustedStartIndex","remainingSlots","max","adjustedEndIndex","slice","totalPages","ceil","handlePageChange","newPage","handleItemsPerPageChange","newItemsPerPage","renderPagination","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","title","option","onClick","disabled","sitesRef","LIMIT","lastDoc","allSites","hasMore","loadedCount","q","snapshot","empty","batchSites","docs","data","setTimeout","handleSelectAllChange","geocodeSelectedSites","alert","updatedEditingSites","successCount","failCount","currentCount","cacheHitCount","siteId","warn","addressParts","Boolean","fullAddress","join","coordinates","latitude","longitude","Promise","resolve","selectedIdsMap","i","saveSuccessCount","saveErrorCount","editedSite","siteIdString","String","siteRef","docSnap","updateData","exists","updateError","updatedSites","push","toggleEditMode","editingSitesObj","forEach","handleSave","errorCount","newSitesAdded","newSite","siteData","docRef","newSiteWithId","addError","isEqual","obj1","obj2","keys","Set","Object","key","Array","isArray","every","val","index","handleDelete","sitesToDelete","testSite","deleteSpecificTestSite","querySnapshot","deletedCount","docSnapshot","docId","ref","deleteError","poleQuery","poleSnapshot","size","testQuery","testSnapshot","exactQuery","exactSnapshot","allSitesQuery","allSitesSnapshot","foundProblematicSite","removeDuplicateSites","window","confirm","sitesByName","Map","_data$nom","name","_sitesByName$get","normalizedName","replace","has","set","get","duplicateNames","totalDuplicatesRemoved","processedCount","BATCH_SIZE","batch","all","sort","a","b","aHasCoords","bHasCoords","aHasFullAddress","bHasFullAddress","aFieldCount","bFieldCount","localeCompare","siteToKeep","sitesToRemove","toggleSiteSelection","handleCellChange","field","addNewSiteRow","Date","now","tournees","codesPorte","coordonnees","prevNewSites","firstInput","document","querySelector","focus","handleNewSiteChange","updatedNewSites","removeNewSiteRow","_","handlePoleChange","style","backgroundColor","color","fontWeight","marginLeft","marginTop","placeholder","onPoleChange","label","overflowX","checked","_site$tournees","display","width","showSearch","allowClear","complementAdresse","split","s","horairesLV","horairesSamedi","_editingSites$site$id","_editingSites$site$id2","_editingSites$site$id3","_editingSites$site$id4","_editingSites$site$id5","_editingSites$site$id6","_editingSites$site$id7","_editingSites$site$id8","_editingSites$site$id9","_site$tournees2","_editingSites$site$id10","_editingSites$site$id11","_editingSites$site$id12","_editingSites$site$id13","pattern","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/Sites.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { db } from '../config/firebase';\r\nimport { \r\n  collection, \r\n  getDocs, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  doc, \r\n  getDoc, \r\n  query, \r\n  limit, \r\n  startAfter, \r\n  orderBy, \r\n  setDoc, \r\n  getDocsFromServer, \r\n  where,\r\n  DocumentData,\r\n  QueryDocumentSnapshot,\r\n  QuerySnapshot,\r\n  DocumentSnapshot,\r\n  getFirestore,\r\n  enableIndexedDbPersistence,\r\n  disableNetwork,\r\n  enableNetwork\r\n} from 'firebase/firestore';\r\nimport { geocodeAddress } from '../utils/geocoding';\r\nimport { Site } from '../types/index';\r\nimport './EditMode.css';\r\nimport './Sites.css';\r\nimport PoleSelector from './PoleSelector';\r\nimport PoleFilter from './PoleFilter';\r\nimport { usePoles } from '../services/PoleService';\r\n\r\n// Désactiver le suivi de structure et de chronologie pour améliorer les performances\r\nconst disableStructuralAndChronologicalTracking = async () => {\r\n  try {\r\n    // Désactiver temporairement le réseau pour éviter les requêtes pendant la configuration\r\n    await disableNetwork(db);\r\n    console.log(\"Réseau temporairement désactivé pour configuration\");\r\n    \r\n    // Réactiver le réseau avec les optimisations\r\n    await enableNetwork(db);\r\n    console.log(\"Réseau réactivé avec optimisations de performance\");\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'optimisation de Firestore:\", error);\r\n  }\r\n};\r\n\r\n// Appeler la fonction d'optimisation au chargement du composant\r\ndisableStructuralAndChronologicalTracking();\r\n\r\n// Ajouter la constante des types de sites disponibles\r\nconst SITE_TYPES = [\r\n  'Laboratoire',\r\n  'Clinique',\r\n  'Plateau technique',\r\n  'Point de collecte',\r\n  'Etablissement de santé',\r\n  'Ehpad',\r\n  'Vétérinaire'\r\n];\r\n\r\nconst Sites: React.FC = () => {\r\n  const [sites, setSites] = useState<Site[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [geocodingStatus, setGeocodingStatus] = useState<string | null>(null);\r\n\r\n  // État pour le mode édition et la sélection multiple\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [selectedSites, setSelectedSites] = useState<string[]>([]);\r\n  const [editingSites, setEditingSites] = useState<{[key: string]: Site}>({});\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  \r\n  // Ajouter un nouvel état pour les nouveaux sites temporaires\r\n  const [newSites, setNewSites] = useState<Partial<Site>[]>([]);\r\n  \r\n  // État pour la recherche rapide\r\n  const [quickSearch, setQuickSearch] = useState<string>('');\r\n  const [filteredSites, setFilteredSites] = useState<Site[]>([]);\r\n\r\n  // Ajout du filtre par pôle\r\n  const [selectedPole, setSelectedPole] = useState<string>('');\r\n\r\n  // Nouveaux états pour la pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(20); // Par défaut 20 éléments\r\n  \r\n  // Options pour le nombre d'éléments par page\r\n  const itemsPerPageOptions = [20, 30, 50, 100, 'Tous'];\r\n\r\n  // Ajoutez le hook usePoles\r\n  const { poles } = usePoles();\r\n\r\n  // Fonction pour convertir ID de pôle en nom\r\n  const getPoleNameById = (poleId: string | undefined): string => {\r\n    if (!poleId) return '';\r\n    const pole = poles.find(p => p.id === poleId);\r\n    return pole ? pole.nom : poleId;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSites();\r\n  }, []);\r\n\r\n  // Effet pour gérer la sélection/désélection de tous les sites\r\n  useEffect(() => {\r\n    if (selectAll) {\r\n      setSelectedSites(sites.map(site => site.id));\r\n    } else if (selectedSites.length === sites.length) {\r\n      // Si tous les sites sont sélectionnés mais que selectAll est false, cela signifie que l'utilisateur a désélectionné\r\n      setSelectedSites([]);\r\n    }\r\n  }, [selectAll]);\r\n  \r\n  // Initialiser les sites filtrés au chargement\r\n  useEffect(() => {\r\n    setFilteredSites(sites);\r\n  }, [sites]);\r\n\r\n  // Effet pour filtrer les sites en fonction de la recherche rapide\r\n  useEffect(() => {\r\n    if (!quickSearch.trim() && !selectedPole) {\r\n      // Si la recherche est vide et aucun pôle sélectionné, afficher tous les sites\r\n      setFilteredSites(sites);\r\n      return;\r\n    }\r\n\r\n    let results = sites;\r\n\r\n    // Filtrer par pôle si un pôle est sélectionné\r\n    if (selectedPole) {\r\n      results = results.filter(site => site.pole === selectedPole);\r\n    }\r\n\r\n    // Ensuite filtrer par recherche rapide\r\n    if (quickSearch.trim()) {\r\n      const searchTerm = quickSearch.toLowerCase().trim();\r\n      results = results.filter(site => {\r\n        // Rechercher dans tous les champs textuels du site\r\n        return (\r\n          (site.nom || '').toLowerCase().includes(searchTerm) ||\r\n          (site.adresse || '').toLowerCase().includes(searchTerm) ||\r\n          (site.ville || '').toLowerCase().includes(searchTerm) ||\r\n          (site.codePostal || '').toLowerCase().includes(searchTerm) ||\r\n          (site.telephone || '').toLowerCase().includes(searchTerm) ||\r\n          (site.email || '').toLowerCase().includes(searchTerm) ||\r\n          (site.type || '').toLowerCase().includes(searchTerm) ||\r\n          (site.statut || '').toLowerCase().includes(searchTerm) ||\r\n          (site.codeBarres || '').toLowerCase().includes(searchTerm)\r\n        );\r\n      });\r\n    }\r\n\r\n    setFilteredSites(results);\r\n  }, [quickSearch, sites, selectedPole]);\r\n\r\n  // Pagination et filtrage des sites\r\n  const paginatedAndFilteredSites = useMemo(() => {\r\n    // D'abord filtrer\r\n    const filtered = filteredSites;\r\n    \r\n    // Si itemsPerPage est très grand (option \"Tous\"), retourner tous les sites filtrés\r\n    if (itemsPerPage === Number.MAX_SAFE_INTEGER) {\r\n      return filtered;\r\n    }\r\n    \r\n    // Sinon, paginer normalement\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = Math.min(startIndex + itemsPerPage, filtered.length);\r\n    \r\n    // S'il y a des nouveaux sites en mode édition, réduire le nombre de sites existants affichés\r\n    if (editMode && newSites.length > 0) {\r\n      const adjustedStartIndex = Math.min(startIndex, filtered.length);\r\n      const remainingSlots = Math.max(0, itemsPerPage - newSites.length);\r\n      const adjustedEndIndex = Math.min(adjustedStartIndex + remainingSlots, filtered.length);\r\n      \r\n      return filtered.slice(adjustedStartIndex, adjustedEndIndex);\r\n    }\r\n    \r\n    return filtered.slice(startIndex, endIndex);\r\n  }, [filteredSites, currentPage, itemsPerPage, editMode, newSites.length]);\r\n\r\n  // Calculer le nombre total de pages\r\n  const totalPages = Math.ceil(filteredSites.length / itemsPerPage);\r\n\r\n  // Fonction pour changer de page\r\n  const handlePageChange = (newPage: number) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Fonction pour changer le nombre d'éléments par page\r\n  const handleItemsPerPageChange = (newItemsPerPage: number | string) => {\r\n    if (newItemsPerPage === 'Tous') {\r\n      // Si \"Tous\" est sélectionné, définir le nombre d'éléments par page à un nombre très élevé\r\n      // pour afficher tous les sites sur une seule page\r\n      setItemsPerPage(Number.MAX_SAFE_INTEGER);\r\n    } else {\r\n      setItemsPerPage(Number(newItemsPerPage));\r\n    }\r\n    // Réinitialiser à la première page quand on change le nombre d'éléments\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  // Rendu de la pagination\r\n  const renderPagination = () => {\r\n    return (\r\n      <div className=\"pagination-container\">\r\n        <div className=\"items-per-page\">\r\n          <label>Éléments par page : </label>\r\n          <select \r\n            value={itemsPerPage === Number.MAX_SAFE_INTEGER ? 'Tous' : itemsPerPage} \r\n            onChange={(e) => handleItemsPerPageChange(e.target.value)}\r\n            title=\"Nombre d'éléments par page\"\r\n            aria-label=\"Nombre d'éléments par page\"\r\n          >\r\n            {itemsPerPageOptions.map(option => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"pagination-controls\">\r\n          <button \r\n            onClick={() => handlePageChange(currentPage - 1)} \r\n            disabled={currentPage === 1 || itemsPerPage === Number.MAX_SAFE_INTEGER}\r\n          >\r\n            Précédent\r\n          </button>\r\n          \r\n          <span className=\"page-info\">\r\n            {itemsPerPage === Number.MAX_SAFE_INTEGER ? \r\n              'Tous les éléments affichés' : \r\n              `Page ${currentPage} sur ${totalPages}`\r\n            }\r\n          </span>\r\n          \r\n          <button \r\n            onClick={() => handlePageChange(currentPage + 1)} \r\n            disabled={currentPage === totalPages || itemsPerPage === Number.MAX_SAFE_INTEGER}\r\n          >\r\n            Suivant\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"total-results\">\r\n          Total : {filteredSites.length} résultat(s)\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const fetchSites = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setGeocodingStatus(\"Chargement des sites...\");\r\n      \r\n      console.log(\"Récupération des sites depuis Firestore avec optimisations\");\r\n      \r\n      // Récupérer les sites depuis Firestore avec pagination optimisée\r\n      const sitesRef = collection(db, 'sites');\r\n      const LIMIT = 250; // Augmenter la taille du lot pour réduire le nombre de requêtes\r\n      \r\n      let lastDoc: QueryDocumentSnapshot<DocumentData> | null = null;\r\n      let allSites: Array<Site> = [];\r\n      let hasMore = true;\r\n      let loadedCount = 0;\r\n      \r\n      while (hasMore) {\r\n        // Construire la requête avec pagination\r\n        let q;\r\n        if (lastDoc) {\r\n          q = query(sitesRef, orderBy('nom'), startAfter(lastDoc), limit(LIMIT));\r\n        } else {\r\n          q = query(sitesRef, orderBy('nom'), limit(LIMIT));\r\n        }\r\n        \r\n        // Utiliser getDocsFromServer pour forcer une requête au serveur sans utiliser le cache\r\n        const snapshot: QuerySnapshot<DocumentData> = await getDocsFromServer(q);\r\n        \r\n        if (snapshot.empty) {\r\n          hasMore = false;\r\n          break;\r\n        }\r\n        \r\n        // Optimiser la transformation des données\r\n        const batchSites = snapshot.docs.map((doc: QueryDocumentSnapshot<DocumentData>) => {\r\n          const data = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            ...data\r\n          } as Site;\r\n        });\r\n        \r\n        allSites = [...allSites, ...batchSites];\r\n        loadedCount += batchSites.length;\r\n        \r\n        // Mettre à jour le statut de chargement moins fréquemment\r\n        if (loadedCount % 250 === 0 || snapshot.docs.length < LIMIT) {\r\n          setGeocodingStatus(`Chargement des sites... ${loadedCount} chargés`);\r\n        }\r\n        \r\n        // Mettre à jour le dernier document pour la pagination\r\n        lastDoc = snapshot.docs[snapshot.docs.length - 1];\r\n        \r\n        // Vérifier s'il y a plus de documents à récupérer\r\n        if (snapshot.docs.length < LIMIT) {\r\n          hasMore = false;\r\n        }\r\n      }\r\n      \r\n      console.log(`${allSites.length} sites chargés depuis Firestore`);\r\n      setSites(allSites);\r\n      \r\n      // Effacer les messages de statut après un court délai\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 1000);\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des sites:', error);\r\n      setError('Erreur lors de la récupération des données');\r\n      setSites([]);\r\n      setGeocodingStatus(null);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour gérer la sélection/désélection de tous les sites\r\n  const handleSelectAllChange = () => {\r\n    setSelectAll(!selectAll);\r\n  };\r\n\r\n  // Fonction pour géocoder tous les sites sélectionnés\r\n  const geocodeSelectedSites = async () => {\r\n    if (selectedSites.length === 0) {\r\n      alert('Veuillez sélectionner au moins un site à géocoder');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setGeocodingStatus('Géocodage en cours...');\r\n      \r\n      const updatedEditingSites = { ...editingSites };\r\n      let successCount = 0;\r\n      let failCount = 0;\r\n      let currentCount = 0;\r\n      let cacheHitCount = 0;\r\n      \r\n      // Traiter chaque site sélectionné\r\n      for (const siteId of selectedSites) {\r\n        const site = editingSites[siteId];\r\n        currentCount++;\r\n        \r\n        if (site) {\r\n          setGeocodingStatus(`Géocodage en cours... (${currentCount}/${selectedSites.length})`);\r\n          \r\n          // Vérifier si les données minimales sont disponibles\r\n          if (!site.nom && !site.adresse) {\r\n            failCount++;\r\n            console.warn(`Données minimales manquantes pour le site: ${site.nom || 'Sans nom'}`);\r\n            continue;\r\n          }\r\n          \r\n          // Construire une adresse complète avec les informations disponibles\r\n          const addressParts = [\r\n            site.nom,\r\n            site.adresse,\r\n            site.ville,\r\n            site.codePostal\r\n          ].filter(Boolean);\r\n          \r\n          const fullAddress = addressParts.join(', ');\r\n          \r\n          console.log(`Tentative de géocodage pour \"${site.nom}\" avec l'adresse: \"${fullAddress}\"`);\r\n          \r\n          const coordinates = await geocodeAddress(\r\n            site.nom || '',\r\n            site.adresse || '',\r\n            site.ville || '',\r\n            site.codePostal || ''\r\n          );\r\n          \r\n          if (coordinates) {\r\n            // Si les coordonnées n'ont pas changé, c'est probablement un hit de cache\r\n            if (site.latitude === coordinates.latitude && site.longitude === coordinates.longitude) {\r\n              cacheHitCount++;\r\n            }\r\n            \r\n            updatedEditingSites[siteId] = {\r\n              ...site,\r\n              latitude: coordinates.latitude,\r\n              longitude: coordinates.longitude\r\n            };\r\n            successCount++;\r\n            console.log(`Géocodage réussi pour \"${site.nom}\": Lat=${coordinates.latitude}, Lon=${coordinates.longitude}`);\r\n          } else {\r\n            failCount++;\r\n            console.warn(`Échec du géocodage pour le site: ${site.nom || 'Sans nom'}`);\r\n          }\r\n        } else {\r\n          failCount++;\r\n          console.warn(`Site non trouvé pour l'ID: ${siteId}`);\r\n        }\r\n        \r\n        // Pause pour éviter de dépasser les limites de l'API, sauf pour le dernier élément\r\n        if (currentCount < selectedSites.length) {\r\n          await new Promise(resolve => setTimeout(resolve, 500)); // Réduit à 0.5 seconde grâce au cache\r\n        }\r\n      }\r\n      \r\n      setEditingSites(updatedEditingSites);\r\n      setGeocodingStatus(`Géocodage terminé : ${successCount} réussis (dont ${cacheHitCount} depuis le cache), ${failCount} échoués. Enregistrement en cours...`);\r\n      \r\n      // Enregistrer automatiquement les modifications après le géocodage\r\n      if (successCount > 0) {\r\n        console.log(\"Enregistrement automatique après géocodage...\");\r\n        \r\n        // Créer un objet de recherche pour les IDs sélectionnés\r\n        const selectedIdsMap: Record<string, boolean> = {};\r\n        for (let i = 0; i < selectedSites.length; i++) {\r\n          selectedIdsMap[selectedSites[i]] = true;\r\n        }\r\n        \r\n        // Mettre à jour les documents Firestore\r\n        let saveSuccessCount = 0;\r\n        let saveErrorCount = 0;\r\n        \r\n        // Traiter les sites géocodés\r\n        for (let i = 0; i < selectedSites.length; i++) {\r\n          const siteId = selectedSites[i];\r\n          const editedSite = updatedEditingSites[siteId];\r\n          \r\n          if (!editedSite) {\r\n            console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\r\n            continue;\r\n          }\r\n          \r\n          try {\r\n            // Convertir l'ID en chaîne de caractères pour Firestore\r\n            const siteIdString = String(siteId);\r\n            console.log(`Sauvegarde des coordonnées pour le site ${siteIdString} (${editedSite.nom})...`);\r\n            \r\n            const siteRef = doc(db, 'sites', siteIdString);\r\n            \r\n            // Vérifier si le document existe\r\n            const docSnap = await getDoc(siteRef);\r\n            \r\n            // Extraire l'ID avant la mise à jour\r\n            const { id, ...updateData } = editedSite;\r\n            \r\n            if (docSnap.exists()) {\r\n              // Le document existe, on peut le mettre à jour\r\n              await updateDoc(siteRef, updateData);\r\n              console.log(`Coordonnées du site ${siteIdString} (${editedSite.nom}) enregistrées avec succès`);\r\n              saveSuccessCount++;\r\n            } else {\r\n              // Le document n'existe pas, on doit le créer\r\n              console.log(`Le site ${siteIdString} n'existe pas, création avec coordonnées...`);\r\n              await setDoc(siteRef, updateData);\r\n              console.log(`Site ${siteIdString} créé avec coordonnées`);\r\n              saveSuccessCount++;\r\n            }\r\n          } catch (updateError) {\r\n            console.error(`Erreur lors de la sauvegarde des coordonnées du site ${siteId}:`, updateError);\r\n            saveErrorCount++;\r\n          }\r\n        }\r\n        \r\n        // Mettre à jour l'état local\r\n        const updatedSites: Site[] = [];\r\n        \r\n        // Créer une nouvelle liste de sites avec les modifications\r\n        for (let i = 0; i < sites.length; i++) {\r\n          const site = sites[i];\r\n          const siteId = site.id;\r\n          \r\n          if (selectedIdsMap[siteId] && updatedEditingSites[siteId]) {\r\n            // Si le site est sélectionné et modifié, utiliser la version modifiée\r\n            updatedSites.push({ ...updatedEditingSites[siteId] });\r\n          } else {\r\n            // Sinon, garder le site inchangé\r\n            updatedSites.push(site);\r\n          }\r\n        }\r\n        \r\n        // Mettre à jour les états\r\n        setSites(updatedSites);\r\n        setFilteredSites(updatedSites);\r\n        \r\n        setGeocodingStatus(`Géocodage et enregistrement terminés : ${successCount} sites géocodés, ${saveSuccessCount} sites enregistrés, ${saveErrorCount} erreurs`);\r\n      }\r\n      \r\n      // Masquer le statut après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors du géocodage:', error);\r\n      setGeocodingStatus(`Erreur lors du géocodage: ${error}`);\r\n      \r\n      // Masquer le message d'erreur après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleEditMode = () => {\r\n    if (editMode) {\r\n      // Si on quitte le mode édition, réinitialiser les sélections et les modifications\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setSelectAll(false);\r\n      setNewSites([]);\r\n      \r\n      // Rafraîchir les données depuis Firebase\r\n      fetchSites();\r\n    } else {\r\n      // Si on entre en mode édition, initialiser les sites en édition\r\n      const editingSitesObj: {[key: string]: Site} = {};\r\n      filteredSites.forEach(site => {\r\n        editingSitesObj[site.id] = { ...site };\r\n      });\r\n      setEditingSites(editingSitesObj);\r\n    }\r\n    \r\n    // Inverser le mode édition\r\n    setEditMode(!editMode);\r\n    \r\n    // Réinitialiser la recherche rapide et les filtres\r\n    setQuickSearch('');\r\n    setSelectedPole('');\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    // Ne rien faire si aucun site n'est sélectionné et pas de nouveaux sites\r\n    if (selectedSites.length === 0 && newSites.length === 0) {\r\n      alert('Veuillez sélectionner au moins un site à enregistrer ou créer un nouveau site');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(\"Début de la sauvegarde...\");\r\n      console.log(\"Sites sélectionnés:\", selectedSites);\r\n      console.log(\"Nouveaux sites à créer:\", newSites.length);\r\n      \r\n      // Créer un objet de recherche pour les IDs sélectionnés\r\n      const selectedIdsMap: Record<string, boolean> = {};\r\n      for (let i = 0; i < selectedSites.length; i++) {\r\n        selectedIdsMap[selectedSites[i]] = true;\r\n      }\r\n      \r\n      // Mettre à jour les documents Firestore\r\n      let successCount = 0;\r\n      let errorCount = 0;\r\n      let newSitesAdded = 0;\r\n      \r\n      // 1. D'abord, traiter les sites existants sélectionnés\r\n      for (let i = 0; i < selectedSites.length; i++) {\r\n        const siteId = selectedSites[i];\r\n        const editedSite = editingSites[siteId];\r\n        \r\n        if (!editedSite) {\r\n          console.log(`Site ${siteId} non trouvé dans editingSites, ignoré`);\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          // Convertir l'ID en chaîne de caractères pour Firestore\r\n          const siteIdString = String(siteId);\r\n          console.log(`Conversion de l'ID ${siteId} (${typeof siteId}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\r\n          \r\n          const siteRef = doc(db, 'sites', siteIdString);\r\n          \r\n          // Vérifier si le document existe\r\n          const docSnap = await getDoc(siteRef);\r\n          \r\n          // Extraire l'ID avant la mise à jour\r\n          const { id, ...updateData } = editedSite;\r\n          \r\n          if (docSnap.exists()) {\r\n            // Le document existe, on peut le mettre à jour\r\n            console.log(`Mise à jour du site ${siteIdString}...`);\r\n            await updateDoc(siteRef, updateData);\r\n            console.log(`Site ${siteIdString} mis à jour avec succès`);\r\n          } else {\r\n            // Le document n'existe pas, on doit le créer\r\n            console.log(`Le site ${siteIdString} n'existe pas, création...`);\r\n            await setDoc(siteRef, updateData);\r\n            console.log(`Site ${siteIdString} créé avec succès`);\r\n          }\r\n          \r\n          successCount++;\r\n        } catch (updateError) {\r\n          console.error(`Erreur lors de la mise à jour du site ${siteId}:`, updateError);\r\n          errorCount++;\r\n        }\r\n      }\r\n      \r\n      // 2. Ensuite, traiter les nouveaux sites temporaires\r\n      for (let i = 0; i < newSites.length; i++) {\r\n        const newSite = newSites[i];\r\n        \r\n        // Vérifier que le site a au moins un nom (champ obligatoire)\r\n        if (!newSite.nom || newSite.nom.trim() === '') {\r\n          console.log(`Nouveau site #${i+1} sans nom, ignoré`);\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          // Supprimer l'ID temporaire et préparer les données pour l'ajout\r\n          const { id, ...siteData } = newSite;\r\n          \r\n          console.log(`Ajout du nouveau site \"${newSite.nom}\"...`);\r\n          \r\n          // Utiliser addDoc pour générer un nouvel ID automatiquement\r\n          const sitesRef = collection(db, 'sites');\r\n          const docRef = await addDoc(sitesRef, siteData);\r\n          \r\n          console.log(`Nouveau site \"${newSite.nom}\" ajouté avec l'ID: ${docRef.id}`);\r\n          \r\n          // Ajouter le nouveau site à la liste des sites avec son ID réel\r\n          const newSiteWithId = {\r\n            id: docRef.id,\r\n            ...siteData\r\n          };\r\n          \r\n          // Ajouter le nouveau site à la liste des sites\r\n          sites.push(newSiteWithId as Site);\r\n          \r\n          newSitesAdded++;\r\n          successCount++;\r\n        } catch (addError) {\r\n          console.error(`Erreur lors de l'ajout du nouveau site \"${newSite.nom}\":`, addError);\r\n          errorCount++;\r\n        }\r\n      }\r\n      \r\n      console.log(`Sauvegarde terminée: ${successCount} succès (dont ${newSitesAdded} nouveaux sites), ${errorCount} erreurs`);\r\n      \r\n      // Mettre à jour l'état local\r\n      const updatedSites: Site[] = [];\r\n      \r\n      // Créer une nouvelle liste de sites avec les modifications\r\n      for (let i = 0; i < sites.length; i++) {\r\n        const site = sites[i];\r\n        const siteId = site.id;\r\n        \r\n        if (selectedIdsMap[siteId] && editingSites[siteId]) {\r\n          // Si le site est sélectionné et modifié, utiliser la version modifiée\r\n          updatedSites.push({ ...editingSites[siteId] });\r\n        } else {\r\n          // Sinon, garder le site inchangé\r\n          updatedSites.push(site);\r\n        }\r\n      }\r\n      \r\n      // Mettre à jour les états\r\n      setSites(updatedSites);\r\n      setFilteredSites(updatedSites);\r\n      \r\n      // Afficher un message de confirmation\r\n      alert(`${successCount} sites mis à jour avec succès${newSitesAdded > 0 ? `, ${newSitesAdded} nouveaux sites ajoutés` : ''}${errorCount > 0 ? `, ${errorCount} erreurs` : ''}`);\r\n\r\n      // Réinitialiser les états\r\n      setEditMode(false);\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setNewSites([]);\r\n      setSelectAll(false);\r\n\r\n    } catch (error) {\r\n      console.error('Erreur globale lors de la sauvegarde:', error);\r\n      alert('Une erreur est survenue lors de la sauvegarde');\r\n    } finally {\r\n      setLoading(false);\r\n      setGeocodingStatus(null);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour comparer des objets\r\n  const isEqual = (obj1: any, obj2: any): boolean => {\r\n    // Comparer les champs de base\r\n    const keys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);\r\n    \r\n    for (const key of keys) {\r\n      // Gestion spéciale pour les tableaux (comme tournees)\r\n      if (Array.isArray(obj1[key]) && Array.isArray(obj2[key])) {\r\n        if (obj1[key].length !== obj2[key].length) return false;\r\n        if (!obj1[key].every((val, index) => val === obj2[key][index])) return false;\r\n      } \r\n      // Comparaison standard pour les autres types\r\n      else if (obj1[key] !== obj2[key]) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Supprimer les sites sélectionnés sans messages\r\n  const handleDelete = async () => {\r\n    if (selectedSites.length === 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Tentative de suppression de ${selectedSites.length} sites:`, selectedSites);\r\n      \r\n      // Récupérer les sites sélectionnés à partir de l'état sites\r\n      const sitesToDelete = sites.filter(site => selectedSites.includes(site.id));\r\n      console.log(\"Sites à supprimer (détails complets):\", sitesToDelete);\r\n      \r\n      if (sitesToDelete.length === 0) {\r\n        console.warn(\"Aucun site trouvé pour les IDs sélectionnés\");\r\n        setLoading(false); // Désactiver le chargement si aucun site à supprimer\r\n        return;\r\n      }\r\n      \r\n      // Rechercher spécifiquement le site \"SITE 000 TEST\" ou \"Périphérique TEST\" s'il est dans la liste\r\n      const testSite = sitesToDelete.find(site => \r\n        site.nom === \"SITE 000 TEST\" || \r\n        site.nom.includes(\"TEST\") || \r\n        site.nom.includes(\"Périphérique\") || \r\n        site.pole === \"Périphérique\"\r\n      );\r\n      \r\n      if (testSite) {\r\n        console.log(\"Site TEST/Périphérique trouvé pour suppression:\", testSite);\r\n        \r\n        // Recherche spécifique pour le site problématique\r\n        await deleteSpecificTestSite();\r\n      }\r\n      \r\n      // Supprimer les sites sélectionnés un par un\r\n      for (const site of sitesToDelete) {\r\n        try {\r\n          // Ignorer le site TEST/Périphérique car il est traité séparément\r\n          if (site.nom.includes(\"TEST\") || site.nom.includes(\"Périphérique\") || site.pole === \"Périphérique\") {\r\n            console.log(`Site ${site.nom} traité séparément, ignoré dans la boucle principale`);\r\n            continue;\r\n          }\r\n          \r\n          console.log(`Traitement de la suppression pour le site:`, site);\r\n          \r\n          // Convertir l'ID en chaîne de caractères pour Firestore\r\n          const siteIdString = String(site.id);\r\n          console.log(`Conversion de l'ID ${site.id} (${typeof site.id}) en chaîne: ${siteIdString} (${typeof siteIdString})`);\r\n          \r\n          // Vérifier si le site existe dans Firestore avant de le supprimer\r\n          const siteRef = doc(db, 'sites', siteIdString);\r\n          const docSnap = await getDoc(siteRef);\r\n          \r\n          if (docSnap.exists()) {\r\n            console.log(`Site ${siteIdString} (${site.nom}) trouvé dans Firestore, suppression...`);\r\n            await deleteDoc(siteRef);\r\n            console.log(`Site ${siteIdString} (${site.nom}) supprimé avec succès`);\r\n          } else {\r\n            console.warn(`Site ${siteIdString} (${site.nom}) non trouvé dans Firestore avec cet ID`);\r\n            \r\n            // Si le site n'est pas trouvé avec son ID, essayer de le trouver par son nom\r\n            console.log(`Recherche du site \"${site.nom}\" par nom dans Firestore...`);\r\n            \r\n            const sitesRef = collection(db, 'sites');\r\n            const q = query(sitesRef, where('nom', '==', site.nom));\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            if (querySnapshot.empty) {\r\n              console.warn(`Aucun site trouvé avec le nom \"${site.nom}\" dans Firestore`);\r\n              continue;\r\n            }\r\n            \r\n            // Supprimer tous les documents trouvés (normalement un seul)\r\n            let deletedCount = 0;\r\n            for (const docSnapshot of querySnapshot.docs) {\r\n              const docId = docSnapshot.id;\r\n              console.log(`Site trouvé avec l'ID Firestore: ${docId}, suppression...`);\r\n              \r\n              await deleteDoc(docSnapshot.ref);\r\n              \r\n              console.log(`Site \"${site.nom}\" (ID Firestore: ${docId}) supprimé avec succès`);\r\n              deletedCount++;\r\n            }\r\n            \r\n            console.log(`${deletedCount} document(s) supprimé(s) pour le site \"${site.nom}\"`);\r\n          }\r\n        } catch (deleteError) {\r\n          console.error(`Erreur lors de la suppression du site \"${site.nom}\":`, deleteError);\r\n        }\r\n      }\r\n      \r\n      console.log(\"Rechargement des sites depuis Firestore...\");\r\n      // Recharger les données depuis Firestore pour s'assurer que nous avons les données les plus récentes\r\n      await fetchSites();\r\n      \r\n      // Réinitialiser les états\r\n      setEditMode(false);\r\n      setSelectedSites([]);\r\n      setEditingSites({});\r\n      setSelectAll(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n    } finally {\r\n      // S'assurer que l'état de chargement est toujours désactivé\r\n      setLoading(false);\r\n      // Effacer tout message de statut\r\n      setGeocodingStatus(null);\r\n    }\r\n  };\r\n\r\n  // Fonction spécifique pour supprimer le site problématique \"Périphérique TEST\"\r\n  const deleteSpecificTestSite = async () => {\r\n    try {\r\n      console.log(\"Recherche spécifique du site problématique 'Périphérique TEST'...\");\r\n      \r\n      const sitesRef = collection(db, 'sites');\r\n      \r\n      // Recherche par pole \"Périphérique\"\r\n      console.log(\"Recherche par pole 'Périphérique'...\");\r\n      const poleQuery = query(sitesRef, where('pole', '==', 'Périphérique'));\r\n      const poleSnapshot = await getDocs(poleQuery);\r\n      \r\n      if (!poleSnapshot.empty) {\r\n        console.log(`${poleSnapshot.size} sites avec pole 'Périphérique' trouvés`);\r\n        \r\n        for (const docSnapshot of poleSnapshot.docs) {\r\n          const siteData = docSnapshot.data();\r\n          console.log(`Site trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\r\n          \r\n          if (siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST')) {\r\n            console.log(`Suppression du site problématique: ${docSnapshot.id} (${siteData.nom})`);\r\n            await deleteDoc(docSnapshot.ref);\r\n            console.log(`Site problématique ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec pole 'Périphérique' trouvé\");\r\n      }\r\n      \r\n      // Recherche par nom contenant \"TEST\"\r\n      console.log(\"Recherche par nom contenant 'TEST'...\");\r\n      const testQuery = query(sitesRef, where('nom', '>=', 'TEST'), where('nom', '<=', 'TEST\\uf8ff'));\r\n      const testSnapshot = await getDocs(testQuery);\r\n      \r\n      if (!testSnapshot.empty) {\r\n        console.log(`${testSnapshot.size} sites contenant 'TEST' dans le nom trouvés`);\r\n        \r\n        for (const docSnapshot of testSnapshot.docs) {\r\n          const siteData = docSnapshot.data();\r\n          console.log(`Site TEST trouvé: ID=${docSnapshot.id}, Nom=${siteData.nom}`);\r\n          \r\n          console.log(`Suppression du site TEST: ${docSnapshot.id} (${siteData.nom})`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site TEST ${docSnapshot.id} (${siteData.nom}) supprimé avec succès`);\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec 'TEST' dans le nom trouvé\");\r\n      }\r\n      \r\n      // Recherche par nom exact \"SITE 000 TEST\"\r\n      console.log(\"Recherche par nom exact 'SITE 000 TEST'...\");\r\n      const exactQuery = query(sitesRef, where('nom', '==', 'SITE 000 TEST'));\r\n      const exactSnapshot = await getDocs(exactQuery);\r\n      \r\n      if (!exactSnapshot.empty) {\r\n        console.log(`${exactSnapshot.size} sites avec nom exact 'SITE 000 TEST' trouvés`);\r\n        \r\n        for (const docSnapshot of exactSnapshot.docs) {\r\n          console.log(`Suppression du site exact: ${docSnapshot.id} (SITE 000 TEST)`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site exact ${docSnapshot.id} (SITE 000 TEST) supprimé avec succès`);\r\n        }\r\n      } else {\r\n        console.log(\"Aucun site avec nom exact 'SITE 000 TEST' trouvé\");\r\n      }\r\n      \r\n      // Dernière tentative: recherche de tous les sites et filtrage manuel\r\n      console.log(\"Recherche manuelle de tous les sites...\");\r\n      const allSitesQuery = query(sitesRef, limit(1000));\r\n      const allSitesSnapshot = await getDocs(allSitesQuery);\r\n      \r\n      let foundProblematicSite = false;\r\n      \r\n      for (const docSnapshot of allSitesSnapshot.docs) {\r\n        const siteData = docSnapshot.data();\r\n        \r\n        // Vérifier si c'est le site problématique\r\n        if ((siteData.pole === 'Périphérique' || siteData.pole === 'TEST') && \r\n            (siteData.nom && (siteData.nom.includes('TEST') || siteData.nom === 'SITE 000 TEST'))) {\r\n          foundProblematicSite = true;\r\n          console.log(`Site problématique trouvé par recherche manuelle: ID=${docSnapshot.id}, Nom=${siteData.nom}, Pole=${siteData.pole}`);\r\n          \r\n          console.log(`Suppression du site problématique: ${docSnapshot.id}`);\r\n          await deleteDoc(docSnapshot.ref);\r\n          console.log(`Site problématique ${docSnapshot.id} supprimé avec succès`);\r\n        }\r\n      }\r\n      \r\n      if (!foundProblematicSite) {\r\n        console.log(\"Aucun site problématique trouvé par recherche manuelle\");\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression spécifique du site problématique:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Optimiser la fonction de suppression des doublons\r\n  const removeDuplicateSites = async () => {\r\n    if (!window.confirm(\"Cette opération va rechercher et supprimer les sites en double dans la base de données. Continuer ?\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setGeocodingStatus(\"Recherche des doublons en cours...\");\r\n      \r\n      // Récupérer tous les sites depuis Firestore de manière optimisée\r\n      const sitesRef = collection(db, 'sites');\r\n      const snapshot = await getDocsFromServer(query(sitesRef, limit(1000)));\r\n      \r\n      if (snapshot.empty) {\r\n        setGeocodingStatus(\"Aucun site trouvé dans la base de données.\");\r\n        setTimeout(() => setGeocodingStatus(null), 3000);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Utiliser une Map pour de meilleures performances\r\n      const sitesByName = new Map<string, Array<{id: string, data: any}>>();\r\n      \r\n      // Parcourir tous les sites et les regrouper par nom\r\n      snapshot.docs.forEach(doc => {\r\n        const data = doc.data();\r\n        const name = data.nom?.trim();\r\n        \r\n        if (name) {\r\n          // Normaliser le nom pour éviter les problèmes de casse et d'espaces\r\n          const normalizedName = name.toLowerCase().replace(/\\s+/g, ' ');\r\n          \r\n          if (!sitesByName.has(normalizedName)) {\r\n            sitesByName.set(normalizedName, []);\r\n          }\r\n          \r\n          sitesByName.get(normalizedName)?.push({\r\n            id: doc.id,\r\n            data: data\r\n          });\r\n        }\r\n      });\r\n      \r\n      // Identifier les noms qui ont des doublons\r\n      const duplicateNames: string[] = [];\r\n      sitesByName.forEach((sites, name) => {\r\n        if (sites.length > 1) {\r\n          duplicateNames.push(name);\r\n        }\r\n      });\r\n      \r\n      if (duplicateNames.length === 0) {\r\n        setGeocodingStatus(\"Aucun doublon trouvé dans la base de données.\");\r\n        setTimeout(() => setGeocodingStatus(null), 3000);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setGeocodingStatus(`${duplicateNames.length} sites avec doublons trouvés. Traitement en cours...`);\r\n      \r\n      let totalDuplicatesRemoved = 0;\r\n      let processedCount = 0;\r\n      \r\n      // Traiter les doublons par lots pour éviter de surcharger Firestore\r\n      const BATCH_SIZE = 10;\r\n      \r\n      for (let i = 0; i < duplicateNames.length; i += BATCH_SIZE) {\r\n        const batch = duplicateNames.slice(i, i + BATCH_SIZE);\r\n        \r\n        // Traiter chaque lot en parallèle\r\n        await Promise.all(batch.map(async (name) => {\r\n          const sites = sitesByName.get(name) || [];\r\n          console.log(`Traitement des doublons pour \"${name}\" (${sites.length} occurrences)`);\r\n          \r\n          // Trier les sites par priorité\r\n          sites.sort((a, b) => {\r\n            // Priorité 1: Sites avec coordonnées\r\n            const aHasCoords = a.data.latitude && a.data.longitude;\r\n            const bHasCoords = b.data.latitude && b.data.longitude;\r\n            \r\n            if (aHasCoords && !bHasCoords) return -1;\r\n            if (!aHasCoords && bHasCoords) return 1;\r\n            \r\n            // Priorité 2: Sites avec adresse complète\r\n            const aHasFullAddress = a.data.adresse && a.data.ville && a.data.codePostal;\r\n            const bHasFullAddress = b.data.adresse && b.data.ville && b.data.codePostal;\r\n            \r\n            if (aHasFullAddress && !bHasFullAddress) return -1;\r\n            if (!aHasFullAddress && bHasFullAddress) return 1;\r\n            \r\n            // Priorité 3: Sites avec plus de champs remplis\r\n            const aFieldCount = Object.keys(a.data).filter(key => a.data[key]).length;\r\n            const bFieldCount = Object.keys(b.data).filter(key => b.data[key]).length;\r\n            \r\n            if (aFieldCount > bFieldCount) return -1;\r\n            if (aFieldCount < bFieldCount) return 1;\r\n            \r\n            // Priorité 4: ID plus récent\r\n            return b.id.localeCompare(a.id);\r\n          });\r\n          \r\n          // Garder le premier site et supprimer les autres\r\n          const siteToKeep = sites[0];\r\n          const sitesToRemove = sites.slice(1);\r\n          \r\n          console.log(`Conservation du site ${siteToKeep.id} (${siteToKeep.data.nom}) et suppression de ${sitesToRemove.length} doublons`);\r\n          \r\n          // Supprimer les doublons\r\n          for (const site of sitesToRemove) {\r\n            try {\r\n              const siteRef = doc(db, 'sites', site.id);\r\n              await deleteDoc(siteRef);\r\n              console.log(`Site en double supprimé: ${site.id} (${site.data.nom})`);\r\n              totalDuplicatesRemoved++;\r\n            } catch (error) {\r\n              console.error(`Erreur lors de la suppression du doublon ${site.id}:`, error);\r\n            }\r\n          }\r\n          \r\n          processedCount++;\r\n          if (processedCount % 5 === 0 || processedCount === duplicateNames.length) {\r\n            setGeocodingStatus(`Traitement en cours: ${processedCount}/${duplicateNames.length} sites traités, ${totalDuplicatesRemoved} doublons supprimés`);\r\n          }\r\n        }));\r\n      }\r\n      \r\n      setGeocodingStatus(`Nettoyage terminé: ${totalDuplicatesRemoved} doublons supprimés sur ${duplicateNames.length} sites.`);\r\n      \r\n      // Recharger les sites après la suppression des doublons\r\n      await fetchSites();\r\n      \r\n      // Masquer le message après quelques secondes\r\n      setTimeout(() => {\r\n        setGeocodingStatus(null);\r\n      }, 5000);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression des doublons:', error);\r\n      setGeocodingStatus(`Erreur lors de la suppression des doublons: ${error}`);\r\n      setTimeout(() => setGeocodingStatus(null), 5000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleSiteSelection = (id: string) => {\r\n    if (selectedSites.includes(id)) {\r\n      setSelectedSites(selectedSites.filter(siteId => siteId !== id));\r\n      // Si on désélectionne un site, on désactive aussi \"Tout sélectionner\"\r\n      setSelectAll(false);\r\n    } else {\r\n      setSelectedSites([...selectedSites, id]);\r\n      // Si tous les sites sont sélectionnés, on active \"Tout sélectionner\"\r\n      if (selectedSites.length + 1 === sites.length) {\r\n        setSelectAll(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (id: string, field: keyof Site, value: any) => {\r\n    setEditingSites({\r\n      ...editingSites,\r\n      [id]: {\r\n        ...editingSites[id],\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const addNewSiteRow = () => {\r\n    // Forcer le mode édition si ce n'est pas déjà le cas\r\n    if (!editMode) {\r\n      setEditMode(true);\r\n    }\r\n\r\n    const newSite: Partial<Site> = {\r\n      id: `temp-${Date.now()}`,\r\n      nom: '',\r\n      pole: '',\r\n      type: '',  // Le type sera sélectionné dans le menu déroulant\r\n      adresse: '',\r\n      ville: '',\r\n      codePostal: '',\r\n      telephone: '',\r\n      email: '',\r\n      codeBarres: '',\r\n      tournees: [],\r\n      codesPorte: '',\r\n      coordonnees: '',\r\n      statut: 'actif'\r\n    };\r\n    \r\n    // Ajouter la nouvelle ligne au début du tableau\r\n    setNewSites(prevNewSites => [newSite, ...prevNewSites]);\r\n\r\n    // Revenir à la première page pour voir le nouveau site\r\n    setCurrentPage(1);\r\n\r\n    // Ajouter un délai pour permettre le rendu\r\n    setTimeout(() => {\r\n      const firstInput = document.querySelector('.sites-table-container .new-site-row input') as HTMLInputElement;\r\n      if (firstInput) {\r\n        firstInput.focus();\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  const handleNewSiteChange = (index: number, field: keyof Site, value: any) => {\r\n    const updatedNewSites = [...newSites];\r\n    updatedNewSites[index] = {\r\n      ...updatedNewSites[index],\r\n      [field]: value\r\n    };\r\n    setNewSites(updatedNewSites);\r\n  };\r\n\r\n  const removeNewSiteRow = (index: number) => {\r\n    const updatedNewSites = newSites.filter((_, i) => i !== index);\r\n    setNewSites(updatedNewSites);\r\n  };\r\n\r\n  // Fonction pour gérer le changement de pôle\r\n  const handlePoleChange = (pole: string) => {\r\n    setSelectedPole(pole);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Chargement des sites...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Sites</h2>\r\n      </div>\r\n      \r\n      <div className=\"sticky-header-container\">\r\n        <div className=\"header-actions\">\r\n          {editMode ? (\r\n            <>\r\n              <button \r\n                className=\"button\" \r\n                onClick={handleSave}\r\n                disabled={loading || (selectedSites.length === 0 && newSites.length === 0)}\r\n                style={{ \r\n                  backgroundColor: '#4CAF50', // Vert\r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                title=\"Enregistrer les modifications\"\r\n              >\r\n                <i className=\"fas fa-save\"></i> Enr. {selectedSites.length > 0 || newSites.length > 0 ? \r\n                  `(${selectedSites.length}${newSites.length > 0 ? `+${newSites.length}` : ''})` : \r\n                  ''}\r\n              </button>\r\n              <button \r\n                className=\"button button-secondary\" \r\n                onClick={() => {\r\n                  if (window.confirm(\"Êtes-vous sûr de vouloir annuler toutes les modifications ?\")) {\r\n                    setEditingSites({});\r\n                    setNewSites([]);\r\n                    setSelectedSites([]);\r\n                    setSelectAll(false);\r\n                    setEditMode(false);\r\n                  }\r\n                }}\r\n                style={{ marginLeft: '5px' }}\r\n                disabled={loading}\r\n                title=\"Annuler les modifications\"\r\n              >\r\n                <i className=\"fas fa-times\"></i> Annuler\r\n              </button>\r\n              <button \r\n                className=\"button\" \r\n                onClick={addNewSiteRow}\r\n                style={{ \r\n                  marginLeft: '5px',\r\n                  backgroundColor: '#FF9800', // Orange\r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                disabled={loading}\r\n                title=\"Ajouter un nouveau site\"\r\n              >\r\n                <i className=\"fas fa-plus\"></i> Ajouter\r\n              </button>\r\n              <button \r\n                className=\"button button-danger\" \r\n                onClick={handleDelete}\r\n                disabled={selectedSites.length === 0 || loading}\r\n                style={{ \r\n                  marginLeft: '5px',\r\n                  backgroundColor: '#f44336', \r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}\r\n                title=\"Supprimer les sites sélectionnés\"\r\n              >\r\n                <i className=\"fas fa-trash-alt\"></i> Sup. ({selectedSites.length})\r\n              </button>\r\n              <button \r\n                className=\"button\" \r\n                onClick={geocodeSelectedSites}\r\n                disabled={selectedSites.length === 0 || loading}\r\n                style={{ marginLeft: '5px' }}\r\n                title=\"Géocoder les sites sélectionnés\"\r\n              >\r\n                <i className=\"fas fa-map-marker-alt\"></i> Géo. ({selectedSites.length})\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <button \r\n              className=\"button\" \r\n              onClick={toggleEditMode}\r\n            >\r\n              <i className=\"fas fa-edit\"></i> Modifier\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"quick-search-container\" style={{ marginTop: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"quick-search-input\"\r\n            placeholder=\"Recherche rapide...\"\r\n            value={quickSearch}\r\n            onChange={(e) => setQuickSearch(e.target.value)}\r\n            disabled={loading}\r\n          />\r\n          <div className=\"pole-filter\">\r\n            <PoleFilter\r\n              onPoleChange={handlePoleChange}\r\n              selectedPole={selectedPole}\r\n              label=\"Filtrer par pôle\"\r\n              className=\"pole-filter-component\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      <div className=\"sites-table-container\" style={{ overflowX: 'auto' }}>\r\n        <div className=\"results-info\">\r\n          <p>{filteredSites.length} résultat(s) trouvé(s){quickSearch ? ` pour la recherche \"${quickSearch}\"` : ''}</p>\r\n        </div>\r\n        <table className={`data-table ${editMode ? 'editing' : ''}`}>\r\n          <thead>\r\n            <tr>\r\n              {editMode && (\r\n                <th>\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    checked={selectAll}\r\n                    onChange={handleSelectAllChange}\r\n                    title=\"Sélectionner/Désélectionner tout\"\r\n                  />\r\n                </th>\r\n              )}\r\n              <th>PÔLE</th>\r\n              <th>TYPE DE SITE</th>\r\n              <th>NOM</th>\r\n              <th>ADRESSE</th>\r\n              <th>COMPLÉMENT</th>\r\n              <th>VILLE</th>\r\n              <th>CODE POSTAL</th>\r\n              <th>TOURNÉES</th>\r\n              <th>HORAIRES L-V</th>\r\n              <th>HORAIRES SAMEDI</th>\r\n              <th>CODE-BARRE</th>\r\n              <th>COORDONNÉES</th>\r\n              <th>ID</th>\r\n              <th>STATUT</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* D'abord afficher les nouveaux sites */}\r\n            {editMode && newSites.map((site, index) => (\r\n              <tr key={`new-site-${site.id}`} className=\"new-site-row\">\r\n                <td style={{display: 'none'}}>\r\n                  {/* Cellule masquée pour maintenir l'alignement */}\r\n                </td>\r\n                <td>\r\n                  <PoleSelector\r\n                    value={site.pole || ''}\r\n                    onChange={(value) => handleNewSiteChange(index, 'pole', value)}\r\n                    placeholder=\"Sélectionner un pôle\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    allowClear\r\n                    title=\"Pôle du site\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={site.type || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'type', e.target.value)}\r\n                    className=\"inline-edit-select\"\r\n                    title=\"Type de site\"\r\n                  >\r\n                    <option value=\"\">Sélectionner un type</option>\r\n                    {SITE_TYPES.map(type => (\r\n                      <option key={type} value={type}>{type}</option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.nom || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'nom', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Nom\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.adresse || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'adresse', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Adresse\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.complementAdresse || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'complementAdresse', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Complément d'adresse\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.ville || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'ville', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Ville\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.codePostal || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'codePostal', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Code postal\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.tournees?.join(', ') || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'tournees', e.target.value.split(',').map(s => s.trim()))}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Tournées\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.horairesLV || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'horairesLV', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Horaires Lundi-Vendredi\"\r\n                    placeholder=\"HH:MM-HH:MM\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.horairesSamedi || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'horairesSamedi', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Horaires Samedi\"\r\n                    placeholder=\"HH:MM-HH:MM\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={site.codeBarres || ''}\r\n                    onChange={(e) => handleNewSiteChange(index, 'codeBarres', e.target.value)}\r\n                    className=\"inline-edit-input\"\r\n                    title=\"Code-barre\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <span className=\"coordinates-empty\">\r\n                    Pas de coordonnées<br />\r\n                    (utiliser le géocodage)\r\n                  </span>\r\n                </td>\r\n                <td>{site.id}</td>\r\n                <td>\r\n                  <select\r\n                    value={site.statut || 'actif'}\r\n                    onChange={(e) => handleNewSiteChange(index, 'statut', e.target.value)}\r\n                    className=\"inline-edit-select\"\r\n                    title=\"Statut du site\"\r\n                  >\r\n                    <option value=\"actif\">Actif</option>\r\n                    <option value=\"inactif\">Inactif</option>\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n            \r\n            {/* Ensuite afficher les sites existants */}\r\n            {paginatedAndFilteredSites.map((site, index) => (\r\n              <tr key={`site-${site.id}-${index}`} className={selectedSites.includes(site.id) ? 'selected-row' : ''}>\r\n                {editMode && (\r\n                  <td>\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={selectedSites.includes(site.id)} \r\n                      onChange={() => toggleSiteSelection(site.id)}\r\n                      title=\"Sélectionner ce site\"\r\n                    />\r\n                  </td>\r\n                )}\r\n                <td>\r\n                  {editMode ? (\r\n                    <PoleSelector\r\n                      value={editingSites[site.id]?.pole || site.pole || ''}\r\n                      onChange={(value) => handleCellChange(site.id, 'pole', value)}\r\n                      placeholder=\"Sélectionner un pôle\"\r\n                      style={{ width: '100%' }}\r\n                      showSearch\r\n                      allowClear\r\n                      title=\"Pôle du site\"\r\n                    />\r\n                  ) : (\r\n                    getPoleNameById(site.pole)\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <select\r\n                      value={editingSites[site.id]?.type || site.type || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'type', e.target.value)}\r\n                      className=\"inline-edit-select\"\r\n                      title=\"Type de site\"\r\n                    >\r\n                      <option value=\"\">Sélectionner un type</option>\r\n                      {SITE_TYPES.map(type => (\r\n                        <option key={type} value={type}>{type}</option>\r\n                      ))}\r\n                    </select>\r\n                  ) : (\r\n                    site.type || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.nom || site.nom || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'nom', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Nom\"\r\n                    />\r\n                  ) : (\r\n                    site.nom || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.adresse || site.adresse || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'adresse', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Adresse\"\r\n                    />\r\n                  ) : (\r\n                    site.adresse || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.complementAdresse || site.complementAdresse || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'complementAdresse', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Complément d'adresse\"\r\n                    />\r\n                  ) : (\r\n                    site.complementAdresse || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.ville || site.ville || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'ville', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Ville\"\r\n                    />\r\n                  ) : (\r\n                    site.ville || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.codePostal || site.codePostal || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'codePostal', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Code postal\"\r\n                    />\r\n                  ) : (\r\n                    site.codePostal || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.tournees?.join(', ') || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'tournees', e.target.value.split(',').map(s => s.trim()))}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Tournées\"\r\n                    />\r\n                  ) : (\r\n                    site.tournees?.join(', ') || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.horairesLV || site.horairesLV || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'horairesLV', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Horaires Lundi-Vendredi\"\r\n                      placeholder=\"HH:MM-HH:MM\"\r\n                      pattern=\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\r\n                    />\r\n                  ) : (\r\n                    site.horairesLV || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.horairesSamedi || site.horairesSamedi || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'horairesSamedi', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Horaires Samedi\"\r\n                      placeholder=\"HH:MM-HH:MM\"\r\n                      pattern=\"([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]\"\r\n                    />\r\n                  ) : (\r\n                    site.horairesSamedi || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingSites[site.id]?.codeBarres || site.codeBarres || ''}\r\n                      onChange={(e) => handleCellChange(site.id, 'codeBarres', e.target.value)}\r\n                      className=\"inline-edit-input\"\r\n                      title=\"Code-barre\"\r\n                    />\r\n                  ) : (\r\n                    site.codeBarres || ''\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {editMode ? (\r\n                    site.latitude && site.longitude ? (\r\n                      <span className=\"coordinates-display\">\r\n                        Lat: {site.latitude.toFixed(6)}<br/>\r\n                        Lon: {site.longitude.toFixed(6)}\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"coordinates-empty\">\r\n                        Pas de coordonnées<br/>\r\n                        (utiliser le géocodage)\r\n                      </span>\r\n                    )\r\n                  ) : (\r\n                    site.latitude && site.longitude ? \r\n                    `Lat: ${site.latitude.toFixed(6)}, Lon: ${site.longitude.toFixed(6)}` : \r\n                    '-'\r\n                  )}\r\n                </td>\r\n                <td>{site.id}</td>\r\n                <td>\r\n                  {editMode ? (\r\n                    <select\r\n                      value={editingSites[site.id]?.statut || site.statut || 'actif'}\r\n                      onChange={(e) => handleCellChange(site.id, 'statut', e.target.value)}\r\n                      className=\"inline-edit-select\"\r\n                      title=\"Statut du site\"\r\n                    >\r\n                      <option value=\"actif\">Actif</option>\r\n                      <option value=\"inactif\">Inactif</option>\r\n                    </select>\r\n                  ) : (\r\n                    (site.statut === 'actif' || !site.statut) ? 'Actif' : 'Inactif'\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {/* Ajouter la pagination */}\r\n        {renderPagination()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sites;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}