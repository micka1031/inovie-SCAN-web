{"ast":null,"code":"// Script pour initialiser la collection passages dans Firebase\nimport{db}from'../config/firebase';import{collection,getDocs,addDoc,Timestamp,deleteDoc}from'firebase/firestore';// Fonction pour convertir une chaîne de date et heure en Timestamp\nfunction convertToTimestamp(dateTimeString){const[datePart,timePart]=dateTimeString.split(' ');const[year,month,day]=datePart.split('-').map(Number);const[hour,minute]=timePart.split(':').map(Number);const date=new Date(year,month-1,day,hour,minute);return Timestamp.fromDate(date);}// Données initiales pour les passages\nconst initialPassages=[{siteDépart:'Laboratoire Bonnefoy',dhDépart:convertToTimestamp('2023-02-24 07:25'),idColis:'30072001529',statut:'Livré',siteFin:'Clinique SUB',dhLivraison:convertToTimestamp('2023-02-24 08:40'),coursierCharg:'sebastien.lherlier@novus.fr',coursierLivraison:'sebastien.lherlier@novus.fr',véhicule:'GE-695-RT'},{siteDépart:'Clinique Saint-Jean',dhDépart:convertToTimestamp('2023-02-24 07:15'),idColis:'15000434563',statut:'Livré',siteFin:'Laboratoire Central',dhLivraison:convertToTimestamp('2023-02-24 08:10'),coursierCharg:'sebastien.lherlier@novus.fr',coursierLivraison:'sebastien.lherlier@novus.fr',véhicule:'GE-695-RT'},{siteDépart:'Centre Médical Rangueil',dhDépart:convertToTimestamp('2023-02-24 07:05'),idColis:'15000199845',statut:'Livré',siteFin:'Laboratoire Central',dhLivraison:convertToTimestamp('2023-02-24 07:55'),coursierCharg:'sebastien.lherlier@novus.fr',coursierLivraison:'sebastien.lherlier@novus.fr',véhicule:'GE-695-RT'},{siteDépart:'Laboratoire Lénisole',dhDépart:convertToTimestamp('2023-02-24 07:44'),idColis:'ASG001570930',statut:'Livré',siteFin:'Clinique La Jayre',dhLivraison:convertToTimestamp('2023-02-24 08:15'),coursierCharg:'guillaume.sage@novus.fr',coursierLivraison:'guillaume.sage@novus.fr',véhicule:'GI-456-AD'},{siteDépart:'Hôpital Fontroide',dhDépart:convertToTimestamp('2023-02-24 07:47'),idColis:'ASG001524765',statut:'Livré',siteFin:'Laboratoire Central',dhLivraison:convertToTimestamp('2023-02-24 08:35'),coursierCharg:'sebastien.lherlier@novus.fr',coursierLivraison:'sebastien.lherlier@novus.fr',véhicule:'GE-695-RT'},{siteDépart:'Clinique STER',dhDépart:convertToTimestamp('2023-02-24 08:03'),idColis:'ASG001570783',statut:'En cours',coursierCharg:'sebastien.lherlier@novus.fr',véhicule:'GE-695-RT'},{siteDépart:'Centre Beau Soleil',dhDépart:convertToTimestamp('2023-02-24 08:16'),idColis:'MB0004040047',statut:'En cours',coursierCharg:'michel.roude@novus.fr',véhicule:'GL-789-BA'},{siteDépart:'Laboratoire Purpan',dhDépart:convertToTimestamp('2023-02-24 08:25'),idColis:'ASG001578924',statut:'En cours',coursierCharg:'guillaume.sage@novus.fr',véhicule:'GI-456-AD'},{siteDépart:'Clinique Pasteur',dhDépart:convertToTimestamp('2023-02-24 07:10'),idColis:'30072001587',statut:'Livré',siteFin:'Laboratoire Central',dhLivraison:convertToTimestamp('2023-02-24 07:55'),coursierCharg:'jean.dupont@novus.fr',coursierLivraison:'jean.dupont@novus.fr',véhicule:'GB-123-AZ'},{siteDépart:'Cabinet Médical Basso',dhDépart:convertToTimestamp('2023-02-24 08:30'),idColis:'MB0004042187',statut:'En cours',coursierCharg:'michel.roude@novus.fr',véhicule:'GL-789-BA'}];// Fonction pour vérifier si une collection existe et contient des données\nexport async function collectionHasData(collectionName){try{const querySnapshot=await getDocs(collection(db,collectionName));return!querySnapshot.empty;}catch(error){console.error(`Erreur lors de la vérification de la collection ${collectionName}:`,error);throw error;// Propager l'erreur pour une meilleure gestion\n}}// Fonction pour initialiser la collection passages\nexport async function initializePassagesCollection(){let forceInitialization=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;try{// Vérifier si la collection existe déjà\nconst passagesRef=collection(db,'passages');const querySnapshot=await getDocs(passagesRef);// Si forceInitialization est true, on supprime les documents existants\nif(!querySnapshot.empty&&forceInitialization){console.log(`Suppression des ${querySnapshot.size} documents existants...`);// Supprimer tous les documents existants\nconst deletePromises=querySnapshot.docs.map(doc=>deleteDoc(doc.ref));await Promise.all(deletePromises);console.log('Tous les documents ont été supprimés avec succès.');}else if(!querySnapshot.empty){console.log(`La collection passages contient déjà ${querySnapshot.size} documents. Aucune initialisation nécessaire.`);return false;}// Initialiser la collection avec les nouvelles données\nlet addedCount=0;for(const passage of initialPassages){await addDoc(passagesRef,passage);addedCount++;}console.log(`Initialisation réussie ! ${addedCount} passages ont été ajoutés à la collection.`);return true;}catch(error){console.error('Erreur détaillée lors de l\\'initialisation de la collection passages:',error);throw error;// Propager l'erreur pour une meilleure gestion\n}}","map":{"version":3,"names":["db","collection","getDocs","addDoc","Timestamp","deleteDoc","convertToTimestamp","dateTimeString","datePart","timePart","split","year","month","day","map","Number","hour","minute","date","Date","fromDate","initialPassages","siteDépart","dhDépart","idColis","statut","siteFin","dhLivraison","coursierCharg","coursierLivraison","véhicule","collectionHasData","collectionName","querySnapshot","empty","error","console","initializePassagesCollection","forceInitialization","arguments","length","undefined","passagesRef","log","size","deletePromises","docs","doc","ref","Promise","all","addedCount","passage"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/scripts/initPassagesFirebase.js"],"sourcesContent":["// Script pour initialiser la collection passages dans Firebase\nimport { db } from '../config/firebase';\nimport { collection, getDocs, addDoc, Timestamp, deleteDoc } from 'firebase/firestore';\n\n// Fonction pour convertir une chaîne de date et heure en Timestamp\nfunction convertToTimestamp(dateTimeString) {\n    const [datePart, timePart] = dateTimeString.split(' ');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hour, minute] = timePart.split(':').map(Number);\n    \n    const date = new Date(year, month - 1, day, hour, minute);\n    return Timestamp.fromDate(date);\n}\n\n// Données initiales pour les passages\nconst initialPassages = [\n    {\n        siteDépart: 'Laboratoire Bonnefoy',\n        dhDépart: convertToTimestamp('2023-02-24 07:25'),\n        idColis: '30072001529',\n        statut: 'Livré',\n        siteFin: 'Clinique SUB',\n        dhLivraison: convertToTimestamp('2023-02-24 08:40'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Clinique Saint-Jean',\n        dhDépart: convertToTimestamp('2023-02-24 07:15'),\n        idColis: '15000434563',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 08:10'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Centre Médical Rangueil',\n        dhDépart: convertToTimestamp('2023-02-24 07:05'),\n        idColis: '15000199845',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Laboratoire Lénisole',\n        dhDépart: convertToTimestamp('2023-02-24 07:44'),\n        idColis: 'ASG001570930',\n        statut: 'Livré',\n        siteFin: 'Clinique La Jayre',\n        dhLivraison: convertToTimestamp('2023-02-24 08:15'),\n        coursierCharg: 'guillaume.sage@novus.fr',\n        coursierLivraison: 'guillaume.sage@novus.fr',\n        véhicule: 'GI-456-AD'\n    },\n    {\n        siteDépart: 'Hôpital Fontroide',\n        dhDépart: convertToTimestamp('2023-02-24 07:47'),\n        idColis: 'ASG001524765',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 08:35'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Clinique STER',\n        dhDépart: convertToTimestamp('2023-02-24 08:03'),\n        idColis: 'ASG001570783',\n        statut: 'En cours',\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Centre Beau Soleil',\n        dhDépart: convertToTimestamp('2023-02-24 08:16'),\n        idColis: 'MB0004040047',\n        statut: 'En cours',\n        coursierCharg: 'michel.roude@novus.fr',\n        véhicule: 'GL-789-BA'\n    },\n    {\n        siteDépart: 'Laboratoire Purpan',\n        dhDépart: convertToTimestamp('2023-02-24 08:25'),\n        idColis: 'ASG001578924',\n        statut: 'En cours',\n        coursierCharg: 'guillaume.sage@novus.fr',\n        véhicule: 'GI-456-AD'\n    },\n    {\n        siteDépart: 'Clinique Pasteur',\n        dhDépart: convertToTimestamp('2023-02-24 07:10'),\n        idColis: '30072001587',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n        coursierCharg: 'jean.dupont@novus.fr',\n        coursierLivraison: 'jean.dupont@novus.fr',\n        véhicule: 'GB-123-AZ'\n    },\n    {\n        siteDépart: 'Cabinet Médical Basso',\n        dhDépart: convertToTimestamp('2023-02-24 08:30'),\n        idColis: 'MB0004042187',\n        statut: 'En cours',\n        coursierCharg: 'michel.roude@novus.fr',\n        véhicule: 'GL-789-BA'\n    }\n];\n\n// Fonction pour vérifier si une collection existe et contient des données\nexport async function collectionHasData(collectionName) {\n    try {\n        const querySnapshot = await getDocs(collection(db, collectionName));\n        return !querySnapshot.empty;\n    } catch (error) {\n        console.error(`Erreur lors de la vérification de la collection ${collectionName}:`, error);\n        throw error; // Propager l'erreur pour une meilleure gestion\n    }\n}\n\n// Fonction pour initialiser la collection passages\nexport async function initializePassagesCollection(forceInitialization = true) {\n    try {\n        // Vérifier si la collection existe déjà\n        const passagesRef = collection(db, 'passages');\n        const querySnapshot = await getDocs(passagesRef);\n        \n        // Si forceInitialization est true, on supprime les documents existants\n        if (!querySnapshot.empty && forceInitialization) {\n            console.log(`Suppression des ${querySnapshot.size} documents existants...`);\n            \n            // Supprimer tous les documents existants\n            const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));\n            await Promise.all(deletePromises);\n            \n            console.log('Tous les documents ont été supprimés avec succès.');\n        } else if (!querySnapshot.empty) {\n            console.log(`La collection passages contient déjà ${querySnapshot.size} documents. Aucune initialisation nécessaire.`);\n            return false;\n        }\n        \n        // Initialiser la collection avec les nouvelles données\n        let addedCount = 0;\n        \n        for (const passage of initialPassages) {\n            await addDoc(passagesRef, passage);\n            addedCount++;\n        }\n        \n        console.log(`Initialisation réussie ! ${addedCount} passages ont été ajoutés à la collection.`);\n        return true;\n        \n    } catch (error) {\n        console.error('Erreur détaillée lors de l\\'initialisation de la collection passages:', error);\n        throw error; // Propager l'erreur pour une meilleure gestion\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}