{"ast":null,"code":"import { createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db, auth, PRODUCTION_URL } from '../config/firebase';\n/**\n * Génère un mot de passe temporaire complexe\n * Format: 2 majuscules + 2 minuscules + 2 chiffres + 1 caractère spécial\n * Exemple: AB12cd!\n */\nexport const generateTempPassword = () => {\n  const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n  const specialChars = '!@#$%&*-_=+';\n  let password = '';\n\n  // Ajouter 2 lettres majuscules\n  for (let i = 0; i < 2; i++) {\n    password += uppercaseChars.charAt(Math.floor(Math.random() * uppercaseChars.length));\n  }\n\n  // Ajouter 2 chiffres\n  for (let i = 0; i < 2; i++) {\n    password += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n\n  // Ajouter 2 lettres minuscules\n  for (let i = 0; i < 2; i++) {\n    password += lowercaseChars.charAt(Math.floor(Math.random() * lowercaseChars.length));\n  }\n\n  // Ajouter 1 caractère spécial\n  password += specialChars.charAt(Math.floor(Math.random() * specialChars.length));\n\n  // Mélanger le mot de passe (Fisher-Yates shuffle)\n  const passwordArray = password.split('');\n  for (let i = passwordArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [passwordArray[i], passwordArray[j]] = [passwordArray[j], passwordArray[i]];\n  }\n  return passwordArray.join('');\n};\n\n/**\n * Crée un nouvel utilisateur sans déconnecter l'administrateur actuel\n */\nexport const createUserWithoutSignOut = async userData => {\n  try {\n    console.log('Début de la création d\\'un nouvel utilisateur:', userData.email);\n\n    // Créer l'utilisateur dans Firebase Auth avec un mot de passe aléatoire\n    const tempPassword = generateTempPassword();\n    console.log('Mot de passe temporaire généré');\n    const userCredential = await createUserWithEmailAndPassword(auth, userData.email, tempPassword);\n    const uid = userCredential.user.uid;\n    console.log('Utilisateur créé dans Firebase Auth avec UID:', uid);\n\n    // Configuration personnalisée pour l'email de réinitialisation\n    const resetActionCodeSettings = {\n      // URL de redirection après la réinitialisation du mot de passe\n      url: PRODUCTION_URL + `/login?email=${encodeURIComponent(userData.email)}&newUser=true&nom=${encodeURIComponent(userData.nom)}`,\n      // Activer la gestion du code dans l'application\n      handleCodeInApp: true\n    };\n\n    // Envoyer l'email de réinitialisation de mot de passe\n    console.log('Envoi de l\\'email de réinitialisation à:', userData.email);\n    await sendPasswordResetEmail(auth, userData.email, resetActionCodeSettings);\n    console.log('Email de réinitialisation envoyé avec succès');\n\n    // Créer le document utilisateur dans Firestore\n    const userDocRef = await addDoc(collection(db, 'users'), {\n      ...userData,\n      uid: uid,\n      identifiant: uid,\n      createdAt: new Date().toISOString()\n    });\n    console.log('Document utilisateur créé dans Firestore avec ID:', userDocRef.id);\n    return {\n      success: true,\n      docId: userDocRef.id,\n      uid: uid\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création de l\\'utilisateur:', error);\n    return {\n      success: false,\n      error: error\n    };\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","sendPasswordResetEmail","collection","addDoc","db","auth","PRODUCTION_URL","generateTempPassword","uppercaseChars","lowercaseChars","numbers","specialChars","password","i","charAt","Math","floor","random","length","passwordArray","split","j","join","createUserWithoutSignOut","userData","console","log","email","tempPassword","userCredential","uid","user","resetActionCodeSettings","url","encodeURIComponent","nom","handleCodeInApp","userDocRef","identifiant","createdAt","Date","toISOString","id","success","docId","error"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/userService.ts"],"sourcesContent":["import { \n  createUserWithEmailAndPassword, \n  sendPasswordResetEmail,\n  signInWithEmailAndPassword\n} from 'firebase/auth';\nimport { \n  collection, \n  addDoc, \n  updateDoc, \n  doc, \n  deleteDoc \n} from 'firebase/firestore';\nimport { \n  db, \n  auth, \n  PRODUCTION_URL,\n  actionCodeSettings \n} from '../config/firebase';\n\ninterface UserData {\n  email: string;\n  nom: string;\n  role: string;\n  pole: string;\n  statut: string;\n  [key: string]: any;\n}\n\ninterface AdminCredentials {\n  email: string;\n  password: string;\n}\n\ninterface CreateUserResult {\n  success: boolean;\n  uid?: string;\n  docId?: string;\n  error?: any;\n}\n\n/**\n * Génère un mot de passe temporaire complexe\n * Format: 2 majuscules + 2 minuscules + 2 chiffres + 1 caractère spécial\n * Exemple: AB12cd!\n */\nexport const generateTempPassword = (): string => {\n  const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n  const specialChars = '!@#$%&*-_=+';\n  \n  let password = '';\n  \n  // Ajouter 2 lettres majuscules\n  for (let i = 0; i < 2; i++) {\n    password += uppercaseChars.charAt(Math.floor(Math.random() * uppercaseChars.length));\n  }\n  \n  // Ajouter 2 chiffres\n  for (let i = 0; i < 2; i++) {\n    password += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n  \n  // Ajouter 2 lettres minuscules\n  for (let i = 0; i < 2; i++) {\n    password += lowercaseChars.charAt(Math.floor(Math.random() * lowercaseChars.length));\n  }\n  \n  // Ajouter 1 caractère spécial\n  password += specialChars.charAt(Math.floor(Math.random() * specialChars.length));\n  \n  // Mélanger le mot de passe (Fisher-Yates shuffle)\n  const passwordArray = password.split('');\n  for (let i = passwordArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [passwordArray[i], passwordArray[j]] = [passwordArray[j], passwordArray[i]];\n  }\n  \n  return passwordArray.join('');\n};\n\n/**\n * Crée un nouvel utilisateur sans déconnecter l'administrateur actuel\n */\nexport const createUserWithoutSignOut = async (userData: UserData): Promise<CreateUserResult> => {\n  try {\n    console.log('Début de la création d\\'un nouvel utilisateur:', userData.email);\n    \n    // Créer l'utilisateur dans Firebase Auth avec un mot de passe aléatoire\n    const tempPassword = generateTempPassword();\n    console.log('Mot de passe temporaire généré');\n    \n    const userCredential = await createUserWithEmailAndPassword(auth, userData.email, tempPassword);\n    const uid = userCredential.user.uid;\n    console.log('Utilisateur créé dans Firebase Auth avec UID:', uid);\n\n    // Configuration personnalisée pour l'email de réinitialisation\n    const resetActionCodeSettings = {\n      // URL de redirection après la réinitialisation du mot de passe\n      url: PRODUCTION_URL + `/login?email=${encodeURIComponent(userData.email)}&newUser=true&nom=${encodeURIComponent(userData.nom)}`,\n      // Activer la gestion du code dans l'application\n      handleCodeInApp: true\n    };\n    \n    // Envoyer l'email de réinitialisation de mot de passe\n    console.log('Envoi de l\\'email de réinitialisation à:', userData.email);\n    await sendPasswordResetEmail(auth, userData.email, resetActionCodeSettings);\n    console.log('Email de réinitialisation envoyé avec succès');\n\n    // Créer le document utilisateur dans Firestore\n    const userDocRef = await addDoc(collection(db, 'users'), {\n      ...userData,\n      uid: uid,\n      identifiant: uid,\n      createdAt: new Date().toISOString()\n    });\n    console.log('Document utilisateur créé dans Firestore avec ID:', userDocRef.id);\n\n    return {\n      success: true,\n      docId: userDocRef.id,\n      uid: uid\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création de l\\'utilisateur:', error);\n    return {\n      success: false,\n      error: error as Error\n    };\n  }\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}