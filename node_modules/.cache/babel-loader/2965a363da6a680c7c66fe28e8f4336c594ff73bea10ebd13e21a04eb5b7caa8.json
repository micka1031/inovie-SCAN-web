{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\components\\\\MarkerPreferences.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../config/firebase';\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where } from 'firebase/firestore';\nimport './MarkerPreferences.css';\n\n// Couleurs disponibles pour les marqueurs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AVAILABLE_COLORS = [{\n  name: 'Rouge',\n  value: '#ff3b30'\n}, {\n  name: 'Jaune',\n  value: '#ffcc00'\n}, {\n  name: 'Vert',\n  value: '#34c759'\n}, {\n  name: 'Cyan',\n  value: '#00c7be'\n}, {\n  name: 'Bleu',\n  value: '#007aff'\n}, {\n  name: 'Magenta',\n  value: '#af52de'\n}, {\n  name: 'Rose',\n  value: '#ff2d55'\n}, {\n  name: 'Orange',\n  value: '#ff9500'\n}, {\n  name: 'Violet',\n  value: '#5856d6'\n}, {\n  name: 'Gris',\n  value: '#8e8e93'\n}, {\n  name: 'Noir',\n  value: '#000000'\n}];\n\n// Icônes disponibles pour les marqueurs\nconst AVAILABLE_ICONS = [{\n  name: 'Goutte d\\'eau',\n  value: 'droplet'\n}, {\n  name: 'Cercle',\n  value: 'circle'\n}, {\n  name: 'Carré',\n  value: 'square'\n}, {\n  name: 'Triangle',\n  value: 'triangle'\n}, {\n  name: 'Étoile',\n  value: 'star'\n}, {\n  name: 'Épingle',\n  value: 'pin'\n}];\n\n// Types de sites disponibles\nconst SITE_TYPES = ['Laboratoire', 'Clinique', 'Plateau technique', 'Point de collecte', 'Etablissement de santé', 'Ehpad', 'Vétérinaire'];\nconst MarkerPreferences = () => {\n  _s();\n  const [preferences, setPreferences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [editingPreferences, setEditingPreferences] = useState({});\n  const [previewColors, setPreviewColors] = useState({});\n\n  // États pour la sélection\n  const [selectedPreferences, setSelectedPreferences] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  useEffect(() => {\n    fetchPreferences();\n  }, []);\n\n  // Effet pour gérer la sélection/désélection de toutes les préférences\n  useEffect(() => {\n    if (selectAll) {\n      setSelectedPreferences(preferences.map(pref => pref.id));\n    } else if (selectedPreferences.length === preferences.length && preferences.length > 0) {\n      setSelectedPreferences([]);\n    }\n  }, [selectAll, preferences]);\n  const fetchPreferences = async () => {\n    try {\n      setLoading(true);\n      const preferencesRef = collection(db, 'markerPreferences');\n      const snapshot = await getDocs(preferencesRef);\n      let preferencesData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      // Si aucune préférence n'existe, créer les préférences par défaut\n      if (preferencesData.length === 0) {\n        preferencesData = await createDefaultPreferences();\n      } else {\n        // Vérifier et supprimer les doublons\n        preferencesData = await checkAndRemoveDuplicates(preferencesData);\n      }\n      setPreferences(preferencesData);\n\n      // Initialiser les couleurs de prévisualisation\n      const initialPreviewColors = {};\n      preferencesData.forEach(pref => {\n        initialPreviewColors[pref.id] = pref.color;\n      });\n      setPreviewColors(initialPreviewColors);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des préférences de marqueurs:', error);\n      setError('Erreur lors de la récupération des préférences de marqueurs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour vérifier et supprimer les doublons\n  const checkAndRemoveDuplicates = async preferences => {\n    // Regrouper les préférences par type de site\n    const groupedBySiteType = {};\n    preferences.forEach(pref => {\n      const siteType = pref.siteType.toLowerCase().trim();\n      if (!groupedBySiteType[siteType]) {\n        groupedBySiteType[siteType] = [];\n      }\n      groupedBySiteType[siteType].push(pref);\n    });\n\n    // Identifier et supprimer les doublons\n    const duplicatesRemoved = [];\n    const updatedPreferences = [...preferences];\n    for (const siteType in groupedBySiteType) {\n      const prefsForType = groupedBySiteType[siteType];\n      if (prefsForType.length > 1) {\n        // Garder la première préférence et supprimer les autres\n        const [keepPref, ...duplicates] = prefsForType;\n        for (const duplicate of duplicates) {\n          try {\n            const prefRef = doc(db, 'markerPreferences', duplicate.id);\n            await deleteDoc(prefRef);\n            duplicatesRemoved.push(duplicate);\n\n            // Retirer le doublon de la liste des préférences\n            const index = updatedPreferences.findIndex(p => p.id === duplicate.id);\n            if (index !== -1) {\n              updatedPreferences.splice(index, 1);\n            }\n          } catch (error) {\n            console.error(`Erreur lors de la suppression du doublon ${duplicate.id}:`, error);\n          }\n        }\n      }\n    }\n    if (duplicatesRemoved.length > 0) {\n      console.log(`${duplicatesRemoved.length} doublons de préférences ont été supprimés.`);\n    }\n    return updatedPreferences;\n  };\n  const createDefaultPreferences = async () => {\n    const defaultPreferences = [{\n      siteType: 'Laboratoire',\n      color: '#ff3b30',\n      icon: 'droplet',\n      name: 'Laboratoire'\n    }, {\n      siteType: 'Clinique',\n      color: '#ffcc00',\n      icon: 'droplet',\n      name: 'Clinique'\n    }, {\n      siteType: 'Plateau technique',\n      color: '#34c759',\n      icon: 'droplet',\n      name: 'Plateau technique'\n    }, {\n      siteType: 'Point de collecte',\n      color: '#00c7be',\n      icon: 'droplet',\n      name: 'Point de collecte'\n    }, {\n      siteType: 'Etablissement de santé',\n      color: '#007aff',\n      icon: 'droplet',\n      name: 'Établissement de santé'\n    }, {\n      siteType: 'Ehpad',\n      color: '#af52de',\n      icon: 'droplet',\n      name: 'Ehpad'\n    }, {\n      siteType: 'Vétérinaire',\n      color: '#ff2d55',\n      icon: 'droplet',\n      name: 'Vétérinaire'\n    }];\n    const createdPreferences = [];\n    for (const pref of defaultPreferences) {\n      try {\n        // Vérifier si une préférence pour ce type de site existe déjà\n        const preferencesRef = collection(db, 'markerPreferences');\n        const q = query(preferencesRef, where(\"siteType\", \"==\", pref.siteType));\n        const snapshot = await getDocs(q);\n        if (snapshot.empty) {\n          // Ajouter seulement si aucune préférence n'existe pour ce type de site\n          const docRef = await addDoc(collection(db, 'markerPreferences'), pref);\n          createdPreferences.push({\n            id: docRef.id,\n            ...pref\n          });\n        } else {\n          // Utiliser la préférence existante\n          snapshot.docs.forEach(doc => {\n            createdPreferences.push({\n              id: doc.id,\n              ...doc.data()\n            });\n          });\n        }\n      } catch (error) {\n        console.error('Erreur lors de la création des préférences par défaut:', error);\n      }\n    }\n    return createdPreferences;\n  };\n  const toggleEditMode = () => {\n    if (editMode) {\n      // Sortir du mode édition sans sauvegarder\n      setEditingPreferences({});\n      setSelectedPreferences([]);\n      setSelectAll(false);\n    } else {\n      // Entrer en mode édition\n      const initialEditState = {};\n      preferences.forEach(pref => {\n        initialEditState[pref.id] = {\n          ...pref\n        };\n      });\n      setEditingPreferences(initialEditState);\n    }\n    setEditMode(!editMode);\n  };\n  const handleSave = async () => {\n    try {\n      setLoading(true);\n\n      // Mettre à jour les préférences modifiées\n      for (const [id, pref] of Object.entries(editingPreferences)) {\n        const prefRef = doc(db, 'markerPreferences', id);\n        await updateDoc(prefRef, {\n          color: pref.color,\n          icon: pref.icon,\n          name: pref.name\n        });\n      }\n\n      // Recharger les préférences\n      await fetchPreferences();\n\n      // Sortir du mode édition\n      setEditMode(false);\n      setEditingPreferences({});\n      setSelectedPreferences([]);\n      setSelectAll(false);\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde des préférences:', error);\n      setError('Erreur lors de la sauvegarde des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleColorChange = (id, color) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        color\n      }\n    });\n\n    // Mettre à jour la prévisualisation\n    setPreviewColors({\n      ...previewColors,\n      [id]: color\n    });\n  };\n  const handleIconChange = (id, icon) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        icon\n      }\n    });\n  };\n  const handleNameChange = (id, name) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        name\n      }\n    });\n  };\n\n  // Fonction pour gérer la sélection/désélection d'une préférence\n  const togglePreferenceSelection = id => {\n    if (selectedPreferences.includes(id)) {\n      setSelectedPreferences(selectedPreferences.filter(prefId => prefId !== id));\n      // Si on désélectionne une préférence, on désactive aussi \"Tout sélectionner\"\n      setSelectAll(false);\n    } else {\n      setSelectedPreferences([...selectedPreferences, id]);\n      // Si toutes les préférences sont sélectionnées, on active \"Tout sélectionner\"\n      if (selectedPreferences.length + 1 === preferences.length) {\n        setSelectAll(true);\n      }\n    }\n  };\n\n  // Fonction pour gérer la sélection/désélection de toutes les préférences\n  const handleSelectAllChange = () => {\n    setSelectAll(!selectAll);\n  };\n\n  // Fonction pour supprimer les préférences sélectionnées\n  const handleDeleteSelected = async () => {\n    if (selectedPreferences.length === 0) {\n      return;\n    }\n\n    // Confirmation avant suppression\n    const confirmMessage = `Êtes-vous sûr de vouloir supprimer ${selectedPreferences.length} préférence(s) de marqueur ?`;\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // Supprimer les préférences sélectionnées\n      for (const prefId of selectedPreferences) {\n        const prefRef = doc(db, 'markerPreferences', prefId);\n        await deleteDoc(prefRef);\n      }\n\n      // Recharger les préférences\n      await fetchPreferences();\n\n      // Réinitialiser les sélections\n      setSelectedPreferences([]);\n      setSelectAll(false);\n    } catch (error) {\n      console.error('Erreur lors de la suppression des préférences:', error);\n      setError('Erreur lors de la suppression des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour ajouter une nouvelle préférence\n  const handleAddPreference = async () => {\n    try {\n      setLoading(true);\n\n      // Créer une nouvelle préférence avec des valeurs par défaut\n      const newPreference = {\n        siteType: '',\n        color: '#007aff',\n        icon: 'droplet',\n        name: 'Nouveau type'\n      };\n\n      // Ajouter la nouvelle préférence à Firestore\n      const docRef = await addDoc(collection(db, 'markerPreferences'), newPreference);\n\n      // Recharger les préférences\n      await fetchPreferences();\n\n      // Activer le mode édition si ce n'est pas déjà le cas\n      if (!editMode) {\n        toggleEditMode();\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout d\\'une nouvelle préférence:', error);\n      setError('Erreur lors de l\\'ajout d\\'une nouvelle préférence');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const renderMarkerPreview = preference => {\n    var _editingPreferences$p;\n    const color = editMode ? previewColors[preference.id] || preference.color : preference.color;\n    const icon = editMode ? ((_editingPreferences$p = editingPreferences[preference.id]) === null || _editingPreferences$p === void 0 ? void 0 : _editingPreferences$p.icon) || preference.icon : preference.icon;\n    let iconClass = '';\n    switch (icon) {\n      case 'droplet':\n        iconClass = 'fas fa-tint';\n        break;\n      case 'circle':\n        iconClass = 'fas fa-circle';\n        break;\n      case 'square':\n        iconClass = 'fas fa-square';\n        break;\n      case 'triangle':\n        iconClass = 'fas fa-triangle';\n        break;\n      case 'star':\n        iconClass = 'fas fa-star';\n        break;\n      case 'pin':\n        iconClass = 'fas fa-map-marker-alt';\n        break;\n      default:\n        iconClass = 'fas fa-tint';\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"marker-preview\",\n      style: {\n        color\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: iconClass\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Fonction pour réinitialiser les préférences aux valeurs par défaut\n  const handleResetToDefaults = async () => {\n    // Confirmation avant réinitialisation\n    const confirmMessage = \"Êtes-vous sûr de vouloir réinitialiser toutes les préférences de marqueurs aux valeurs par défaut ? Cette action supprimera toutes les personnalisations existantes.\";\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // Supprimer toutes les préférences existantes\n      const preferencesRef = collection(db, 'markerPreferences');\n      const snapshot = await getDocs(preferencesRef);\n      for (const doc of snapshot.docs) {\n        await deleteDoc(doc.ref);\n      }\n\n      // Créer les préférences par défaut\n      await createDefaultPreferences();\n\n      // Recharger les préférences\n      await fetchPreferences();\n\n      // Réinitialiser les sélections\n      setSelectedPreferences([]);\n      setSelectAll(false);\n\n      // Sortir du mode édition si actif\n      if (editMode) {\n        setEditMode(false);\n        setEditingPreferences({});\n      }\n    } catch (error) {\n      console.error('Erreur lors de la réinitialisation des préférences:', error);\n      setError('Erreur lors de la réinitialisation des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading && preferences.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des pr\\xE9f\\xE9rences de marqueurs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"marker-preferences-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: [\"Pr\\xE9f\\xE9rences des marqueurs\", selectedPreferences.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selection-count\",\n          children: [\" (\", selectedPreferences.length, \" s\\xE9lectionn\\xE9\", selectedPreferences.length > 1 ? 's' : '', \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleSave,\n            disabled: loading,\n            style: {\n              backgroundColor: '#4CAF50',\n              color: 'white',\n              fontWeight: 'bold'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), \" Enregistrer\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this), selectedPreferences.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleDeleteSelected,\n            disabled: loading,\n            style: {\n              backgroundColor: '#f44336',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-trash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 19\n            }, this), \" Supprimer (\", selectedPreferences.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleAddPreference,\n            disabled: loading,\n            style: {\n              backgroundColor: '#2196F3',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-plus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 17\n            }, this), \" Ajouter\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button button-secondary\",\n            onClick: toggleEditMode,\n            style: {\n              marginLeft: '10px'\n            },\n            disabled: loading,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 17\n            }, this), \" Annuler\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: toggleEditMode,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this), \" Modifier\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button button-secondary\",\n            onClick: handleResetToDefaults,\n            disabled: loading,\n            style: {\n              marginLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 17\n            }, this), \" R\\xE9initialiser\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preferences-table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"preferences-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [editMode && /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: '40px',\n                textAlign: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectAll,\n                onChange: handleSelectAllChange,\n                title: \"S\\xE9lectionner/D\\xE9s\\xE9lectionner tout\",\n                id: \"select-all-checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"select-all-checkbox\",\n                className: \"sr-only\",\n                children: \"S\\xE9lectionner tout\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Aper\\xE7u\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type de site\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nom affich\\xE9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Couleur\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ic\\xF4ne\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: preferences.length > 0 ? preferences.map(preference => {\n            var _editingPreferences$p2, _editingPreferences$p3, _editingPreferences$p4, _AVAILABLE_ICONS$find;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: selectedPreferences.includes(preference.id) ? 'selected-row' : '',\n              onClick: editMode ? () => togglePreferenceSelection(preference.id) : undefined,\n              style: editMode ? {\n                cursor: 'pointer'\n              } : undefined,\n              children: [editMode && /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  textAlign: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedPreferences.includes(preference.id),\n                  onChange: () => togglePreferenceSelection(preference.id),\n                  title: \"S\\xE9lectionner cette pr\\xE9f\\xE9rence\",\n                  id: `select-preference-${preference.id}`,\n                  onClick: e => e.stopPropagation()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `select-preference-${preference.id}`,\n                  className: \"sr-only\",\n                  children: [\"S\\xE9lectionner \", preference.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 596,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: renderMarkerPreview(preference)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: preference.siteType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editingPreferences$p2 = editingPreferences[preference.id]) === null || _editingPreferences$p2 === void 0 ? void 0 : _editingPreferences$p2.name) || preference.name,\n                  onChange: e => handleNameChange(preference.id, e.target.value),\n                  className: \"edit-input\",\n                  \"aria-label\": `Nom pour ${preference.siteType}`,\n                  placeholder: `Nom pour ${preference.siteType}`,\n                  onClick: e => e.stopPropagation()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 23\n                }, this) : preference.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: ((_editingPreferences$p3 = editingPreferences[preference.id]) === null || _editingPreferences$p3 === void 0 ? void 0 : _editingPreferences$p3.color) || preference.color,\n                  onChange: e => handleColorChange(preference.id, e.target.value),\n                  className: \"edit-select\",\n                  style: {\n                    backgroundColor: previewColors[preference.id] || preference.color,\n                    color: '#fff'\n                  },\n                  \"aria-label\": `Couleur pour ${preference.siteType}`,\n                  title: `Sélectionner une couleur pour ${preference.siteType}`,\n                  onClick: e => e.stopPropagation(),\n                  children: AVAILABLE_COLORS.map(color => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: color.value,\n                    style: {\n                      backgroundColor: color.value,\n                      color: '#fff'\n                    },\n                    children: color.name\n                  }, color.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 630,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 620,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"color-preview\",\n                  style: {\n                    backgroundColor: preference.color\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editMode ? /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: ((_editingPreferences$p4 = editingPreferences[preference.id]) === null || _editingPreferences$p4 === void 0 ? void 0 : _editingPreferences$p4.icon) || preference.icon,\n                  onChange: e => handleIconChange(preference.id, e.target.value),\n                  className: \"edit-select\",\n                  \"aria-label\": `Icône pour ${preference.siteType}`,\n                  title: `Sélectionner une icône pour ${preference.siteType}`,\n                  onClick: e => e.stopPropagation(),\n                  children: AVAILABLE_ICONS.map(icon => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: icon.value,\n                    children: icon.name\n                  }, icon.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 654,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 23\n                }, this) : ((_AVAILABLE_ICONS$find = AVAILABLE_ICONS.find(i => i.value === preference.icon)) === null || _AVAILABLE_ICONS$find === void 0 ? void 0 : _AVAILABLE_ICONS$find.name) || preference.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 19\n              }, this)]\n            }, preference.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: editMode ? 6 : 5,\n              className: \"no-results\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"no-results-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fas fa-info-circle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 669,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Aucune pr\\xE9f\\xE9rence de marqueur n'est d\\xE9finie\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 670,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), selectedPreferences.length > 0 && editMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: handleDeleteSelected,\n        disabled: loading,\n        style: {\n          backgroundColor: '#f44336',\n          color: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-trash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 13\n        }, this), \" Supprimer les \", selectedPreferences.length, \" \\xE9l\\xE9ment\", selectedPreferences.length > 1 ? 's' : '', \" s\\xE9lectionn\\xE9\", selectedPreferences.length > 1 ? 's' : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preferences-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-info-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this), \" Les modifications des pr\\xE9f\\xE9rences de marqueurs seront appliqu\\xE9es \\xE0 la carte apr\\xE8s l'enregistrement.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this), editMode ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-lightbulb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), \" Astuce : Cliquez sur une ligne pour la s\\xE9lectionner rapidement.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this), \" Vous pouvez r\\xE9initialiser toutes les pr\\xE9f\\xE9rences aux valeurs par d\\xE9faut en cliquant sur le bouton \\\"R\\xE9initialiser\\\".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n_s(MarkerPreferences, \"1B5CQNxn4LTJDZYzdddLkD7AS78=\");\n_c = MarkerPreferences;\nexport default MarkerPreferences;\nvar _c;\n$RefreshReg$(_c, \"MarkerPreferences\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","getDocs","addDoc","updateDoc","deleteDoc","doc","query","where","jsxDEV","_jsxDEV","Fragment","_Fragment","AVAILABLE_COLORS","name","value","AVAILABLE_ICONS","SITE_TYPES","MarkerPreferences","_s","preferences","setPreferences","loading","setLoading","error","setError","editMode","setEditMode","editingPreferences","setEditingPreferences","previewColors","setPreviewColors","selectedPreferences","setSelectedPreferences","selectAll","setSelectAll","fetchPreferences","map","pref","id","length","preferencesRef","snapshot","preferencesData","docs","data","createDefaultPreferences","checkAndRemoveDuplicates","initialPreviewColors","forEach","color","console","groupedBySiteType","siteType","toLowerCase","trim","push","duplicatesRemoved","updatedPreferences","prefsForType","keepPref","duplicates","duplicate","prefRef","index","findIndex","p","splice","log","defaultPreferences","icon","createdPreferences","q","empty","docRef","toggleEditMode","initialEditState","handleSave","Object","entries","handleColorChange","handleIconChange","handleNameChange","togglePreferenceSelection","includes","filter","prefId","handleSelectAllChange","handleDeleteSelected","confirmMessage","window","confirm","handleAddPreference","newPreference","renderMarkerPreview","preference","_editingPreferences$p","iconClass","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResetToDefaults","ref","onClick","disabled","backgroundColor","fontWeight","marginLeft","width","textAlign","type","checked","onChange","title","htmlFor","_editingPreferences$p2","_editingPreferences$p3","_editingPreferences$p4","_AVAILABLE_ICONS$find","undefined","cursor","e","stopPropagation","target","placeholder","find","i","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/MarkerPreferences.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../config/firebase';\nimport { \n  collection, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc, \n  setDoc,\n  query,\n  where\n} from 'firebase/firestore';\nimport { MarkerPreference } from '../types';\nimport './MarkerPreferences.css';\n\n// Couleurs disponibles pour les marqueurs\nconst AVAILABLE_COLORS = [\n  { name: 'Rouge', value: '#ff3b30' },\n  { name: 'Jaune', value: '#ffcc00' },\n  { name: 'Vert', value: '#34c759' },\n  { name: 'Cyan', value: '#00c7be' },\n  { name: 'Bleu', value: '#007aff' },\n  { name: 'Magenta', value: '#af52de' },\n  { name: 'Rose', value: '#ff2d55' },\n  { name: 'Orange', value: '#ff9500' },\n  { name: 'Violet', value: '#5856d6' },\n  { name: 'Gris', value: '#8e8e93' },\n  { name: 'Noir', value: '#000000' }\n];\n\n// Icônes disponibles pour les marqueurs\nconst AVAILABLE_ICONS = [\n  { name: 'Goutte d\\'eau', value: 'droplet' },\n  { name: 'Cercle', value: 'circle' },\n  { name: 'Carré', value: 'square' },\n  { name: 'Triangle', value: 'triangle' },\n  { name: 'Étoile', value: 'star' },\n  { name: 'Épingle', value: 'pin' }\n];\n\n// Types de sites disponibles\nconst SITE_TYPES = [\n  'Laboratoire',\n  'Clinique',\n  'Plateau technique',\n  'Point de collecte',\n  'Etablissement de santé',\n  'Ehpad',\n  'Vétérinaire'\n];\n\nconst MarkerPreferences: React.FC = () => {\n  const [preferences, setPreferences] = useState<MarkerPreference[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [editMode, setEditMode] = useState(false);\n  const [editingPreferences, setEditingPreferences] = useState<{[key: string]: MarkerPreference}>({});\n  const [previewColors, setPreviewColors] = useState<{[key: string]: string}>({});\n  \n  // États pour la sélection\n  const [selectedPreferences, setSelectedPreferences] = useState<string[]>([]);\n  const [selectAll, setSelectAll] = useState(false);\n  \n  useEffect(() => {\n    fetchPreferences();\n  }, []);\n\n  // Effet pour gérer la sélection/désélection de toutes les préférences\n  useEffect(() => {\n    if (selectAll) {\n      setSelectedPreferences(preferences.map(pref => pref.id));\n    } else if (selectedPreferences.length === preferences.length && preferences.length > 0) {\n      setSelectedPreferences([]);\n    }\n  }, [selectAll, preferences]);\n\n  const fetchPreferences = async () => {\n    try {\n      setLoading(true);\n      const preferencesRef = collection(db, 'markerPreferences');\n      const snapshot = await getDocs(preferencesRef);\n      \n      let preferencesData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as MarkerPreference[];\n      \n      // Si aucune préférence n'existe, créer les préférences par défaut\n      if (preferencesData.length === 0) {\n        preferencesData = await createDefaultPreferences();\n      } else {\n        // Vérifier et supprimer les doublons\n        preferencesData = await checkAndRemoveDuplicates(preferencesData);\n      }\n      \n      setPreferences(preferencesData);\n      \n      // Initialiser les couleurs de prévisualisation\n      const initialPreviewColors: {[key: string]: string} = {};\n      preferencesData.forEach(pref => {\n        initialPreviewColors[pref.id] = pref.color;\n      });\n      setPreviewColors(initialPreviewColors);\n      \n    } catch (error) {\n      console.error('Erreur lors de la récupération des préférences de marqueurs:', error);\n      setError('Erreur lors de la récupération des préférences de marqueurs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour vérifier et supprimer les doublons\n  const checkAndRemoveDuplicates = async (preferences: MarkerPreference[]): Promise<MarkerPreference[]> => {\n    // Regrouper les préférences par type de site\n    const groupedBySiteType: { [key: string]: MarkerPreference[] } = {};\n    \n    preferences.forEach(pref => {\n      const siteType = pref.siteType.toLowerCase().trim();\n      if (!groupedBySiteType[siteType]) {\n        groupedBySiteType[siteType] = [];\n      }\n      groupedBySiteType[siteType].push(pref);\n    });\n    \n    // Identifier et supprimer les doublons\n    const duplicatesRemoved = [];\n    const updatedPreferences = [...preferences];\n    \n    for (const siteType in groupedBySiteType) {\n      const prefsForType = groupedBySiteType[siteType];\n      \n      if (prefsForType.length > 1) {\n        // Garder la première préférence et supprimer les autres\n        const [keepPref, ...duplicates] = prefsForType;\n        \n        for (const duplicate of duplicates) {\n          try {\n            const prefRef = doc(db, 'markerPreferences', duplicate.id);\n            await deleteDoc(prefRef);\n            duplicatesRemoved.push(duplicate);\n            \n            // Retirer le doublon de la liste des préférences\n            const index = updatedPreferences.findIndex(p => p.id === duplicate.id);\n            if (index !== -1) {\n              updatedPreferences.splice(index, 1);\n            }\n          } catch (error) {\n            console.error(`Erreur lors de la suppression du doublon ${duplicate.id}:`, error);\n          }\n        }\n      }\n    }\n    \n    if (duplicatesRemoved.length > 0) {\n      console.log(`${duplicatesRemoved.length} doublons de préférences ont été supprimés.`);\n    }\n    \n    return updatedPreferences;\n  };\n\n  const createDefaultPreferences = async (): Promise<MarkerPreference[]> => {\n    const defaultPreferences: Partial<MarkerPreference>[] = [\n      { siteType: 'Laboratoire', color: '#ff3b30', icon: 'droplet', name: 'Laboratoire' },\n      { siteType: 'Clinique', color: '#ffcc00', icon: 'droplet', name: 'Clinique' },\n      { siteType: 'Plateau technique', color: '#34c759', icon: 'droplet', name: 'Plateau technique' },\n      { siteType: 'Point de collecte', color: '#00c7be', icon: 'droplet', name: 'Point de collecte' },\n      { siteType: 'Etablissement de santé', color: '#007aff', icon: 'droplet', name: 'Établissement de santé' },\n      { siteType: 'Ehpad', color: '#af52de', icon: 'droplet', name: 'Ehpad' },\n      { siteType: 'Vétérinaire', color: '#ff2d55', icon: 'droplet', name: 'Vétérinaire' }\n    ];\n    \n    const createdPreferences: MarkerPreference[] = [];\n    \n    for (const pref of defaultPreferences) {\n      try {\n        // Vérifier si une préférence pour ce type de site existe déjà\n        const preferencesRef = collection(db, 'markerPreferences');\n        const q = query(preferencesRef, where(\"siteType\", \"==\", pref.siteType));\n        const snapshot = await getDocs(q);\n        \n        if (snapshot.empty) {\n          // Ajouter seulement si aucune préférence n'existe pour ce type de site\n          const docRef = await addDoc(collection(db, 'markerPreferences'), pref);\n          createdPreferences.push({\n            id: docRef.id,\n            ...pref\n          } as MarkerPreference);\n        } else {\n          // Utiliser la préférence existante\n          snapshot.docs.forEach(doc => {\n            createdPreferences.push({\n              id: doc.id,\n              ...doc.data()\n            } as MarkerPreference);\n          });\n        }\n      } catch (error) {\n        console.error('Erreur lors de la création des préférences par défaut:', error);\n      }\n    }\n    \n    return createdPreferences;\n  };\n\n  const toggleEditMode = () => {\n    if (editMode) {\n      // Sortir du mode édition sans sauvegarder\n      setEditingPreferences({});\n      setSelectedPreferences([]);\n      setSelectAll(false);\n    } else {\n      // Entrer en mode édition\n      const initialEditState: {[key: string]: MarkerPreference} = {};\n      preferences.forEach(pref => {\n        initialEditState[pref.id] = { ...pref };\n      });\n      setEditingPreferences(initialEditState);\n    }\n    setEditMode(!editMode);\n  };\n\n  const handleSave = async () => {\n    try {\n      setLoading(true);\n      \n      // Mettre à jour les préférences modifiées\n      for (const [id, pref] of Object.entries(editingPreferences)) {\n        const prefRef = doc(db, 'markerPreferences', id);\n        await updateDoc(prefRef, {\n          color: pref.color,\n          icon: pref.icon,\n          name: pref.name\n        });\n      }\n      \n      // Recharger les préférences\n      await fetchPreferences();\n      \n      // Sortir du mode édition\n      setEditMode(false);\n      setEditingPreferences({});\n      setSelectedPreferences([]);\n      setSelectAll(false);\n      \n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde des préférences:', error);\n      setError('Erreur lors de la sauvegarde des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleColorChange = (id: string, color: string) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        color\n      }\n    });\n    \n    // Mettre à jour la prévisualisation\n    setPreviewColors({\n      ...previewColors,\n      [id]: color\n    });\n  };\n\n  const handleIconChange = (id: string, icon: string) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        icon\n      }\n    });\n  };\n\n  const handleNameChange = (id: string, name: string) => {\n    setEditingPreferences({\n      ...editingPreferences,\n      [id]: {\n        ...editingPreferences[id],\n        name\n      }\n    });\n  };\n\n  // Fonction pour gérer la sélection/désélection d'une préférence\n  const togglePreferenceSelection = (id: string) => {\n    if (selectedPreferences.includes(id)) {\n      setSelectedPreferences(selectedPreferences.filter(prefId => prefId !== id));\n      // Si on désélectionne une préférence, on désactive aussi \"Tout sélectionner\"\n      setSelectAll(false);\n    } else {\n      setSelectedPreferences([...selectedPreferences, id]);\n      // Si toutes les préférences sont sélectionnées, on active \"Tout sélectionner\"\n      if (selectedPreferences.length + 1 === preferences.length) {\n        setSelectAll(true);\n      }\n    }\n  };\n\n  // Fonction pour gérer la sélection/désélection de toutes les préférences\n  const handleSelectAllChange = () => {\n    setSelectAll(!selectAll);\n  };\n\n  // Fonction pour supprimer les préférences sélectionnées\n  const handleDeleteSelected = async () => {\n    if (selectedPreferences.length === 0) {\n      return;\n    }\n\n    // Confirmation avant suppression\n    const confirmMessage = `Êtes-vous sûr de vouloir supprimer ${selectedPreferences.length} préférence(s) de marqueur ?`;\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Supprimer les préférences sélectionnées\n      for (const prefId of selectedPreferences) {\n        const prefRef = doc(db, 'markerPreferences', prefId);\n        await deleteDoc(prefRef);\n      }\n      \n      // Recharger les préférences\n      await fetchPreferences();\n      \n      // Réinitialiser les sélections\n      setSelectedPreferences([]);\n      setSelectAll(false);\n      \n    } catch (error) {\n      console.error('Erreur lors de la suppression des préférences:', error);\n      setError('Erreur lors de la suppression des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fonction pour ajouter une nouvelle préférence\n  const handleAddPreference = async () => {\n    try {\n      setLoading(true);\n      \n      // Créer une nouvelle préférence avec des valeurs par défaut\n      const newPreference: Partial<MarkerPreference> = {\n        siteType: '',\n        color: '#007aff',\n        icon: 'droplet',\n        name: 'Nouveau type'\n      };\n      \n      // Ajouter la nouvelle préférence à Firestore\n      const docRef = await addDoc(collection(db, 'markerPreferences'), newPreference);\n      \n      // Recharger les préférences\n      await fetchPreferences();\n      \n      // Activer le mode édition si ce n'est pas déjà le cas\n      if (!editMode) {\n        toggleEditMode();\n      }\n      \n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout d\\'une nouvelle préférence:', error);\n      setError('Erreur lors de l\\'ajout d\\'une nouvelle préférence');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderMarkerPreview = (preference: MarkerPreference) => {\n    const color = editMode \n      ? previewColors[preference.id] || preference.color\n      : preference.color;\n    \n    const icon = editMode \n      ? editingPreferences[preference.id]?.icon || preference.icon\n      : preference.icon;\n    \n    let iconClass = '';\n    \n    switch (icon) {\n      case 'droplet':\n        iconClass = 'fas fa-tint';\n        break;\n      case 'circle':\n        iconClass = 'fas fa-circle';\n        break;\n      case 'square':\n        iconClass = 'fas fa-square';\n        break;\n      case 'triangle':\n        iconClass = 'fas fa-triangle';\n        break;\n      case 'star':\n        iconClass = 'fas fa-star';\n        break;\n      case 'pin':\n        iconClass = 'fas fa-map-marker-alt';\n        break;\n      default:\n        iconClass = 'fas fa-tint';\n    }\n    \n    return (\n      <div className=\"marker-preview\" style={{ color }}>\n        <i className={iconClass}></i>\n      </div>\n    );\n  };\n\n  // Fonction pour réinitialiser les préférences aux valeurs par défaut\n  const handleResetToDefaults = async () => {\n    // Confirmation avant réinitialisation\n    const confirmMessage = \"Êtes-vous sûr de vouloir réinitialiser toutes les préférences de marqueurs aux valeurs par défaut ? Cette action supprimera toutes les personnalisations existantes.\";\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Supprimer toutes les préférences existantes\n      const preferencesRef = collection(db, 'markerPreferences');\n      const snapshot = await getDocs(preferencesRef);\n      \n      for (const doc of snapshot.docs) {\n        await deleteDoc(doc.ref);\n      }\n      \n      // Créer les préférences par défaut\n      await createDefaultPreferences();\n      \n      // Recharger les préférences\n      await fetchPreferences();\n      \n      // Réinitialiser les sélections\n      setSelectedPreferences([]);\n      setSelectAll(false);\n      \n      // Sortir du mode édition si actif\n      if (editMode) {\n        setEditMode(false);\n        setEditingPreferences({});\n      }\n      \n    } catch (error) {\n      console.error('Erreur lors de la réinitialisation des préférences:', error);\n      setError('Erreur lors de la réinitialisation des préférences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading && preferences.length === 0) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Chargement des préférences de marqueurs...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"marker-preferences-container\">\n      <div className=\"section-header\">\n        <h2 className=\"section-title\">\n          Préférences des marqueurs\n          {selectedPreferences.length > 0 && (\n            <span className=\"selection-count\"> ({selectedPreferences.length} sélectionné{selectedPreferences.length > 1 ? 's' : ''})</span>\n          )}\n        </h2>\n        <div className=\"header-actions\">\n          {editMode ? (\n            <>\n              <button \n                className=\"button\" \n                onClick={handleSave}\n                disabled={loading}\n                style={{ \n                  backgroundColor: '#4CAF50',\n                  color: 'white',\n                  fontWeight: 'bold'\n                }}\n              >\n                <i className=\"fas fa-save\"></i> Enregistrer\n              </button>\n              {selectedPreferences.length > 0 && (\n                <button \n                  className=\"button\" \n                  onClick={handleDeleteSelected}\n                  disabled={loading}\n                  style={{ \n                    backgroundColor: '#f44336',\n                    color: 'white',\n                    marginLeft: '10px'\n                  }}\n                >\n                  <i className=\"fas fa-trash\"></i> Supprimer ({selectedPreferences.length})\n                </button>\n              )}\n              <button \n                className=\"button\" \n                onClick={handleAddPreference}\n                disabled={loading}\n                style={{ \n                  backgroundColor: '#2196F3',\n                  color: 'white',\n                  marginLeft: '10px'\n                }}\n              >\n                <i className=\"fas fa-plus\"></i> Ajouter\n              </button>\n              <button \n                className=\"button button-secondary\" \n                onClick={toggleEditMode}\n                style={{ marginLeft: '10px' }}\n                disabled={loading}\n              >\n                <i className=\"fas fa-times\"></i> Annuler\n              </button>\n            </>\n          ) : (\n            <>\n              <button \n                className=\"button\" \n                onClick={toggleEditMode}\n              >\n                <i className=\"fas fa-edit\"></i> Modifier\n              </button>\n              <button \n                className=\"button button-secondary\" \n                onClick={handleResetToDefaults}\n                disabled={loading}\n                style={{ marginLeft: '10px' }}\n              >\n                <i className=\"fas fa-undo\"></i> Réinitialiser\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"preferences-table-container\">\n        <table className=\"preferences-table\">\n          <thead>\n            <tr>\n              {editMode && (\n                <th style={{ width: '40px', textAlign: 'center' }}>\n                  <input \n                    type=\"checkbox\" \n                    checked={selectAll}\n                    onChange={handleSelectAllChange}\n                    title=\"Sélectionner/Désélectionner tout\"\n                    id=\"select-all-checkbox\"\n                  />\n                  <label htmlFor=\"select-all-checkbox\" className=\"sr-only\">Sélectionner tout</label>\n                </th>\n              )}\n              <th>Aperçu</th>\n              <th>Type de site</th>\n              <th>Nom affiché</th>\n              <th>Couleur</th>\n              <th>Icône</th>\n            </tr>\n          </thead>\n          <tbody>\n            {preferences.length > 0 ? (\n              preferences.map(preference => (\n                <tr \n                  key={preference.id}\n                  className={selectedPreferences.includes(preference.id) ? 'selected-row' : ''}\n                  onClick={editMode ? () => togglePreferenceSelection(preference.id) : undefined}\n                  style={editMode ? { cursor: 'pointer' } : undefined}\n                >\n                  {editMode && (\n                    <td style={{ textAlign: 'center' }}>\n                      <input \n                        type=\"checkbox\" \n                        checked={selectedPreferences.includes(preference.id)} \n                        onChange={() => togglePreferenceSelection(preference.id)}\n                        title=\"Sélectionner cette préférence\"\n                        id={`select-preference-${preference.id}`}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                      <label htmlFor={`select-preference-${preference.id}`} className=\"sr-only\">\n                        Sélectionner {preference.name}\n                      </label>\n                    </td>\n                  )}\n                  <td>{renderMarkerPreview(preference)}</td>\n                  <td>{preference.siteType}</td>\n                  <td>\n                    {editMode ? (\n                      <input\n                        type=\"text\"\n                        value={editingPreferences[preference.id]?.name || preference.name}\n                        onChange={(e) => handleNameChange(preference.id, e.target.value)}\n                        className=\"edit-input\"\n                        aria-label={`Nom pour ${preference.siteType}`}\n                        placeholder={`Nom pour ${preference.siteType}`}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    ) : (\n                      preference.name\n                    )}\n                  </td>\n                  <td>\n                    {editMode ? (\n                      <select\n                        value={editingPreferences[preference.id]?.color || preference.color}\n                        onChange={(e) => handleColorChange(preference.id, e.target.value)}\n                        className=\"edit-select\"\n                        style={{ backgroundColor: previewColors[preference.id] || preference.color, color: '#fff' }}\n                        aria-label={`Couleur pour ${preference.siteType}`}\n                        title={`Sélectionner une couleur pour ${preference.siteType}`}\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        {AVAILABLE_COLORS.map(color => (\n                          <option \n                            key={color.value} \n                            value={color.value}\n                            style={{ backgroundColor: color.value, color: '#fff' }}\n                          >\n                            {color.name}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      <div className=\"color-preview\" style={{ backgroundColor: preference.color }}></div>\n                    )}\n                  </td>\n                  <td>\n                    {editMode ? (\n                      <select\n                        value={editingPreferences[preference.id]?.icon || preference.icon}\n                        onChange={(e) => handleIconChange(preference.id, e.target.value)}\n                        className=\"edit-select\"\n                        aria-label={`Icône pour ${preference.siteType}`}\n                        title={`Sélectionner une icône pour ${preference.siteType}`}\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        {AVAILABLE_ICONS.map(icon => (\n                          <option key={icon.value} value={icon.value}>\n                            {icon.name}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      AVAILABLE_ICONS.find(i => i.value === preference.icon)?.name || preference.icon\n                    )}\n                  </td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={editMode ? 6 : 5} className=\"no-results\">\n                  <div className=\"no-results-message\">\n                    <i className=\"fas fa-info-circle\"></i>\n                    <p>Aucune préférence de marqueur n'est définie</p>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {selectedPreferences.length > 0 && editMode && (\n        <div className=\"selection-actions\">\n          <button \n            className=\"button\" \n            onClick={handleDeleteSelected}\n            disabled={loading}\n            style={{ \n              backgroundColor: '#f44336',\n              color: 'white'\n            }}\n          >\n            <i className=\"fas fa-trash\"></i> Supprimer les {selectedPreferences.length} élément{selectedPreferences.length > 1 ? 's' : ''} sélectionné{selectedPreferences.length > 1 ? 's' : ''}\n          </button>\n        </div>\n      )}\n      \n      <div className=\"preferences-info\">\n        <p>\n          <i className=\"fas fa-info-circle\"></i> Les modifications des préférences de marqueurs seront appliquées à la carte après l'enregistrement.\n        </p>\n        {editMode ? (\n          <p>\n            <i className=\"fas fa-lightbulb\"></i> Astuce : Cliquez sur une ligne pour la sélectionner rapidement.\n          </p>\n        ) : (\n          <p>\n            <i className=\"fas fa-undo\"></i> Vous pouvez réinitialiser toutes les préférences aux valeurs par défaut en cliquant sur le bouton \"Réinitialiser\".\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MarkerPreferences; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}