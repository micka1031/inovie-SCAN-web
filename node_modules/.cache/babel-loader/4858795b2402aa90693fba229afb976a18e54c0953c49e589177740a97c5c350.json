{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\components\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { hasPageAccess } from '../utils/pageAccessUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n/**\n * Composant pour prot√©ger les routes en fonction du r√¥le de l'utilisateur, des permissions et de l'acc√®s aux pages\n * @param children - Le composant √† afficher si l'utilisateur a acc√®s\n * @param userRole - Le r√¥le de l'utilisateur actuel\n * @param allowedRoles - Les r√¥les autoris√©s √† acc√©der √† cette route\n * @param requiredPermissions - Les permissions requises pour acc√©der √† cette route\n * @param pageName - Le nom de la page pour v√©rifier l'acc√®s sp√©cifique\n * @param roles - Liste des r√¥les disponibles\n */\nconst ProtectedRoute = ({\n  children,\n  userRole,\n  allowedRoles,\n  requiredPermissions = [],\n  pageName,\n  roles\n}) => {\n  _s();\n  const {\n    currentUser,\n    hasPermission,\n    isAllowedRoute\n  } = useAuth();\n  const location = useLocation();\n  const [accessChecked, setAccessChecked] = useState(false);\n  const [hasAccess, setHasAccess] = useState(false);\n\n  // Helper pour v√©rifier en toute s√©curit√© l'acc√®s √† une page pour un r√¥le\n  const checkPageAccess = (role, page) => {\n    var _role$pageAccess;\n    if (!role || !page) return false;\n    if (role.isAdmin === true) return true;\n\n    // Convertir pageName en cl√© de pageAccess de mani√®re s√ªre\n    const pageKey = page.toLowerCase();\n    return ((_role$pageAccess = role.pageAccess) === null || _role$pageAccess === void 0 ? void 0 : _role$pageAccess[pageKey]) === true;\n  };\n  useEffect(() => {\n    // V√©rifier si l'utilisateur a le r√¥le requis\n    const hasRole = allowedRoles.includes(userRole) || allowedRoles.includes('default');\n\n    // V√©rifier si l'utilisateur a toutes les permissions requises\n    const hasAllPermissions = requiredPermissions.length === 0 || requiredPermissions.every(permission => hasPermission(permission));\n\n    // V√©rifier si l'utilisateur est autoris√© √† acc√©der √† cette route\n    const hasRouteAccess = isAllowedRoute(location.pathname);\n\n    // V√©rifier l'acc√®s sp√©cifique √† la page si un nom de page est fourni\n    const hasPageSpecificAccess = pageName ? hasPageAccess(currentUser, pageName, roles) : true;\n\n    // D√©bogage avanc√© pour les probl√®mes d'acc√®s\n    console.log('V√âRIFICATION D\\'ACC√àS D√âTAILL√âE:', {\n      url: location.pathname,\n      page: pageName,\n      userRole: userRole,\n      allowedRoles: allowedRoles,\n      hasRole: hasRole,\n      requiredPermissions: requiredPermissions,\n      userPermissions: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.permissions) || [],\n      hasAllPermissions: hasAllPermissions,\n      hasRouteAccess: hasRouteAccess,\n      // V√©rification sp√©cifique de l'acc√®s √† la page\n      pageAccessCheck: {\n        pageName: pageName,\n        allRoles: roles.map(r => ({\n          name: r.name,\n          pageAccess: r.pageAccess\n        })),\n        userRoleObject: roles.find(role => role.name === userRole),\n        hasPageAccess: pageName ? checkPageAccess(roles.find(role => role.name === userRole), pageName) : true\n      },\n      hasPageSpecificAccess: hasPageSpecificAccess,\n      currentUser: {\n        ...currentUser,\n        role: currentUser === null || currentUser === void 0 ? void 0 : currentUser.role\n      }\n    });\n    console.log(`üîë D√âCISION FINALE pour ${location.pathname} (${pageName || 'sans nom de page'}):`);\n    console.log(`- R√¥le autoris√©: ${hasRole ? 'OUI' : 'NON'} (${userRole} dans [${allowedRoles.join(', ')}])`);\n    console.log(`- Permissions requises: ${hasAllPermissions ? 'OUI' : 'NON'} (${requiredPermissions.join(', ')})`);\n    console.log(`- Acc√®s sp√©cifique √† la page: ${hasPageSpecificAccess ? 'OUI' : 'NON'}`);\n    console.log(`- Route autoris√©e: ${hasRouteAccess ? 'OUI' : 'NON'}`);\n    console.log(`- R√©sultat final: ${hasRole && hasAllPermissions && hasPageSpecificAccess || hasRouteAccess ? '‚úÖ ACC√àS AUTORIS√â' : '‚ùå ACC√àS REFUS√â'}`);\n\n    // Si l'utilisateur a le r√¥le requis, toutes les permissions requises, acc√®s √† la route et acc√®s √† la page, accorder l'acc√®s\n    setHasAccess(hasRole && hasAllPermissions && hasPageSpecificAccess || hasRouteAccess);\n    setAccessChecked(true);\n  }, [userRole, currentUser, location.pathname, roles, allowedRoles, requiredPermissions, pageName, hasPermission, isAllowedRoute]);\n\n  // Attendre que la v√©rification d'acc√®s soit termin√©e\n  if (!accessChecked) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"V\\xE9rification des permissions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Si l'acc√®s est accord√©, afficher le composant enfant\n  if (hasAccess) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false);\n  }\n\n  // Pour que l'utilisateur puisse bien comprendre pourquoi l'acc√®s est refus√©\n  console.log('ACC√àS REFUS√â - Redirection vers la page d\\'accueil');\n\n  // Sinon, rediriger vers la page d'accueil\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"qcNmIHYcUEStKJsi82QN0rYlRig=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","useLocation","useAuth","hasPageAccess","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","userRole","allowedRoles","requiredPermissions","pageName","roles","_s","currentUser","hasPermission","isAllowedRoute","location","accessChecked","setAccessChecked","hasAccess","setHasAccess","checkPageAccess","role","page","_role$pageAccess","isAdmin","pageKey","toLowerCase","pageAccess","hasRole","includes","hasAllPermissions","length","every","permission","hasRouteAccess","pathname","hasPageSpecificAccess","console","log","url","userPermissions","permissions","pageAccessCheck","allRoles","map","r","name","userRoleObject","find","join","className","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { hasPageAccess, PAGES, PageName } from '../utils/pageAccessUtils';\nimport { Role } from '../types/roles';\nimport { RoleService } from '../services/RoleService';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  userRole: string;\n  allowedRoles: string[];\n  requiredPermissions?: string[];\n  pageName?: PageName;\n  roles: Role[];\n}\n\n/**\n * Composant pour prot√©ger les routes en fonction du r√¥le de l'utilisateur, des permissions et de l'acc√®s aux pages\n * @param children - Le composant √† afficher si l'utilisateur a acc√®s\n * @param userRole - Le r√¥le de l'utilisateur actuel\n * @param allowedRoles - Les r√¥les autoris√©s √† acc√©der √† cette route\n * @param requiredPermissions - Les permissions requises pour acc√©der √† cette route\n * @param pageName - Le nom de la page pour v√©rifier l'acc√®s sp√©cifique\n * @param roles - Liste des r√¥les disponibles\n */\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  userRole, \n  allowedRoles,\n  requiredPermissions = [],\n  pageName,\n  roles\n}) => {\n  const { currentUser, hasPermission, isAllowedRoute } = useAuth();\n  const location = useLocation();\n  const [accessChecked, setAccessChecked] = useState(false);\n  const [hasAccess, setHasAccess] = useState(false);\n  \n  // Helper pour v√©rifier en toute s√©curit√© l'acc√®s √† une page pour un r√¥le\n  const checkPageAccess = (role: Role | undefined, page: PageName | undefined): boolean => {\n    if (!role || !page) return false;\n    \n    if (role.isAdmin === true) return true;\n    \n    // Convertir pageName en cl√© de pageAccess de mani√®re s√ªre\n    const pageKey = page.toLowerCase() as keyof typeof role.pageAccess;\n    return role.pageAccess?.[pageKey] === true;\n  };\n  \n  useEffect(() => {\n    // V√©rifier si l'utilisateur a le r√¥le requis\n    const hasRole = allowedRoles.includes(userRole) || allowedRoles.includes('default');\n    \n    // V√©rifier si l'utilisateur a toutes les permissions requises\n    const hasAllPermissions = requiredPermissions.length === 0 || \n      requiredPermissions.every(permission => hasPermission(permission));\n      \n    // V√©rifier si l'utilisateur est autoris√© √† acc√©der √† cette route\n    const hasRouteAccess = isAllowedRoute(location.pathname);\n    \n    // V√©rifier l'acc√®s sp√©cifique √† la page si un nom de page est fourni\n    const hasPageSpecificAccess = pageName \n      ? hasPageAccess(currentUser, pageName, roles) \n      : true;\n    \n    // D√©bogage avanc√© pour les probl√®mes d'acc√®s\n    console.log('V√âRIFICATION D\\'ACC√àS D√âTAILL√âE:', {\n      url: location.pathname,\n      page: pageName,\n      userRole: userRole,\n      allowedRoles: allowedRoles,\n      hasRole: hasRole,\n      \n      requiredPermissions: requiredPermissions,\n      userPermissions: currentUser?.permissions || [],\n      hasAllPermissions: hasAllPermissions,\n      \n      hasRouteAccess: hasRouteAccess,\n      \n      // V√©rification sp√©cifique de l'acc√®s √† la page\n      pageAccessCheck: {\n        pageName: pageName,\n        allRoles: roles.map(r => ({name: r.name, pageAccess: r.pageAccess})),\n        userRoleObject: roles.find(role => role.name === userRole),\n        hasPageAccess: pageName ? checkPageAccess(roles.find(role => role.name === userRole), pageName) : true\n      },\n      \n      hasPageSpecificAccess: hasPageSpecificAccess,\n      \n      currentUser: {\n        ...currentUser,\n        role: currentUser?.role\n      }\n    });\n    \n    console.log(`üîë D√âCISION FINALE pour ${location.pathname} (${pageName || 'sans nom de page'}):`);\n    console.log(`- R√¥le autoris√©: ${hasRole ? 'OUI' : 'NON'} (${userRole} dans [${allowedRoles.join(', ')}])`);\n    console.log(`- Permissions requises: ${hasAllPermissions ? 'OUI' : 'NON'} (${requiredPermissions.join(', ')})`);\n    console.log(`- Acc√®s sp√©cifique √† la page: ${hasPageSpecificAccess ? 'OUI' : 'NON'}`);\n    console.log(`- Route autoris√©e: ${hasRouteAccess ? 'OUI' : 'NON'}`);\n    console.log(`- R√©sultat final: ${(hasRole && hasAllPermissions && hasPageSpecificAccess) || hasRouteAccess ? '‚úÖ ACC√àS AUTORIS√â' : '‚ùå ACC√àS REFUS√â'}`);\n    \n    // Si l'utilisateur a le r√¥le requis, toutes les permissions requises, acc√®s √† la route et acc√®s √† la page, accorder l'acc√®s\n    setHasAccess((hasRole && hasAllPermissions && hasPageSpecificAccess) || hasRouteAccess);\n    setAccessChecked(true);\n    \n  }, [userRole, currentUser, location.pathname, roles, allowedRoles, requiredPermissions, pageName, hasPermission, isAllowedRoute]);\n  \n  // Attendre que la v√©rification d'acc√®s soit termin√©e\n  if (!accessChecked) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"spinner\"></div>\n        <p>V√©rification des permissions...</p>\n      </div>\n    );\n  }\n  \n  // Si l'acc√®s est accord√©, afficher le composant enfant\n  if (hasAccess) {\n    return <>{children}</>;\n  }\n\n  // Pour que l'utilisateur puisse bien comprendre pourquoi l'acc√®s est refus√©\n  console.log('ACC√àS REFUS√â - Redirection vers la page d\\'accueil');\n\n  // Sinon, rediriger vers la page d'accueil\n  return <Navigate to=\"/\" replace />;\n};\n\nexport default ProtectedRoute;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}