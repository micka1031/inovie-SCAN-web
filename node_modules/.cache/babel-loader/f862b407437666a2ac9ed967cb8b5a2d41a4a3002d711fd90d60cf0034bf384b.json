{"ast":null,"code":"var _PoleService;import{collection,getDocs,getDoc,doc,query,where}from'firebase/firestore';import{db}from'../config/firebase';import{useState,useEffect}from'react';/**\n * Service de gestion des pôles\n */export class PoleService{// Constructeur privé pour le pattern Singleton\nconstructor(){this.collectionName='poles';this.poles=[];this.lastFetch=0;this.fetchPromise=null;}// Méthode pour obtenir l'instance\nstatic getInstance(){if(!PoleService.instance){PoleService.instance=new PoleService();}return PoleService.instance;}/**\n   * Récupérer tous les pôles avec possibilité de mise en cache\n   * @param forceRefresh Forcer le rafraîchissement des données\n   * @param cacheTime Durée de validité du cache en millisecondes (par défaut 5 minutes)\n   */async getPoles(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let cacheTime=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5*60*1000;const now=Date.now();// Si une requête est déjà en cours, attendre son résultat\nif(this.fetchPromise){return this.fetchPromise;}// Si les données sont en cache et encore valides, les retourner\nif(!forceRefresh&&this.poles.length>0&&now-this.lastFetch<cacheTime){return this.poles;}// Sinon, faire une nouvelle requête\nthis.fetchPromise=this.fetchPolesFromFirestore();try{this.poles=await this.fetchPromise;this.lastFetch=now;return this.poles;}catch(error){console.error('Erreur lors de la récupération des pôles:',error);throw error;}finally{this.fetchPromise=null;}}/**\n   * Récupérer tous les pôles depuis Firestore\n   */async fetchPolesFromFirestore(){try{const polesRef=collection(db,this.collectionName);const snapshot=await getDocs(polesRef);return snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));}catch(error){console.error('Erreur lors de la récupération des pôles depuis Firestore:',error);throw error;}}/**\n   * Récupérer un pôle par son ID\n   */async getPoleById(id){try{// D'abord, chercher dans le cache\nif(this.poles.length>0){const cachedPole=this.poles.find(pole=>pole.id===id);if(cachedPole)return cachedPole;}// Sinon, chercher dans Firestore\nconst poleRef=doc(db,this.collectionName,id);const snapshot=await getDoc(poleRef);if(snapshot.exists()){return{id:snapshot.id,...snapshot.data()};}return null;}catch(error){console.error(`Erreur lors de la récupération du pôle ${id}:`,error);throw error;}}/**\n   * Récupérer un pôle par son nom\n   */async getPoleByName(name){try{// D'abord, chercher dans le cache\nif(this.poles.length>0){const cachedPole=this.poles.find(pole=>pole.nom===name);if(cachedPole)return cachedPole;}// Sinon, chercher dans Firestore\nconst polesRef=collection(db,this.collectionName);const q=query(polesRef,where('nom','==',name));const snapshot=await getDocs(q);if(!snapshot.empty){const doc=snapshot.docs[0];return{id:doc.id,...doc.data()};}return null;}catch(error){console.error(`Erreur lors de la recherche du pôle ${name}:`,error);throw error;}}}// Composant React Hook pour utiliser le service des pôles\n_PoleService=PoleService;PoleService.instance=void 0;export const usePoles=function(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const[poles,setPoles]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchPoles=async()=>{try{setLoading(true);const poleService=PoleService.getInstance();const fetchedPoles=await poleService.getPoles(forceRefresh);setPoles(fetchedPoles);setError(null);}catch(err){setError(err);}finally{setLoading(false);}};fetchPoles();},[forceRefresh]);return{poles,loading,error};};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","query","where","db","useState","useEffect","PoleService","constructor","collectionName","poles","lastFetch","fetchPromise","getInstance","instance","getPoles","forceRefresh","arguments","length","undefined","cacheTime","now","Date","fetchPolesFromFirestore","error","console","polesRef","snapshot","docs","map","id","data","getPoleById","cachedPole","find","pole","poleRef","exists","getPoleByName","name","nom","q","empty","_PoleService","usePoles","setPoles","loading","setLoading","setError","fetchPoles","poleService","fetchedPoles","err"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/PoleService.ts"],"sourcesContent":["import { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport React, { useState, useEffect } from 'react';\n\nexport interface Pole {\n  id: string;\n  nom: string;\n  description?: string;\n  selasId?: string;\n  dateCreation: string;\n  dateModification: string;\n}\n\n/**\n * Service de gestion des pôles\n */\nexport class PoleService {\n  private static instance: PoleService;\n  private readonly collectionName = 'poles';\n  private poles: Pole[] = [];\n  private lastFetch: number = 0;\n  private fetchPromise: Promise<Pole[]> | null = null;\n  \n  // Constructeur privé pour le pattern Singleton\n  private constructor() {}\n  \n  // Méthode pour obtenir l'instance\n  public static getInstance(): PoleService {\n    if (!PoleService.instance) {\n      PoleService.instance = new PoleService();\n    }\n    return PoleService.instance;\n  }\n  \n  /**\n   * Récupérer tous les pôles avec possibilité de mise en cache\n   * @param forceRefresh Forcer le rafraîchissement des données\n   * @param cacheTime Durée de validité du cache en millisecondes (par défaut 5 minutes)\n   */\n  public async getPoles(forceRefresh = false, cacheTime = 5 * 60 * 1000): Promise<Pole[]> {\n    const now = Date.now();\n    \n    // Si une requête est déjà en cours, attendre son résultat\n    if (this.fetchPromise) {\n      return this.fetchPromise;\n    }\n    \n    // Si les données sont en cache et encore valides, les retourner\n    if (!forceRefresh && this.poles.length > 0 && now - this.lastFetch < cacheTime) {\n      return this.poles;\n    }\n    \n    // Sinon, faire une nouvelle requête\n    this.fetchPromise = this.fetchPolesFromFirestore();\n    \n    try {\n      this.poles = await this.fetchPromise;\n      this.lastFetch = now;\n      return this.poles;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles:', error);\n      throw error;\n    } finally {\n      this.fetchPromise = null;\n    }\n  }\n  \n  /**\n   * Récupérer tous les pôles depuis Firestore\n   */\n  private async fetchPolesFromFirestore(): Promise<Pole[]> {\n    try {\n      const polesRef = collection(db, this.collectionName);\n      const snapshot = await getDocs(polesRef);\n      \n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      } as Pole));\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles depuis Firestore:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupérer un pôle par son ID\n   */\n  public async getPoleById(id: string): Promise<Pole | null> {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.id === id);\n        if (cachedPole) return cachedPole;\n      }\n      \n      // Sinon, chercher dans Firestore\n      const poleRef = doc(db, this.collectionName, id);\n      const snapshot = await getDoc(poleRef);\n      \n      if (snapshot.exists()) {\n        return {\n          id: snapshot.id,\n          ...snapshot.data()\n        } as Pole;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du pôle ${id}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupérer un pôle par son nom\n   */\n  public async getPoleByName(name: string): Promise<Pole | null> {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.nom === name);\n        if (cachedPole) return cachedPole;\n      }\n      \n      // Sinon, chercher dans Firestore\n      const polesRef = collection(db, this.collectionName);\n      const q = query(polesRef, where('nom', '==', name));\n      const snapshot = await getDocs(q);\n      \n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0];\n        return {\n          id: doc.id,\n          ...doc.data()\n        } as Pole;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la recherche du pôle ${name}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Composant React Hook pour utiliser le service des pôles\nexport const usePoles = (forceRefresh = false) => {\n  const [poles, setPoles] = useState<Pole[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchPoles = async () => {\n      try {\n        setLoading(true);\n        const poleService = PoleService.getInstance();\n        const fetchedPoles = await poleService.getPoles(forceRefresh);\n        setPoles(fetchedPoles);\n        setError(null);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPoles();\n  }, [forceRefresh]);\n\n  return { poles, loading, error };\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}