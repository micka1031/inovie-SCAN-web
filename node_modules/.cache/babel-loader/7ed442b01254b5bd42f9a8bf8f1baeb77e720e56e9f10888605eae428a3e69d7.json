{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\components\\\\PageAccessManagement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { RoleService } from '../services/RoleService';\nimport './PageAccessManagement.css';\n\n// Mapping des noms de pages en français\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_LABELS = {\n  dashboard: 'Tableau de bord',\n  passages: 'Passages',\n  sites: 'Sites',\n  tournees: 'Tournées',\n  vehicules: 'Véhicules',\n  carte: 'Carte',\n  userManagement: 'Gestion des utilisateurs',\n  administration: 'Administration'\n};\n\n// Types de pages possibles\nconst PAGE_TYPES = ['dashboard', 'passages', 'sites', 'tournees', 'vehicules', 'carte', 'userManagement', 'administration'];\nconst PageAccessManagement = () => {\n  _s();\n  const [roles, setRoles] = useState([]);\n  const [selectedRole, setSelectedRole] = useState(null);\n  const [pageAccess, setPageAccess] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState(null);\n  useEffect(() => {\n    const fetchRoles = async () => {\n      try {\n        setLoading(true);\n        const roleService = RoleService.getInstance();\n        const fetchedRoles = await roleService.getRoles();\n        setRoles(fetchedRoles);\n\n        // Sélectionner automatiquement le premier rôle\n        if (fetchedRoles.length > 0 && !selectedRole) {\n          setSelectedRole(fetchedRoles[0]);\n          setPageAccess(fetchedRoles[0].pageAccess || {});\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des rôles:', error);\n        setMessage({\n          text: 'Impossible de charger les rôles. Veuillez réessayer.',\n          type: 'error'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchRoles();\n  }, []);\n  const handleRoleSelect = role => {\n    setSelectedRole(role);\n    setPageAccess(role.pageAccess || {});\n  };\n  const togglePageAccess = pageName => {\n    setPageAccess(prev => ({\n      ...prev,\n      [pageName]: !prev[pageName]\n    }));\n  };\n  const handleSavePageAccess = async () => {\n    if (!selectedRole) return;\n    try {\n      setSaving(true);\n      const roleService = RoleService.getInstance();\n      await roleService.updatePageAccess(selectedRole.id, pageAccess);\n\n      // Forcer le rechargement des rôles globaux\n      await roleService.refreshRoles();\n\n      // Afficher un message de succès\n      setMessage({\n        text: 'Accès aux pages mis à jour avec succès ! Veuillez vous déconnecter et vous reconnecter pour que les changements prennent effet.',\n        type: 'success'\n      });\n\n      // Mettre à jour le rôle sélectionné avec les nouveaux accès\n      const updatedRole = {\n        ...selectedRole,\n        pageAccess\n      };\n      setSelectedRole(updatedRole);\n\n      // Mettre à jour la liste des rôles\n      setRoles(prevRoles => prevRoles.map(role => role.id === updatedRole.id ? updatedRole : role));\n\n      // Cacher le message après 5 secondes\n      setTimeout(() => {\n        setMessage(null);\n      }, 5000);\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour des accès aux pages:\", error);\n      setMessage({\n        text: 'Erreur lors de la mise à jour des accès aux pages.',\n        type: 'error'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-access-loading\",\n      children: \"Chargement des r\\xF4les...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-access-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-access-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gestion des Acc\\xE8s aux Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Configurez les autorisations d'acc\\xE8s pour chaque r\\xF4le\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-access-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"role-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"S\\xE9lectionnez un r\\xF4le\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"role-buttons\",\n          children: roles.map(role => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `role-button ${(selectedRole === null || selectedRole === void 0 ? void 0 : selectedRole.id) === role.id ? 'active' : ''}`,\n            onClick: () => handleRoleSelect(role),\n            children: [role.name, role.isAdmin && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"admin-badge\",\n              children: \"Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 34\n            }, this)]\n          }, role.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), selectedRole && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-access-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Acc\\xE8s aux pages pour \", selectedRole.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-access-cards\",\n          children: PAGE_TYPES.map(pageKey => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"page-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"page-card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"page-name\",\n                children: PAGE_LABELS[pageKey]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"toggle\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: pageAccess[pageKey] || false,\n                  onChange: () => togglePageAccess(pageKey)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"toggle-slider\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this)\n          }, pageKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: handleSavePageAccess,\n            disabled: saving,\n            children: saving ? 'Enregistrement...' : 'Enregistrer les accès'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(PageAccessManagement, \"gbES5tFQOHYS8CowX5xRCs4mF14=\");\n_c = PageAccessManagement;\nexport default PageAccessManagement;\nvar _c;\n$RefreshReg$(_c, \"PageAccessManagement\");","map":{"version":3,"names":["React","useState","useEffect","RoleService","jsxDEV","_jsxDEV","PAGE_LABELS","dashboard","passages","sites","tournees","vehicules","carte","userManagement","administration","PAGE_TYPES","PageAccessManagement","_s","roles","setRoles","selectedRole","setSelectedRole","pageAccess","setPageAccess","loading","setLoading","saving","setSaving","message","setMessage","fetchRoles","roleService","getInstance","fetchedRoles","getRoles","length","error","console","text","type","handleRoleSelect","role","togglePageAccess","pageName","prev","handleSavePageAccess","updatePageAccess","id","refreshRoles","updatedRole","prevRoles","map","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","isAdmin","pageKey","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/components/PageAccessManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Role } from '../types/roles';\nimport { RoleService } from '../services/RoleService';\nimport './PageAccessManagement.css';\n\n// Mapping des noms de pages en français\nconst PAGE_LABELS = {\n  dashboard: 'Tableau de bord',\n  passages: 'Passages',\n  sites: 'Sites',\n  tournees: 'Tournées',\n  vehicules: 'Véhicules',\n  carte: 'Carte',\n  userManagement: 'Gestion des utilisateurs',\n  administration: 'Administration'\n};\n\n// Types de pages possibles\nconst PAGE_TYPES = ['dashboard', 'passages', 'sites', 'tournees', 'vehicules', 'carte', 'userManagement', 'administration'] as const;\ntype PageKey = typeof PAGE_TYPES[number];\n\nconst PageAccessManagement: React.FC = () => {\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [pageAccess, setPageAccess] = useState<{[key in PageKey]?: boolean}>({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState<{text: string, type: 'success' | 'error'} | null>(null);\n\n  useEffect(() => {\n    const fetchRoles = async () => {\n      try {\n        setLoading(true);\n        const roleService = RoleService.getInstance();\n        const fetchedRoles = await roleService.getRoles();\n        setRoles(fetchedRoles);\n        \n        // Sélectionner automatiquement le premier rôle\n        if (fetchedRoles.length > 0 && !selectedRole) {\n          setSelectedRole(fetchedRoles[0]);\n          setPageAccess(fetchedRoles[0].pageAccess || {});\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des rôles:', error);\n        setMessage({\n          text: 'Impossible de charger les rôles. Veuillez réessayer.',\n          type: 'error'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRoles();\n  }, []);\n\n  const handleRoleSelect = (role: Role) => {\n    setSelectedRole(role);\n    setPageAccess(role.pageAccess || {});\n  };\n\n  const togglePageAccess = (pageName: PageKey) => {\n    setPageAccess(prev => ({\n      ...prev,\n      [pageName]: !prev[pageName]\n    }));\n  };\n\n  const handleSavePageAccess = async () => {\n    if (!selectedRole) return;\n    \n    try {\n      setSaving(true);\n      const roleService = RoleService.getInstance();\n      await roleService.updatePageAccess(selectedRole.id, pageAccess);\n      \n      // Forcer le rechargement des rôles globaux\n      await roleService.refreshRoles();\n\n      // Afficher un message de succès\n      setMessage({\n        text: 'Accès aux pages mis à jour avec succès ! Veuillez vous déconnecter et vous reconnecter pour que les changements prennent effet.',\n        type: 'success'\n      });\n      \n      // Mettre à jour le rôle sélectionné avec les nouveaux accès\n      const updatedRole = { ...selectedRole, pageAccess };\n      setSelectedRole(updatedRole);\n      \n      // Mettre à jour la liste des rôles\n      setRoles(prevRoles => \n        prevRoles.map(role => \n          role.id === updatedRole.id ? updatedRole : role\n        )\n      );\n      \n      // Cacher le message après 5 secondes\n      setTimeout(() => {\n        setMessage(null);\n      }, 5000);\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour des accès aux pages:\", error);\n      setMessage({\n        text: 'Erreur lors de la mise à jour des accès aux pages.',\n        type: 'error'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"page-access-loading\">Chargement des rôles...</div>;\n  }\n\n  return (\n    <div className=\"page-access-container\">\n      <div className=\"page-access-header\">\n        <h1>Gestion des Accès aux Pages</h1>\n        <p>Configurez les autorisations d'accès pour chaque rôle</p>\n      </div>\n\n      <div className=\"page-access-content\">\n        <div className=\"role-selector\">\n          <h3>Sélectionnez un rôle</h3>\n          <div className=\"role-buttons\">\n            {roles.map(role => (\n              <button \n                key={role.id} \n                className={`role-button ${selectedRole?.id === role.id ? 'active' : ''}`}\n                onClick={() => handleRoleSelect(role)}\n              >\n                {role.name}\n                {role.isAdmin && <span className=\"admin-badge\">Admin</span>}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {selectedRole && (\n          <div className=\"page-access-panel\">\n            <h2>Accès aux pages pour {selectedRole.name}</h2>\n            \n            <div className=\"page-access-cards\">\n              {PAGE_TYPES.map(pageKey => (\n                <div key={pageKey} className=\"page-card\">\n                  <div className=\"page-card-content\">\n                    <div className=\"page-name\">{PAGE_LABELS[pageKey]}</div>\n                    <label className=\"toggle\">\n                      <input\n                        type=\"checkbox\"\n                        checked={pageAccess[pageKey] || false}\n                        onChange={() => togglePageAccess(pageKey)}\n                      />\n                      <span className=\"toggle-slider\"></span>\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"action-buttons\">\n              <button \n                className=\"save-button\" \n                onClick={handleSavePageAccess}\n                disabled={saving}\n              >\n                {saving ? 'Enregistrement...' : 'Enregistrer les accès'}\n              </button>\n            </div>\n            \n            {message && (\n              <div className={`message ${message.type}`}>\n                {message.text}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PageAccessManagement;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}