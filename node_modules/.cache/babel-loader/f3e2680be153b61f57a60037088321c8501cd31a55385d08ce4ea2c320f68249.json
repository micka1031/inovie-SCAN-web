{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LS_110\\\\Documents\\\\GitHub\\\\inovie-SCAN-web-main\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db } from '../config/firebase';\nimport { onAuthStateChanged, signOut, signInWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\n\n// Interface pour le contexte d'authentification\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Création du contexte avec une valeur par défaut\nconst AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  logout: async () => {},\n  hasPermission: () => false,\n  isAllowedRoute: () => false,\n  login: async () => {\n    throw new Error(\"Login function not implemented\");\n  }\n});\n\n// Hook personnalisé pour utiliser le contexte d'authentification\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Définition des permissions par rôle\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst rolePermissions = {\n  Administrateur: ['dashboard.view', 'passages.view', 'passages.create', 'passages.edit', 'passages.delete', 'sites.view', 'sites.create', 'sites.edit', 'sites.delete', 'tournees.view', 'tournees.create', 'tournees.edit', 'tournees.delete', 'vehicules.view', 'vehicules.create', 'vehicules.edit', 'vehicules.delete', 'users.view', 'users.create', 'users.edit', 'users.delete', 'init-passages.view', 'carte.view', 'carte.edit'],\n  Utilisateur: ['dashboard.view', 'passages.view', 'passages.create', 'passages.edit', 'sites.view', 'sites.create', 'sites.edit', 'tournees.view', 'tournees.create', 'tournees.edit', 'vehicules.view', 'vehicules.create', 'vehicules.edit', 'users.view', 'users.create', 'users.edit', 'init-passages.view', 'carte.view'],\n  Coursier: ['passages.view', 'passages.create', 'passages.edit']\n};\n\n// Mapping des routes vers les permissions requises\nconst routePermissions = {\n  '/': 'dashboard.view',\n  '/passages': 'passages.view',\n  '/sites': 'sites.view',\n  '/tournees': 'tournees.view',\n  '/vehicules': 'vehicules.view',\n  '/admin/users': 'users.view',\n  '/admin': 'dashboard.view',\n  // L'admin panel nécessite des permissions spécifiques pour chaque onglet\n  '/init-passages': 'init-passages.view',\n  '/map': 'carte.view'\n};\n\n// Définition des routes autorisées par rôle\nconst allowedRoutes = {\n  Administrateur: ['/', '/passages', '/sites', '/tournees', '/vehicules', '/admin/users', '/init-passages'],\n  Utilisateur: ['/', '/passages', '/sites', '/tournees', '/vehicules', '/admin/users', '/init-passages'],\n  Coursier: ['/passages']\n};\n\n// Fournisseur du contexte d'authentification\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fonction pour vérifier si l'utilisateur a une permission spécifique\n  const hasPermission = permission => {\n    var _currentUser$email;\n    if (!currentUser) return false;\n\n    // Cas spécial pour Mickaël Volle (a toujours toutes les permissions)\n    if (((_currentUser$email = currentUser.email) === null || _currentUser$email === void 0 ? void 0 : _currentUser$email.toLowerCase()) === 'mickael.volle@inovie.fr') {\n      return true;\n    }\n    const permissions = rolePermissions[currentUser.role] || [];\n    return permissions.includes(permission);\n  };\n\n  // Fonction pour vérifier si l'utilisateur a accès à une route spécifique\n  const isAllowedRoute = route => {\n    var _currentUser$email2;\n    if (!currentUser) return false;\n\n    // Cas spécial pour Mickaël Volle (a accès à toutes les routes)\n    if (((_currentUser$email2 = currentUser.email) === null || _currentUser$email2 === void 0 ? void 0 : _currentUser$email2.toLowerCase()) === 'mickael.volle@inovie.fr') {\n      return true;\n    }\n\n    // 1. Vérifier si l'utilisateur a la permission spécifique requise pour cette route\n    const requiredPermission = routePermissions[route];\n    if (requiredPermission && hasPermission(requiredPermission)) {\n      return true;\n    }\n\n    // 2. Vérifier les routes autorisées comme fallback\n    const routes = allowedRoutes[currentUser.role] || [];\n\n    // Vérifier si la route exacte est autorisée\n    if (routes.includes(route)) return true;\n\n    // Vérifier si une route parente est autorisée (pour les sous-routes)\n    return routes.some(allowedRoute => route.startsWith(allowedRoute) && allowedRoute !== '/');\n  };\n\n  // Fonction de déconnexion\n  const logout = async () => {\n    try {\n      // Mettre à jour l'état immédiatement pour une expérience utilisateur plus réactive\n      setCurrentUser(null);\n\n      // Déclencher la déconnexion Firebase en arrière-plan sans attendre\n      signOut(auth).catch(error => {\n        console.error('Erreur lors de la déconnexion Firebase:', error);\n      });\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n      setError('Erreur lors de la déconnexion');\n\n      // En cas d'erreur, continuer en forçant la déconnexion côté client\n      setCurrentUser(null);\n    }\n  };\n\n  // Fonction pour extraire le prénom et nom à partir de l'email\n  const extractNameFromEmail = email => {\n    const parts = email.split('@')[0].split('.');\n    if (parts.length > 1) {\n      // Cas où l'email est prenom.nom@domaine.com\n      return parts.map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ');\n    }\n    // Sinon, utiliser la partie avant @\n    return parts[0].split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ');\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Connexion avec Firebase Auth\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const firebaseUser = userCredential.user;\n      console.log('🔍 Détails de l\\'utilisateur Firebase:', {\n        uid: firebaseUser.uid,\n        email: firebaseUser.email,\n        displayName: firebaseUser.displayName\n      });\n\n      // Rechercher l'utilisateur dans Firestore\n      const userDocRef = doc(db, 'users', firebaseUser.uid);\n      const userDoc = await getDoc(userDocRef);\n      if (!userDoc.exists()) {\n        // MODIFICATION : Bloquer la création automatique\n        console.error('❌ Aucun compte utilisateur trouvé. Veuillez contacter l\\'administrateur.');\n        throw new Error('Compte utilisateur non trouvé. Contactez votre administrateur.');\n      }\n      const firestoreData = userDoc.data();\n      console.log('🔍 Données Firestore de l\\'utilisateur:', firestoreData);\n      const userData = {\n        id: userDoc.id,\n        identifiant: firestoreData.identifiant || email.split('@')[0],\n        email: firestoreData.email || email,\n        nom: firestoreData.nom || firestoreData.displayName || firebaseUser.displayName || extractNameFromEmail(email),\n        role: firestoreData.role || 'Utilisateur',\n        pole: firestoreData.pole || '',\n        statut: firestoreData.statut || 'actif',\n        uid: firebaseUser.uid,\n        permissions: firestoreData.permissions || [],\n        dateCreation: firestoreData.dateCreation,\n        dateModification: firestoreData.dateModification\n      };\n      console.log('🏷️ Nom d\\'utilisateur final:', userData.nom);\n\n      // Cas spécial pour Mickaël Volle\n      if (email.toLowerCase() === 'mickael.volle@inovie.fr') {\n        userData.role = 'Administrateur';\n        userData.pole = 'Informatique';\n        userData.permissions = rolePermissions['Administrateur'];\n      }\n      console.log('👤 Données utilisateur finales:', userData);\n      setCurrentUser(userData);\n      return userData;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      let errorMessage = 'Erreur lors de la connexion';\n      if (error.code === 'auth/invalid-credential') {\n        errorMessage = 'Compte non trouvé ou identifiants incorrects';\n      } else if (error.code === 'auth/too-many-requests') {\n        errorMessage = 'Trop de tentatives de connexion. Veuillez réessayer plus tard.';\n      }\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Effet pour gérer l'état d'authentification\n  useEffect(() => {\n    console.log(\"✅ Initialisation du gestionnaire d'authentification Firebase\");\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      console.log('🔍 État de l\\'authentification changé:', firebaseUser ? firebaseUser.email : 'Aucun utilisateur connecté');\n      try {\n        if (firebaseUser) {\n          // Vérifier la connectivité réseau\n          if (!navigator.onLine) {\n            console.warn('⚠️ Mode hors ligne détecté. Utilisation des données en cache.');\n            const cachedUser = localStorage.getItem('currentUser');\n            if (cachedUser) {\n              const parsedUser = JSON.parse(cachedUser);\n              setCurrentUser(parsedUser);\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Configuration de la persistance réseau avec des tentatives de récupération\n          const userDocRef = doc(db, 'users', firebaseUser.uid);\n\n          // Ajouter un timeout et des tentatives de récupération\n          const fetchUserWithRetry = async (retries = 3) => {\n            try {\n              const userDoc = await getDoc(userDocRef);\n              if (userDoc.exists()) {\n                const userData = userDoc.data();\n\n                // Enrichir les données utilisateur si nécessaire\n                const enrichedUserData = {\n                  ...userData,\n                  id: userDoc.id,\n                  uid: firebaseUser.uid,\n                  nom: userData.nom || firebaseUser.displayName || extractNameFromEmail(firebaseUser.email || '') || 'Utilisateur',\n                  email: userData.email || firebaseUser.email || '',\n                  permissions: userData.permissions || [],\n                  dateModification: new Date().toISOString()\n                };\n                console.log('👤 Données utilisateur récupérées:', enrichedUserData);\n\n                // Sauvegarder en cache local\n                localStorage.setItem('currentUser', JSON.stringify(enrichedUserData));\n                setCurrentUser(enrichedUserData);\n                setLoading(false);\n              } else {\n                var _firebaseUser$email;\n                console.warn('❌ Aucun document utilisateur trouvé pour l\\'UID:', firebaseUser.uid);\n\n                // Créer un document utilisateur par défaut\n                const defaultUserData = {\n                  id: firebaseUser.uid,\n                  uid: firebaseUser.uid,\n                  identifiant: ((_firebaseUser$email = firebaseUser.email) === null || _firebaseUser$email === void 0 ? void 0 : _firebaseUser$email.split('@')[0]) || 'utilisateur',\n                  email: firebaseUser.email || '',\n                  nom: extractNameFromEmail(firebaseUser.email || '') || 'Utilisateur',\n                  role: 'Utilisateur',\n                  pole: '',\n                  statut: 'actif',\n                  permissions: [],\n                  dateCreation: new Date().toISOString(),\n                  dateModification: new Date().toISOString()\n                };\n                await setDoc(userDocRef, defaultUserData);\n                setCurrentUser(defaultUserData);\n                setLoading(false);\n              }\n            } catch (error) {\n              var _firebaseUser$email2;\n              console.error('❌ Erreur de récupération utilisateur:', error);\n              if (retries > 0) {\n                console.log(`🔄 Nouvelle tentative (${retries} restantes)...`);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // Attente avant nouvelle tentative\n                return fetchUserWithRetry(retries - 1);\n              }\n\n              // Gérer le cas où toutes les tentatives ont échoué\n              const fallbackUser = {\n                id: firebaseUser.uid,\n                uid: firebaseUser.uid,\n                identifiant: ((_firebaseUser$email2 = firebaseUser.email) === null || _firebaseUser$email2 === void 0 ? void 0 : _firebaseUser$email2.split('@')[0]) || 'utilisateur',\n                email: firebaseUser.email || '',\n                nom: extractNameFromEmail(firebaseUser.email || '') || 'Utilisateur',\n                role: 'Utilisateur',\n                pole: '',\n                statut: 'actif',\n                permissions: [],\n                dateCreation: new Date().toISOString(),\n                dateModification: new Date().toISOString()\n              };\n              setCurrentUser(fallbackUser);\n              setLoading(false);\n            }\n          };\n          await fetchUserWithRetry();\n        } else {\n          // Aucun utilisateur connecté\n          console.log('🚪 Aucun utilisateur connecté');\n          setCurrentUser(null);\n          localStorage.removeItem('currentUser');\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('❌ Erreur globale lors de la récupération utilisateur:', error);\n        setCurrentUser(null);\n        setLoading(false);\n      }\n    }, error => {\n      console.error('❌ Erreur dans onAuthStateChanged:', error);\n      setLoading(false);\n    });\n\n    // Nettoyer l'abonnement lors du démontage\n    return () => unsubscribe();\n  }, []);\n\n  // Valeur du contexte\n  const value = {\n    currentUser,\n    loading,\n    error,\n    logout,\n    hasPermission,\n    isAllowedRoute,\n    login\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","db","onAuthStateChanged","signOut","signInWithEmailAndPassword","doc","setDoc","getDoc","jsxDEV","_jsxDEV","AuthContext","currentUser","loading","error","logout","hasPermission","isAllowedRoute","login","Error","useAuth","_s","rolePermissions","Administrateur","Utilisateur","Coursier","routePermissions","allowedRoutes","AuthProvider","children","_s2","setCurrentUser","setLoading","setError","permission","_currentUser$email","email","toLowerCase","permissions","role","includes","route","_currentUser$email2","requiredPermission","routes","some","allowedRoute","startsWith","catch","console","extractNameFromEmail","parts","split","length","map","part","charAt","toUpperCase","slice","join","password","userCredential","firebaseUser","user","log","uid","displayName","userDocRef","userDoc","exists","firestoreData","data","userData","id","identifiant","nom","pole","statut","dateCreation","dateModification","errorMessage","code","unsubscribe","navigator","onLine","warn","cachedUser","localStorage","getItem","parsedUser","JSON","parse","fetchUserWithRetry","retries","enrichedUserData","Date","toISOString","setItem","stringify","_firebaseUser$email","defaultUserData","_firebaseUser$email2","Promise","resolve","setTimeout","fallbackUser","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db } from '../config/firebase';\nimport { onAuthStateChanged, signOut, User as FirebaseUser, signInWithEmailAndPassword } from 'firebase/auth';\nimport { collection, query, where, getDocs, doc, setDoc, getDoc } from 'firebase/firestore';\nimport { User } from '../types/User';\n\n// Interface pour le contexte d'authentification\ninterface AuthContextType {\n  currentUser: User | null;\n  loading: boolean;\n  error: string | null;\n  logout: () => Promise<void>;\n  hasPermission: (permission: string) => boolean;\n  isAllowedRoute: (route: string) => boolean;\n  login: (email: string, password: string) => Promise<User>;\n}\n\n// Création du contexte avec une valeur par défaut\nconst AuthContext = createContext<AuthContextType>({\n  currentUser: null,\n  loading: true,\n  error: null,\n  logout: async () => {},\n  hasPermission: () => false,\n  isAllowedRoute: () => false,\n  login: async () => { throw new Error(\"Login function not implemented\"); },\n});\n\n// Hook personnalisé pour utiliser le contexte d'authentification\nexport const useAuth = () => useContext(AuthContext);\n\n// Définition des permissions par rôle\nconst rolePermissions: Record<string, string[]> = {\n  Administrateur: [\n    'dashboard.view',\n    'passages.view', 'passages.create', 'passages.edit', 'passages.delete',\n    'sites.view', 'sites.create', 'sites.edit', 'sites.delete',\n    'tournees.view', 'tournees.create', 'tournees.edit', 'tournees.delete',\n    'vehicules.view', 'vehicules.create', 'vehicules.edit', 'vehicules.delete',\n    'users.view', 'users.create', 'users.edit', 'users.delete',\n    'init-passages.view',\n    'carte.view', 'carte.edit'\n  ],\n  Utilisateur: [\n    'dashboard.view',\n    'passages.view', 'passages.create', 'passages.edit',\n    'sites.view', 'sites.create', 'sites.edit',\n    'tournees.view', 'tournees.create', 'tournees.edit',\n    'vehicules.view', 'vehicules.create', 'vehicules.edit',\n    'users.view', 'users.create', 'users.edit',\n    'init-passages.view',\n    'carte.view'\n  ],\n  Coursier: [\n    'passages.view', 'passages.create', 'passages.edit'\n  ]\n};\n\n// Mapping des routes vers les permissions requises\nconst routePermissions: Record<string, string> = {\n  '/': 'dashboard.view',\n  '/passages': 'passages.view',\n  '/sites': 'sites.view',\n  '/tournees': 'tournees.view',\n  '/vehicules': 'vehicules.view',\n  '/admin/users': 'users.view',\n  '/admin': 'dashboard.view', // L'admin panel nécessite des permissions spécifiques pour chaque onglet\n  '/init-passages': 'init-passages.view',\n  '/map': 'carte.view',\n};\n\n// Définition des routes autorisées par rôle\nconst allowedRoutes: Record<string, string[]> = {\n  Administrateur: ['/', '/passages', '/sites', '/tournees', '/vehicules', '/admin/users', '/init-passages'],\n  Utilisateur: ['/', '/passages', '/sites', '/tournees', '/vehicules', '/admin/users', '/init-passages'],\n  Coursier: ['/passages']\n};\n\n// Fournisseur du contexte d'authentification\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fonction pour vérifier si l'utilisateur a une permission spécifique\n  const hasPermission = (permission: string): boolean => {\n    if (!currentUser) return false;\n    \n    // Cas spécial pour Mickaël Volle (a toujours toutes les permissions)\n    if (currentUser.email?.toLowerCase() === 'mickael.volle@inovie.fr') {\n      return true;\n    }\n    \n    const permissions = rolePermissions[currentUser.role] || [];\n    return permissions.includes(permission);\n  };\n\n  // Fonction pour vérifier si l'utilisateur a accès à une route spécifique\n  const isAllowedRoute = (route: string): boolean => {\n    if (!currentUser) return false;\n    \n    // Cas spécial pour Mickaël Volle (a accès à toutes les routes)\n    if (currentUser.email?.toLowerCase() === 'mickael.volle@inovie.fr') {\n      return true;\n    }\n    \n    // 1. Vérifier si l'utilisateur a la permission spécifique requise pour cette route\n    const requiredPermission = routePermissions[route];\n    if (requiredPermission && hasPermission(requiredPermission)) {\n      return true;\n    }\n    \n    // 2. Vérifier les routes autorisées comme fallback\n    const routes = allowedRoutes[currentUser.role] || [];\n    \n    // Vérifier si la route exacte est autorisée\n    if (routes.includes(route)) return true;\n    \n    // Vérifier si une route parente est autorisée (pour les sous-routes)\n    return routes.some(allowedRoute => \n      route.startsWith(allowedRoute) && allowedRoute !== '/'\n    );\n  };\n\n  // Fonction de déconnexion\n  const logout = async (): Promise<void> => {\n    try {\n      // Mettre à jour l'état immédiatement pour une expérience utilisateur plus réactive\n      setCurrentUser(null);\n      \n      // Déclencher la déconnexion Firebase en arrière-plan sans attendre\n      signOut(auth).catch(error => {\n        console.error('Erreur lors de la déconnexion Firebase:', error);\n      });\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n      setError('Erreur lors de la déconnexion');\n      \n      // En cas d'erreur, continuer en forçant la déconnexion côté client\n      setCurrentUser(null);\n    }\n  };\n\n  // Fonction pour extraire le prénom et nom à partir de l'email\n  const extractNameFromEmail = (email: string): string => {\n    const parts = email.split('@')[0].split('.');\n    if (parts.length > 1) {\n      // Cas où l'email est prenom.nom@domaine.com\n      return parts.map(part => \n        part.charAt(0).toUpperCase() + part.slice(1)\n      ).join(' ');\n    }\n    // Sinon, utiliser la partie avant @\n    return parts[0].split('-').map(part => \n      part.charAt(0).toUpperCase() + part.slice(1)\n    ).join(' ');\n  };\n\n  const login = async (email: string, password: string): Promise<User> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Connexion avec Firebase Auth\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const firebaseUser = userCredential.user;\n\n      console.log('🔍 Détails de l\\'utilisateur Firebase:', {\n        uid: firebaseUser.uid,\n        email: firebaseUser.email,\n        displayName: firebaseUser.displayName\n      });\n\n      // Rechercher l'utilisateur dans Firestore\n      const userDocRef = doc(db, 'users', firebaseUser.uid);\n      const userDoc = await getDoc(userDocRef);\n\n      if (!userDoc.exists()) {\n        // MODIFICATION : Bloquer la création automatique\n        console.error('❌ Aucun compte utilisateur trouvé. Veuillez contacter l\\'administrateur.');\n        throw new Error('Compte utilisateur non trouvé. Contactez votre administrateur.');\n      }\n\n      const firestoreData = userDoc.data();\n      console.log('🔍 Données Firestore de l\\'utilisateur:', firestoreData);\n\n      const userData: User = {\n        id: userDoc.id,\n        identifiant: firestoreData.identifiant || email.split('@')[0],\n        email: firestoreData.email || email,\n        nom: firestoreData.nom || \n             firestoreData.displayName || \n             firebaseUser.displayName || \n             extractNameFromEmail(email),\n        role: firestoreData.role || 'Utilisateur',\n        pole: firestoreData.pole || '',\n        statut: firestoreData.statut || 'actif',\n        uid: firebaseUser.uid,\n        permissions: firestoreData.permissions || [],\n        dateCreation: firestoreData.dateCreation,\n        dateModification: firestoreData.dateModification\n      };\n\n      console.log('🏷️ Nom d\\'utilisateur final:', userData.nom);\n\n      // Cas spécial pour Mickaël Volle\n      if (email.toLowerCase() === 'mickael.volle@inovie.fr') {\n        userData.role = 'Administrateur';\n        userData.pole = 'Informatique';\n        userData.permissions = rolePermissions['Administrateur'];\n      }\n\n      console.log('👤 Données utilisateur finales:', userData);\n      setCurrentUser(userData);\n      return userData;\n    } catch (error: any) {\n      console.error('Erreur lors de la connexion:', error);\n      let errorMessage = 'Erreur lors de la connexion';\n      \n      if (error.code === 'auth/invalid-credential') {\n        errorMessage = 'Compte non trouvé ou identifiants incorrects';\n      } else if (error.code === 'auth/too-many-requests') {\n        errorMessage = 'Trop de tentatives de connexion. Veuillez réessayer plus tard.';\n      }\n      \n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Effet pour gérer l'état d'authentification\n  useEffect(() => {\n    console.log(\"✅ Initialisation du gestionnaire d'authentification Firebase\");\n    \n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      console.log('🔍 État de l\\'authentification changé:', firebaseUser ? firebaseUser.email : 'Aucun utilisateur connecté');\n      \n      try {\n        if (firebaseUser) {\n          // Vérifier la connectivité réseau\n          if (!navigator.onLine) {\n            console.warn('⚠️ Mode hors ligne détecté. Utilisation des données en cache.');\n            const cachedUser = localStorage.getItem('currentUser');\n            if (cachedUser) {\n              const parsedUser = JSON.parse(cachedUser);\n              setCurrentUser(parsedUser);\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Configuration de la persistance réseau avec des tentatives de récupération\n          const userDocRef = doc(db, 'users', firebaseUser.uid);\n          \n          // Ajouter un timeout et des tentatives de récupération\n          const fetchUserWithRetry = async (retries = 3) => {\n            try {\n              const userDoc = await getDoc(userDocRef);\n              \n              if (userDoc.exists()) {\n                const userData = userDoc.data() as User;\n                \n                // Enrichir les données utilisateur si nécessaire\n                const enrichedUserData: User = {\n                  ...userData,\n                  id: userDoc.id,\n                  uid: firebaseUser.uid,\n                  nom: userData.nom || \n                       firebaseUser.displayName || \n                       extractNameFromEmail(firebaseUser.email || '') || \n                       'Utilisateur',\n                  email: userData.email || firebaseUser.email || '',\n                  permissions: userData.permissions || [],\n                  dateModification: new Date().toISOString()\n                };\n\n                console.log('👤 Données utilisateur récupérées:', enrichedUserData);\n                \n                // Sauvegarder en cache local\n                localStorage.setItem('currentUser', JSON.stringify(enrichedUserData));\n                \n                setCurrentUser(enrichedUserData);\n                setLoading(false);\n              } else {\n                console.warn('❌ Aucun document utilisateur trouvé pour l\\'UID:', firebaseUser.uid);\n                \n                // Créer un document utilisateur par défaut\n                const defaultUserData: User = {\n                  id: firebaseUser.uid,\n                  uid: firebaseUser.uid,\n                  identifiant: firebaseUser.email?.split('@')[0] || 'utilisateur',\n                  email: firebaseUser.email || '',\n                  nom: extractNameFromEmail(firebaseUser.email || '') || 'Utilisateur',\n                  role: 'Utilisateur',\n                  pole: '',\n                  statut: 'actif',\n                  permissions: [],\n                  dateCreation: new Date().toISOString(),\n                  dateModification: new Date().toISOString()\n                };\n\n                await setDoc(userDocRef, defaultUserData);\n                setCurrentUser(defaultUserData);\n                setLoading(false);\n              }\n            } catch (error) {\n              console.error('❌ Erreur de récupération utilisateur:', error);\n              \n              if (retries > 0) {\n                console.log(`🔄 Nouvelle tentative (${retries} restantes)...`);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // Attente avant nouvelle tentative\n                return fetchUserWithRetry(retries - 1);\n              }\n              \n              // Gérer le cas où toutes les tentatives ont échoué\n              const fallbackUser: User = {\n                id: firebaseUser.uid,\n                uid: firebaseUser.uid,\n                identifiant: firebaseUser.email?.split('@')[0] || 'utilisateur',\n                email: firebaseUser.email || '',\n                nom: extractNameFromEmail(firebaseUser.email || '') || 'Utilisateur',\n                role: 'Utilisateur',\n                pole: '',\n                statut: 'actif',\n                permissions: [],\n                dateCreation: new Date().toISOString(),\n                dateModification: new Date().toISOString()\n              };\n\n              setCurrentUser(fallbackUser);\n              setLoading(false);\n            }\n          };\n\n          await fetchUserWithRetry();\n\n        } else {\n          // Aucun utilisateur connecté\n          console.log('🚪 Aucun utilisateur connecté');\n          setCurrentUser(null);\n          localStorage.removeItem('currentUser');\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('❌ Erreur globale lors de la récupération utilisateur:', error);\n        setCurrentUser(null);\n        setLoading(false);\n      }\n    }, (error) => {\n      console.error('❌ Erreur dans onAuthStateChanged:', error);\n      setLoading(false);\n    });\n\n    // Nettoyer l'abonnement lors du démontage\n    return () => unsubscribe();\n  }, []);\n\n  // Valeur du contexte\n  const value: AuthContextType = {\n    currentUser,\n    loading,\n    error,\n    logout,\n    hasPermission,\n    isAllowedRoute,\n    login\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}