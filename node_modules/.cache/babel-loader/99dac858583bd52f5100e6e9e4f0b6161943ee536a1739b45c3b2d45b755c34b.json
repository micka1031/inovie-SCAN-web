{"ast":null,"code":"var _RoleService;\nimport { collection, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../config/firebase';\n\n// Type d'√©v√©nement pour les changements de r√¥les\n\n// Liste statique de r√¥les par d√©faut\nexport const roles = [{\n  id: 'utilisateur',\n  name: 'Utilisateur',\n  description: 'Utilisateur standard',\n  permissions: ['basic.view'],\n  pageAccess: {\n    dashboard: true,\n    passages: true,\n    sites: true,\n    tournees: true,\n    vehicules: true,\n    carte: true\n  },\n  isDefault: true\n}, {\n  id: 'admin',\n  name: 'Administrateur',\n  description: 'Administrateur syst√®me',\n  permissions: ['*'],\n  // Tous les permissions\n  pageAccess: {\n    dashboard: true,\n    passages: true,\n    sites: true,\n    tournees: true,\n    vehicules: true,\n    carte: true,\n    userManagement: true,\n    administration: true\n  },\n  isAdmin: true\n}, {\n  id: 'manager',\n  name: 'Gestionnaire',\n  description: 'Gestionnaire de syst√®me',\n  permissions: ['users.view', 'users.edit'],\n  pageAccess: {\n    dashboard: true,\n    passages: true,\n    sites: true,\n    tournees: true,\n    vehicules: true,\n    carte: true,\n    userManagement: true\n  }\n}];\nexport function getRoleByName(roleName) {\n  // Essayer de r√©cup√©rer d'abord depuis l'instance si elle existe\n  try {\n    const roleService = RoleService.getInstance();\n    if (roleService[\"initialized\"]) {\n      // Acc√®s √† la propri√©t√© priv√©e initialized via l'indexeur\n      const roleFromService = roleService[\"roles\"].find(role => role.name === roleName);\n      if (roleFromService) {\n        console.log(`üîç R√¥le '${roleName}' trouv√© dans l'instance:`, roleFromService);\n        return roleFromService;\n      }\n    }\n  } catch (error) {\n    console.warn(`Erreur lors de la r√©cup√©ration du r√¥le depuis l'instance:`, error);\n  }\n\n  // Fallback sur les r√¥les statiques\n  const roleFromStatic = roles.find(role => role.name === roleName);\n  console.log(`üîç R√¥le '${roleName}' ${roleFromStatic ? 'trouv√©' : 'non trouv√©'} dans les r√¥les statiques`);\n  return roleFromStatic;\n}\nexport function canAccessPage(roleName, pageName) {\n  var _role$pageAccess, _role$pageAccess2;\n  const role = getRoleByName(roleName);\n  if (!role) {\n    console.warn(`R√¥le '${roleName}' non trouv√© pour v√©rifier l'acc√®s √† la page ${pageName}`);\n    return false;\n  }\n\n  // Si c'est un admin, acc√®s total\n  if (role.isAdmin === true) {\n    console.log(`üëë R√¥le '${roleName}' est admin, acc√®s accord√© √† ${pageName}`);\n    return true;\n  }\n\n  // V√©rification explicite pour chaque page\n  const hasAccess = ((_role$pageAccess = role.pageAccess) === null || _role$pageAccess === void 0 ? void 0 : _role$pageAccess[pageName]) === true;\n  console.log(`üîê V√©rification d'acc√®s pour '${roleName}' √† la page '${pageName}': ${hasAccess ? 'OUI' : 'NON'}`);\n  console.log(`   - pageAccess pour ${pageName}:`, (_role$pageAccess2 = role.pageAccess) === null || _role$pageAccess2 === void 0 ? void 0 : _role$pageAccess2[pageName]);\n  return hasAccess;\n}\nexport class RoleService {\n  constructor() {\n    this.roles = [];\n    this.initialized = false;\n    this.roleChangeListeners = [];\n  }\n  static getInstance() {\n    if (!RoleService.instance) {\n      RoleService.instance = new RoleService();\n    }\n    return RoleService.instance;\n  }\n\n  // Ajouter un √©couteur pour les changements de r√¥les\n  addRoleChangeListener(listener) {\n    this.roleChangeListeners.push(listener);\n  }\n\n  // Supprimer un √©couteur\n  removeRoleChangeListener(listener) {\n    this.roleChangeListeners = this.roleChangeListeners.filter(l => l !== listener);\n  }\n\n  // Notifier tous les √©couteurs d'un changement de r√¥les\n  notifyRoleChangeListeners() {\n    this.roleChangeListeners.forEach(listener => listener());\n  }\n  async getRoles() {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles;\n  }\n  async getRole(roleId) {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.id === roleId) || null;\n  }\n  async getRoleByName(roleName) {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.name === roleName) || null;\n  }\n  async initializeRoles() {\n    try {\n      const rolesCollection = collection(db, 'roles');\n      const rolesSnapshot = await getDocs(rolesCollection);\n      this.roles = rolesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      this.initialized = true;\n      console.log('Roles initialis√©s:', this.roles);\n    } catch (error) {\n      console.error('Erreur lors du chargement des r√¥les:', error);\n      throw error;\n    }\n  }\n  async updateRolePermissions(roleId, permissions) {\n    try {\n      // S'assurer que le service est initialis√©\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n      console.log('RoleService: D√©but de la mise √† jour des permissions pour le r√¥le:', roleId);\n      console.log('RoleService: Nouvelles permissions:', permissions);\n\n      // V√©rifier si le r√¥le existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n      if (!roleDoc.exists()) {\n        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre √† jour le document dans Firestore\n      await updateDoc(roleRef, {\n        permissions: permissions\n      });\n      console.log('RoleService: Document mis √† jour dans Firestore');\n\n      // Mettre √† jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          permissions: permissions\n        };\n        console.log('RoleService: Cache local mis √† jour');\n      }\n\n      // Rafra√Æchir les r√¥les depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafra√Æchis depuis Firestore');\n\n      // Notifier les √©couteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise √† jour des permissions:', error);\n      throw error;\n    }\n  }\n  async updatePageAccess(roleId, pageAccess) {\n    try {\n      // S'assurer que le service est initialis√©\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n      console.log('RoleService: D√©but de la mise √† jour des acc√®s aux pages pour le r√¥le:', roleId);\n      console.log('RoleService: Nouveaux acc√®s aux pages:', pageAccess);\n\n      // V√©rifier si le r√¥le existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n      if (!roleDoc.exists()) {\n        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre √† jour le document dans Firestore\n      await updateDoc(roleRef, {\n        pageAccess: pageAccess\n      });\n      console.log('RoleService: Document mis √† jour dans Firestore');\n\n      // Mettre √† jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          pageAccess: pageAccess\n        };\n        console.log('RoleService: Cache local mis √† jour');\n      }\n\n      // Rafra√Æchir les r√¥les depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafra√Æchis depuis Firestore');\n\n      // Forcer l'actualisation de tous les r√¥les statiques globaux\n      Object.assign(roles, this.roles);\n\n      // Notifier les √©couteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise √† jour des acc√®s aux pages:', error);\n      throw error;\n    }\n  }\n  async refreshRoles() {\n    this.initialized = false;\n    await this.initializeRoles();\n\n    // Notifier les √©couteurs du changement\n    this.notifyRoleChangeListeners();\n  }\n}\n_RoleService = RoleService;\nRoleService.instance = void 0;","map":{"version":3,"names":["collection","getDocs","doc","getDoc","updateDoc","db","roles","id","name","description","permissions","pageAccess","dashboard","passages","sites","tournees","vehicules","carte","isDefault","userManagement","administration","isAdmin","getRoleByName","roleName","roleService","RoleService","getInstance","roleFromService","find","role","console","log","error","warn","roleFromStatic","canAccessPage","pageName","_role$pageAccess","_role$pageAccess2","hasAccess","constructor","initialized","roleChangeListeners","instance","addRoleChangeListener","listener","push","removeRoleChangeListener","filter","l","notifyRoleChangeListeners","forEach","getRoles","initializeRoles","getRole","roleId","rolesCollection","rolesSnapshot","docs","map","data","updateRolePermissions","roleRef","roleDoc","exists","Error","roleIndex","findIndex","r","refreshRoles","updatePageAccess","Object","assign","_RoleService"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/RoleService.ts"],"sourcesContent":["import { collection, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { Role } from '../types/roles';\nimport { PageName, PAGES } from '../utils/pageAccessUtils';\n\n// Type d'√©v√©nement pour les changements de r√¥les\ntype RoleChangeListener = () => void;\n\n// Liste statique de r√¥les par d√©faut\nexport const roles: Role[] = [\n  {\n    id: 'utilisateur',\n    name: 'Utilisateur',\n    description: 'Utilisateur standard',\n    permissions: ['basic.view'],\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true\n    },\n    isDefault: true\n  },\n  {\n    id: 'admin',\n    name: 'Administrateur',\n    description: 'Administrateur syst√®me',\n    permissions: ['*'], // Tous les permissions\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true,\n      userManagement: true,\n      administration: true\n    },\n    isAdmin: true\n  },\n  {\n    id: 'manager',\n    name: 'Gestionnaire',\n    description: 'Gestionnaire de syst√®me',\n    permissions: ['users.view', 'users.edit'],\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true,\n      userManagement: true\n    }\n  }\n];\n\nexport function getRoleByName(roleName: string): Role | undefined {\n  // Essayer de r√©cup√©rer d'abord depuis l'instance si elle existe\n  try {\n    const roleService = RoleService.getInstance();\n    if (roleService[\"initialized\"]) {\n      // Acc√®s √† la propri√©t√© priv√©e initialized via l'indexeur\n      const roleFromService = roleService[\"roles\"].find(role => role.name === roleName);\n      if (roleFromService) {\n        console.log(`üîç R√¥le '${roleName}' trouv√© dans l'instance:`, roleFromService);\n        return roleFromService;\n      }\n    }\n  } catch (error) {\n    console.warn(`Erreur lors de la r√©cup√©ration du r√¥le depuis l'instance:`, error);\n  }\n  \n  // Fallback sur les r√¥les statiques\n  const roleFromStatic = roles.find(role => role.name === roleName);\n  console.log(`üîç R√¥le '${roleName}' ${roleFromStatic ? 'trouv√©' : 'non trouv√©'} dans les r√¥les statiques`);\n  return roleFromStatic;\n}\n\nexport function canAccessPage(roleName: string, pageName: PageName): boolean {\n  const role = getRoleByName(roleName);\n  \n  if (!role) {\n    console.warn(`R√¥le '${roleName}' non trouv√© pour v√©rifier l'acc√®s √† la page ${pageName}`);\n    return false;\n  }\n  \n  // Si c'est un admin, acc√®s total\n  if (role.isAdmin === true) {\n    console.log(`üëë R√¥le '${roleName}' est admin, acc√®s accord√© √† ${pageName}`);\n    return true;\n  }\n  \n  // V√©rification explicite pour chaque page\n  const hasAccess = role.pageAccess?.[pageName] === true;\n  console.log(`üîê V√©rification d'acc√®s pour '${roleName}' √† la page '${pageName}': ${hasAccess ? 'OUI' : 'NON'}`);\n  console.log(`   - pageAccess pour ${pageName}:`, role.pageAccess?.[pageName]);\n  \n  return hasAccess;\n}\n\nexport class RoleService {\n  private static instance: RoleService;\n  private roles: Role[] = [];\n  private initialized = false;\n  private roleChangeListeners: RoleChangeListener[] = [];\n\n  private constructor() {}\n\n  public static getInstance(): RoleService {\n    if (!RoleService.instance) {\n      RoleService.instance = new RoleService();\n    }\n    return RoleService.instance;\n  }\n  \n  // Ajouter un √©couteur pour les changements de r√¥les\n  public addRoleChangeListener(listener: RoleChangeListener): void {\n    this.roleChangeListeners.push(listener);\n  }\n  \n  // Supprimer un √©couteur\n  public removeRoleChangeListener(listener: RoleChangeListener): void {\n    this.roleChangeListeners = this.roleChangeListeners.filter(l => l !== listener);\n  }\n  \n  // Notifier tous les √©couteurs d'un changement de r√¥les\n  private notifyRoleChangeListeners(): void {\n    this.roleChangeListeners.forEach(listener => listener());\n  }\n\n  public async getRoles(): Promise<Role[]> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles;\n  }\n\n  public async getRole(roleId: string): Promise<Role | null> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.id === roleId) || null;\n  }\n\n  public async getRoleByName(roleName: string): Promise<Role | null> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.name === roleName) || null;\n  }\n\n  private async initializeRoles() {\n    try {\n      const rolesCollection = collection(db, 'roles');\n      const rolesSnapshot = await getDocs(rolesCollection);\n      this.roles = rolesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      } as Role));\n      this.initialized = true;\n      console.log('Roles initialis√©s:', this.roles);\n    } catch (error) {\n      console.error('Erreur lors du chargement des r√¥les:', error);\n      throw error;\n    }\n  }\n\n  public async updateRolePermissions(roleId: string, permissions: string[]): Promise<void> {\n    try {\n      // S'assurer que le service est initialis√©\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n\n      console.log('RoleService: D√©but de la mise √† jour des permissions pour le r√¥le:', roleId);\n      console.log('RoleService: Nouvelles permissions:', permissions);\n\n      // V√©rifier si le r√¥le existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n\n      if (!roleDoc.exists()) {\n        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre √† jour le document dans Firestore\n      await updateDoc(roleRef, {\n        permissions: permissions\n      });\n      console.log('RoleService: Document mis √† jour dans Firestore');\n\n      // Mettre √† jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          permissions: permissions\n        };\n        console.log('RoleService: Cache local mis √† jour');\n      }\n\n      // Rafra√Æchir les r√¥les depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafra√Æchis depuis Firestore');\n      \n      // Notifier les √©couteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise √† jour des permissions:', error);\n      throw error;\n    }\n  }\n\n  public async updatePageAccess(roleId: string, pageAccess: Role['pageAccess']): Promise<void> {\n    try {\n      // S'assurer que le service est initialis√©\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n\n      console.log('RoleService: D√©but de la mise √† jour des acc√®s aux pages pour le r√¥le:', roleId);\n      console.log('RoleService: Nouveaux acc√®s aux pages:', pageAccess);\n\n      // V√©rifier si le r√¥le existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n\n      if (!roleDoc.exists()) {\n        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre √† jour le document dans Firestore\n      await updateDoc(roleRef, {\n        pageAccess: pageAccess\n      });\n      console.log('RoleService: Document mis √† jour dans Firestore');\n\n      // Mettre √† jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          pageAccess: pageAccess\n        };\n        console.log('RoleService: Cache local mis √† jour');\n      }\n\n      // Rafra√Æchir les r√¥les depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafra√Æchis depuis Firestore');\n      \n      // Forcer l'actualisation de tous les r√¥les statiques globaux\n      Object.assign(roles, this.roles);\n      \n      // Notifier les √©couteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise √† jour des acc√®s aux pages:', error);\n      throw error;\n    }\n  }\n\n  public async refreshRoles() {\n    this.initialized = false;\n    await this.initializeRoles();\n    \n    // Notifier les √©couteurs du changement\n    this.notifyRoleChangeListeners();\n  }\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}