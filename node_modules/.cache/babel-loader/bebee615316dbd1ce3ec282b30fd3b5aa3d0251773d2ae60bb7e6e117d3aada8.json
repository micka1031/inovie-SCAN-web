{"ast":null,"code":"/**\n * Utilitaires pour le géocodage des adresses\n */// Cache pour stocker les résultats de géocodage\nconst geocodeCache={};// Clé API Mapbox (à remplacer par votre propre clé)\n// Vous devez créer un compte sur https://www.mapbox.com/ et obtenir une clé API\nconst MAPBOX_API_KEY='pk.eyJ1IjoiaW5vdmllLXN1aXZpLWNvbGlzIiwiYSI6ImNsZXh0ZjRhbzBpNXgzcG1yNGt2NWt0bXcifQ.HVEFXKCGsmXM-pZ6HA3tYA';// Fonction pour valider les données d'adresse\nconst isValidAddress=(adresse,ville,codePostal)=>{// Vérifier que les champs ne sont pas vides ou composés uniquement d'espaces\nif(!(adresse!==null&&adresse!==void 0&&adresse.trim())||!(ville!==null&&ville!==void 0&&ville.trim())||!(codePostal!==null&&codePostal!==void 0&&codePostal.trim())){return false;}// Vérifier que les champs ne contiennent pas des valeurs invalides\nconst invalidValues=['END','UNDEFINED','NULL','N/A','RDC',''];const fieldsToCheck=[adresse.toUpperCase(),ville.toUpperCase(),codePostal.toUpperCase()];// Vérifier si un des champs contient uniquement des valeurs invalides\nreturn!fieldsToCheck.some(field=>{const parts=field.split(/[,\\s]+/).map(part=>part.trim());return parts.length===0||parts.every(part=>invalidValues.includes(part));});};/**\n * Nettoie et normalise une adresse\n * @param address Adresse à nettoyer\n * @returns Adresse nettoyée\n */const cleanAddress=address=>{if(!address)return'';// Supprimer les mentions inutiles\nconst cleanedAddress=address.replace(/\\b(rdc|rez[- ]de[- ]chauss[ée]e)\\b/gi,'')// Supprimer RDC/Rez-de-chaussée\n.replace(/\\b(bat|bât|batiment|bâtiment)\\b\\.?\\s*([0-9a-z])/gi,'Bâtiment $2')// Normaliser \"bâtiment\"\n.replace(/\\b(apt|appt|appartement)\\b\\.?\\s*([0-9a-z])/gi,'Appartement $2')// Normaliser \"appartement\"\n.replace(/\\s+/g,' ')// Remplacer les espaces multiples par un seul espace\n.trim();return cleanedAddress;};/**\n * Normalise un nom de lieu pour le géocodage\n * @param name Nom du lieu à normaliser\n * @returns Nom normalisé\n */const normalizeLocationName=name=>{if(!name)return'';// Normaliser les caractères spéciaux et la casse\nlet normalized=name.normalize('NFD').replace(/[\\u0300-\\u036f]/g,'').toLowerCase().trim();// Remplacer les abréviations courantes\nconst replacements={'via domitia':'voie domitienne','zac':'zone d\\'activité','zi':'zone industrielle','za':'zone artisanale','rdc':'','rez de chaussee':'','rez-de-chaussee':''};// Appliquer les remplacements\nObject.entries(replacements).forEach(_ref=>{let[pattern,replacement]=_ref;normalized=normalized.replace(new RegExp(`\\\\b${pattern}\\\\b`,'g'),replacement);});return normalized.trim();};/**\n * Géocode une adresse avec l'API Nominatim d'OpenStreetMap\n * @param fullAddress Adresse complète à géocoder\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */const geocodeWithNominatim=async fullAddress=>{try{console.log('Tentative de géocodage avec Nominatim pour:',fullAddress);// Ajouter un User-Agent pour respecter les conditions d'utilisation de Nominatim\nconst headers={'User-Agent':'InovieSuiviColis/1.0','Accept-Language':'fr'};// Utiliser l'API Nominatim d'OpenStreetMap pour le géocodage\nconst response=await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress)}&limit=1&addressdetails=1&countrycodes=fr`,{headers});if(!response.ok){throw new Error(`Erreur HTTP: ${response.status}`);}const data=await response.json();if(data&&data.length>0){const latitude=parseFloat(data[0].lat);const longitude=parseFloat(data[0].lon);// Validation supplémentaire des coordonnées\nif(isNaN(latitude)||isNaN(longitude)){console.warn('Coordonnées invalides pour Nominatim:',{fullAddress,rawData:data[0],latitude,longitude});return null;}// Vérification de la plage de coordonnées pour la France\nif(latitude<41||latitude>51||longitude<-5||longitude>9){console.warn('Coordonnées hors de la zone France pour Nominatim:',{fullAddress,latitude,longitude});return null;}console.log('Géocodage réussi avec Nominatim pour:',{fullAddress,latitude,longitude,precision:data[0].type||'inconnu'});return{latitude,longitude};}console.log('Géocodage échoué avec Nominatim pour:',fullAddress);return null;}catch(error){console.error('Erreur lors du géocodage avec Nominatim:',error);return null;}};/**\n * Géocode une adresse avec l'API Mapbox\n * @param fullAddress Adresse complète à géocoder\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */const geocodeWithMapbox=async fullAddress=>{try{console.log('Tentative de géocodage avec Mapbox pour:',fullAddress);// Utiliser l'API Mapbox pour le géocodage\nconst response=await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(fullAddress)}.json?access_token=${MAPBOX_API_KEY}&country=fr&limit=1&language=fr`);if(!response.ok){throw new Error(`Erreur HTTP: ${response.status}`);}const data=await response.json();if(data&&data.features&&data.features.length>0){const coordinates=data.features[0].center;const longitude=coordinates[0];const latitude=coordinates[1];// Validation supplémentaire des coordonnées\nif(isNaN(latitude)||isNaN(longitude)){console.warn('Coordonnées invalides pour Mapbox:',{fullAddress,rawData:data.features[0],latitude,longitude});return null;}// Vérification de la plage de coordonnées pour la France\nif(latitude<41||latitude>51||longitude<-5||longitude>9){console.warn('Coordonnées hors de la zone France pour Mapbox:',{fullAddress,latitude,longitude});return null;}console.log('Géocodage réussi avec Mapbox pour:',{fullAddress,latitude,longitude,precision:data.features[0].place_type?data.features[0].place_type[0]:'inconnu'});return{// Mapbox retourne les coordonnées au format [longitude, latitude]\nlongitude,latitude};}console.log('Géocodage échoué avec Mapbox pour:',fullAddress);return null;}catch(error){console.error('Erreur lors du géocodage avec Mapbox:',error);return null;}};/**\n * Géocode une adresse pour obtenir ses coordonnées géographiques\n * @param name Nom du site\n * @param address Adresse (rue, numéro)\n * @param city Ville\n * @param postalCode Code postal\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */export const geocodeAddress=async(name,address,city,postalCode)=>{try{// Nettoyer les données d'entrée\nconst cleanedAddress=cleanAddress(address);const cleanedCity=city===null||city===void 0?void 0:city.trim();const cleanedPostalCode=postalCode===null||postalCode===void 0?void 0:postalCode.trim();// Valider les données avant de procéder\nif(!isValidAddress(cleanedAddress,cleanedCity,cleanedPostalCode)){console.warn('Géocodage impossible - Données d\\'adresse invalides:',{name,address:cleanedAddress,city:cleanedCity,postalCode:cleanedPostalCode});return null;}// Construire l'adresse complète SANS le nom du site\nconst addressParts=[cleanedAddress,cleanedCity,cleanedPostalCode,'France'].filter(part=>part&&typeof part==='string'&&part.trim()!=='');const fullAddress=addressParts.join(', ');// Logs détaillés pour le débogage\nconsole.log('Détails du géocodage:',{originalAddress:address,cleanedAddress,originalCity:city,cleanedCity,originalPostalCode:postalCode,cleanedPostalCode,fullAddress,addressParts});// Vérifier si l'adresse est déjà dans le cache\nconst cacheKey=fullAddress.toLowerCase();if(geocodeCache[cacheKey]!==undefined){console.log('Utilisation du cache pour:',fullAddress);return geocodeCache[cacheKey];}// Essayer d'abord avec Nominatim\nlet result=await geocodeWithNominatim(fullAddress);// Si Nominatim échoue, essayer avec Mapbox\nif(!result){console.log('Nominatim a échoué, tentative avec Mapbox...');result=await geocodeWithMapbox(fullAddress);}// Si les deux API échouent, essayer avec une adresse simplifiée\nif(!result){console.log('Tentative avec adresse simplifiée...');const simpleAddress=[cleanedCity,cleanedPostalCode,'France'].filter(part=>part&&typeof part==='string'&&part.trim()!=='').join(', ');console.log('Adresse simplifiée:',simpleAddress);// Vérifier si l'adresse simplifiée est déjà dans le cache\nconst simpleCacheKey=simpleAddress.toLowerCase();if(geocodeCache[simpleCacheKey]!==undefined){console.log('Utilisation du cache pour adresse simplifiée:',simpleAddress);result=geocodeCache[simpleCacheKey];}else{// Essayer d'abord avec Nominatim\nresult=await geocodeWithNominatim(simpleAddress);// Si Nominatim échoue, essayer avec Mapbox\nif(!result){console.log('Nominatim a échoué pour l\\'adresse simplifiée, tentative avec Mapbox...');result=await geocodeWithMapbox(simpleAddress);}// Stocker le résultat dans le cache pour l'adresse simplifiée\nif(result){geocodeCache[simpleCacheKey]=result;}}}// Stocker le résultat dans le cache pour l'adresse complète\nif(result){geocodeCache[cacheKey]=result;}else{console.warn('Géocodage impossible pour le site:',{name,fullAddress,address:cleanedAddress,city:cleanedCity,postalCode:cleanedPostalCode});}return result;}catch(error){console.error('Erreur lors du géocodage:',error);return null;}};/**\n * Géocode une adresse complète pour obtenir ses coordonnées géographiques\n * @param fullAddress Adresse complète\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */export const geocodeFullAddress=async fullAddress=>{try{// Vérifier si l'adresse est déjà dans le cache\nconst cacheKey=fullAddress.toLowerCase();if(geocodeCache[cacheKey]!==undefined){console.log('Utilisation du cache pour:',fullAddress);return geocodeCache[cacheKey];}// Essayer d'abord avec Nominatim\nlet result=await geocodeWithNominatim(fullAddress);// Si Nominatim échoue, essayer avec Mapbox\nif(!result){console.log('Nominatim a échoué, tentative avec Mapbox...');result=await geocodeWithMapbox(fullAddress);}// Stocker le résultat dans le cache\ngeocodeCache[cacheKey]=result;return result;}catch(error){console.error('Erreur lors du géocodage:',error);return null;}};","map":{"version":3,"names":["geocodeCache","MAPBOX_API_KEY","isValidAddress","adresse","ville","codePostal","trim","invalidValues","fieldsToCheck","toUpperCase","some","field","parts","split","map","part","length","every","includes","cleanAddress","address","cleanedAddress","replace","normalizeLocationName","name","normalized","normalize","toLowerCase","replacements","Object","entries","forEach","_ref","pattern","replacement","RegExp","geocodeWithNominatim","fullAddress","console","log","headers","response","fetch","encodeURIComponent","ok","Error","status","data","json","latitude","parseFloat","lat","longitude","lon","isNaN","warn","rawData","precision","type","error","geocodeWithMapbox","features","coordinates","center","place_type","geocodeAddress","city","postalCode","cleanedCity","cleanedPostalCode","addressParts","filter","join","originalAddress","originalCity","originalPostalCode","cacheKey","undefined","result","simpleAddress","simpleCacheKey","geocodeFullAddress"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/utils/geocoding.ts"],"sourcesContent":["/**\n * Utilitaires pour le géocodage des adresses\n */\n\n// Cache pour stocker les résultats de géocodage\nconst geocodeCache: Record<string, {latitude: number, longitude: number} | null> = {};\n\n// Clé API Mapbox (à remplacer par votre propre clé)\n// Vous devez créer un compte sur https://www.mapbox.com/ et obtenir une clé API\nconst MAPBOX_API_KEY = 'pk.eyJ1IjoiaW5vdmllLXN1aXZpLWNvbGlzIiwiYSI6ImNsZXh0ZjRhbzBpNXgzcG1yNGt2NWt0bXcifQ.HVEFXKCGsmXM-pZ6HA3tYA';\n\n// Fonction pour valider les données d'adresse\nconst isValidAddress = (adresse: string, ville: string, codePostal: string): boolean => {\n  // Vérifier que les champs ne sont pas vides ou composés uniquement d'espaces\n  if (!adresse?.trim() || !ville?.trim() || !codePostal?.trim()) {\n    return false;\n  }\n\n  // Vérifier que les champs ne contiennent pas des valeurs invalides\n  const invalidValues = ['END', 'UNDEFINED', 'NULL', 'N/A', 'RDC', ''];\n  const fieldsToCheck = [adresse.toUpperCase(), ville.toUpperCase(), codePostal.toUpperCase()];\n  \n  // Vérifier si un des champs contient uniquement des valeurs invalides\n  return !fieldsToCheck.some(field => {\n    const parts = field.split(/[,\\s]+/).map(part => part.trim());\n    return parts.length === 0 || parts.every(part => invalidValues.includes(part));\n  });\n};\n\n/**\n * Nettoie et normalise une adresse\n * @param address Adresse à nettoyer\n * @returns Adresse nettoyée\n */\nconst cleanAddress = (address: string): string => {\n  if (!address) return '';\n  \n  // Supprimer les mentions inutiles\n  const cleanedAddress = address\n    .replace(/\\b(rdc|rez[- ]de[- ]chauss[ée]e)\\b/gi, '')  // Supprimer RDC/Rez-de-chaussée\n    .replace(/\\b(bat|bât|batiment|bâtiment)\\b\\.?\\s*([0-9a-z])/gi, 'Bâtiment $2')  // Normaliser \"bâtiment\"\n    .replace(/\\b(apt|appt|appartement)\\b\\.?\\s*([0-9a-z])/gi, 'Appartement $2')  // Normaliser \"appartement\"\n    .replace(/\\s+/g, ' ')  // Remplacer les espaces multiples par un seul espace\n    .trim();\n    \n  return cleanedAddress;\n};\n\n/**\n * Normalise un nom de lieu pour le géocodage\n * @param name Nom du lieu à normaliser\n * @returns Nom normalisé\n */\nconst normalizeLocationName = (name: string): string => {\n  if (!name) return '';\n  \n  // Normaliser les caractères spéciaux et la casse\n  let normalized = name\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .toLowerCase()\n    .trim();\n  \n  // Remplacer les abréviations courantes\n  const replacements: Record<string, string> = {\n    'via domitia': 'voie domitienne',\n    'zac': 'zone d\\'activité',\n    'zi': 'zone industrielle',\n    'za': 'zone artisanale',\n    'rdc': '',\n    'rez de chaussee': '',\n    'rez-de-chaussee': ''\n  };\n  \n  // Appliquer les remplacements\n  Object.entries(replacements).forEach(([pattern, replacement]) => {\n    normalized = normalized.replace(new RegExp(`\\\\b${pattern}\\\\b`, 'g'), replacement);\n  });\n  \n  return normalized.trim();\n};\n\n/**\n * Géocode une adresse avec l'API Nominatim d'OpenStreetMap\n * @param fullAddress Adresse complète à géocoder\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */\nconst geocodeWithNominatim = async (\n  fullAddress: string\n): Promise<{latitude: number, longitude: number} | null> => {\n  try {\n    console.log('Tentative de géocodage avec Nominatim pour:', fullAddress);\n    \n    // Ajouter un User-Agent pour respecter les conditions d'utilisation de Nominatim\n    const headers = {\n      'User-Agent': 'InovieSuiviColis/1.0',\n      'Accept-Language': 'fr'\n    };\n    \n    // Utiliser l'API Nominatim d'OpenStreetMap pour le géocodage\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress)}&limit=1&addressdetails=1&countrycodes=fr`,\n      { headers }\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Erreur HTTP: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data && data.length > 0) {\n      const latitude = parseFloat(data[0].lat);\n      const longitude = parseFloat(data[0].lon);\n      \n      // Validation supplémentaire des coordonnées\n      if (isNaN(latitude) || isNaN(longitude)) {\n        console.warn('Coordonnées invalides pour Nominatim:', { \n          fullAddress, \n          rawData: data[0],\n          latitude, \n          longitude \n        });\n        return null;\n      }\n      \n      // Vérification de la plage de coordonnées pour la France\n      if (\n        latitude < 41 || latitude > 51 || \n        longitude < -5 || longitude > 9\n      ) {\n        console.warn('Coordonnées hors de la zone France pour Nominatim:', { \n          fullAddress, \n          latitude, \n          longitude \n        });\n        return null;\n      }\n      \n      console.log('Géocodage réussi avec Nominatim pour:', {\n        fullAddress,\n        latitude,\n        longitude,\n        precision: data[0].type || 'inconnu'\n      });\n      \n      return { latitude, longitude };\n    }\n    \n    console.log('Géocodage échoué avec Nominatim pour:', fullAddress);\n    return null;\n  } catch (error) {\n    console.error('Erreur lors du géocodage avec Nominatim:', error);\n    return null;\n  }\n};\n\n/**\n * Géocode une adresse avec l'API Mapbox\n * @param fullAddress Adresse complète à géocoder\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */\nconst geocodeWithMapbox = async (\n  fullAddress: string\n): Promise<{latitude: number, longitude: number} | null> => {\n  try {\n    console.log('Tentative de géocodage avec Mapbox pour:', fullAddress);\n    \n    // Utiliser l'API Mapbox pour le géocodage\n    const response = await fetch(\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(fullAddress)}.json?access_token=${MAPBOX_API_KEY}&country=fr&limit=1&language=fr`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Erreur HTTP: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data && data.features && data.features.length > 0) {\n      const coordinates = data.features[0].center;\n      const longitude = coordinates[0];\n      const latitude = coordinates[1];\n      \n      // Validation supplémentaire des coordonnées\n      if (isNaN(latitude) || isNaN(longitude)) {\n        console.warn('Coordonnées invalides pour Mapbox:', { \n          fullAddress, \n          rawData: data.features[0],\n          latitude, \n          longitude \n        });\n        return null;\n      }\n      \n      // Vérification de la plage de coordonnées pour la France\n      if (\n        latitude < 41 || latitude > 51 || \n        longitude < -5 || longitude > 9\n      ) {\n        console.warn('Coordonnées hors de la zone France pour Mapbox:', { \n          fullAddress, \n          latitude, \n          longitude \n        });\n        return null;\n      }\n      \n      console.log('Géocodage réussi avec Mapbox pour:', {\n        fullAddress,\n        latitude,\n        longitude,\n        precision: data.features[0].place_type ? data.features[0].place_type[0] : 'inconnu'\n      });\n      \n      return {\n        // Mapbox retourne les coordonnées au format [longitude, latitude]\n        longitude,\n        latitude\n      };\n    }\n    \n    console.log('Géocodage échoué avec Mapbox pour:', fullAddress);\n    return null;\n  } catch (error) {\n    console.error('Erreur lors du géocodage avec Mapbox:', error);\n    return null;\n  }\n};\n\n/**\n * Géocode une adresse pour obtenir ses coordonnées géographiques\n * @param name Nom du site\n * @param address Adresse (rue, numéro)\n * @param city Ville\n * @param postalCode Code postal\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */\nexport const geocodeAddress = async (\n  name: string,\n  address: string, \n  city: string, \n  postalCode: string\n): Promise<{latitude: number, longitude: number} | null> => {\n  try {\n    // Nettoyer les données d'entrée\n    const cleanedAddress = cleanAddress(address);\n    const cleanedCity = city?.trim();\n    const cleanedPostalCode = postalCode?.trim();\n    \n    // Valider les données avant de procéder\n    if (!isValidAddress(cleanedAddress, cleanedCity, cleanedPostalCode)) {\n      console.warn('Géocodage impossible - Données d\\'adresse invalides:', { \n        name,\n        address: cleanedAddress, \n        city: cleanedCity, \n        postalCode: cleanedPostalCode \n      });\n      return null;\n    }\n\n    // Construire l'adresse complète SANS le nom du site\n    const addressParts = [\n      cleanedAddress,\n      cleanedCity,\n      cleanedPostalCode,\n      'France'\n    ].filter(part => part && typeof part === 'string' && part.trim() !== '');\n\n    const fullAddress = addressParts.join(', ');\n    \n    // Logs détaillés pour le débogage\n    console.log('Détails du géocodage:', {\n      originalAddress: address,\n      cleanedAddress,\n      originalCity: city,\n      cleanedCity,\n      originalPostalCode: postalCode,\n      cleanedPostalCode,\n      fullAddress,\n      addressParts\n    });\n    \n    // Vérifier si l'adresse est déjà dans le cache\n    const cacheKey = fullAddress.toLowerCase();\n    if (geocodeCache[cacheKey] !== undefined) {\n      console.log('Utilisation du cache pour:', fullAddress);\n      return geocodeCache[cacheKey];\n    }\n    \n    // Essayer d'abord avec Nominatim\n    let result = await geocodeWithNominatim(fullAddress);\n    \n    // Si Nominatim échoue, essayer avec Mapbox\n    if (!result) {\n      console.log('Nominatim a échoué, tentative avec Mapbox...');\n      result = await geocodeWithMapbox(fullAddress);\n    }\n    \n    // Si les deux API échouent, essayer avec une adresse simplifiée\n    if (!result) {\n      console.log('Tentative avec adresse simplifiée...');\n      const simpleAddress = [cleanedCity, cleanedPostalCode, 'France']\n        .filter(part => part && typeof part === 'string' && part.trim() !== '')\n        .join(', ');\n      \n      console.log('Adresse simplifiée:', simpleAddress);\n      \n      // Vérifier si l'adresse simplifiée est déjà dans le cache\n      const simpleCacheKey = simpleAddress.toLowerCase();\n      if (geocodeCache[simpleCacheKey] !== undefined) {\n        console.log('Utilisation du cache pour adresse simplifiée:', simpleAddress);\n        result = geocodeCache[simpleCacheKey];\n      } else {\n        // Essayer d'abord avec Nominatim\n        result = await geocodeWithNominatim(simpleAddress);\n        \n        // Si Nominatim échoue, essayer avec Mapbox\n        if (!result) {\n          console.log('Nominatim a échoué pour l\\'adresse simplifiée, tentative avec Mapbox...');\n          result = await geocodeWithMapbox(simpleAddress);\n        }\n        \n        // Stocker le résultat dans le cache pour l'adresse simplifiée\n        if (result) {\n          geocodeCache[simpleCacheKey] = result;\n        }\n      }\n    }\n    \n    // Stocker le résultat dans le cache pour l'adresse complète\n    if (result) {\n      geocodeCache[cacheKey] = result;\n    } else {\n      console.warn('Géocodage impossible pour le site:', { \n        name,\n        fullAddress,\n        address: cleanedAddress, \n        city: cleanedCity, \n        postalCode: cleanedPostalCode \n      });\n    }\n    \n    return result;\n  } catch (error) {\n    console.error('Erreur lors du géocodage:', error);\n    return null;\n  }\n};\n\n/**\n * Géocode une adresse complète pour obtenir ses coordonnées géographiques\n * @param fullAddress Adresse complète\n * @returns Coordonnées géographiques (latitude, longitude) ou null si le géocodage échoue\n */\nexport const geocodeFullAddress = async (\n  fullAddress: string\n): Promise<{latitude: number, longitude: number} | null> => {\n  try {\n    // Vérifier si l'adresse est déjà dans le cache\n    const cacheKey = fullAddress.toLowerCase();\n    if (geocodeCache[cacheKey] !== undefined) {\n      console.log('Utilisation du cache pour:', fullAddress);\n      return geocodeCache[cacheKey];\n    }\n    \n    // Essayer d'abord avec Nominatim\n    let result = await geocodeWithNominatim(fullAddress);\n    \n    // Si Nominatim échoue, essayer avec Mapbox\n    if (!result) {\n      console.log('Nominatim a échoué, tentative avec Mapbox...');\n      result = await geocodeWithMapbox(fullAddress);\n    }\n    \n    // Stocker le résultat dans le cache\n    geocodeCache[cacheKey] = result;\n    \n    return result;\n  } catch (error) {\n    console.error('Erreur lors du géocodage:', error);\n    return null;\n  }\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}