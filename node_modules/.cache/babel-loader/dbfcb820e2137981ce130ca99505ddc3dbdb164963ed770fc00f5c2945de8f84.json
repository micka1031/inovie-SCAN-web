{"ast":null,"code":"// Script pour initialiser la collection passages dans Firebase\nimport { db } from '../config/firebase';\nimport { collection, getDocs, addDoc, Timestamp, deleteDoc } from 'firebase/firestore';\n\n// Fonction pour convertir une chaîne de date et heure en Timestamp\nfunction convertToTimestamp(dateTimeString) {\n  const [datePart, timePart] = dateTimeString.split(' ');\n  const [year, month, day] = datePart.split('-').map(Number);\n  const [hour, minute] = timePart.split(':').map(Number);\n  const date = new Date(year, month - 1, day, hour, minute);\n  return Timestamp.fromDate(date);\n}\n\n// Données initiales pour les passages\nconst initialPassages = [{\n  siteDépart: 'Laboratoire Bonnefoy',\n  dhDépart: convertToTimestamp('2023-02-24 07:25'),\n  idColis: '30072001529',\n  statut: 'Livré',\n  siteFin: 'Clinique SUB',\n  dhLivraison: convertToTimestamp('2023-02-24 08:40'),\n  coursierCharg: 'sebastien.lherlier@novus.fr',\n  coursierLivraison: 'sebastien.lherlier@novus.fr',\n  véhicule: 'GE-695-RT'\n}, {\n  siteDépart: 'Clinique Saint-Jean',\n  dhDépart: convertToTimestamp('2023-02-24 07:15'),\n  idColis: '15000434563',\n  statut: 'Livré',\n  siteFin: 'Laboratoire Central',\n  dhLivraison: convertToTimestamp('2023-02-24 08:10'),\n  coursierCharg: 'sebastien.lherlier@novus.fr',\n  coursierLivraison: 'sebastien.lherlier@novus.fr',\n  véhicule: 'GE-695-RT'\n}, {\n  siteDépart: 'Centre Médical Rangueil',\n  dhDépart: convertToTimestamp('2023-02-24 07:05'),\n  idColis: '15000199845',\n  statut: 'Livré',\n  siteFin: 'Laboratoire Central',\n  dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n  coursierCharg: 'sebastien.lherlier@novus.fr',\n  coursierLivraison: 'sebastien.lherlier@novus.fr',\n  véhicule: 'GE-695-RT'\n}, {\n  siteDépart: 'Laboratoire Lénisole',\n  dhDépart: convertToTimestamp('2023-02-24 07:44'),\n  idColis: 'ASG001570930',\n  statut: 'Livré',\n  siteFin: 'Clinique La Jayre',\n  dhLivraison: convertToTimestamp('2023-02-24 08:15'),\n  coursierCharg: 'guillaume.sage@novus.fr',\n  coursierLivraison: 'guillaume.sage@novus.fr',\n  véhicule: 'GI-456-AD'\n}, {\n  siteDépart: 'Hôpital Fontroide',\n  dhDépart: convertToTimestamp('2023-02-24 07:47'),\n  idColis: 'ASG001524765',\n  statut: 'Livré',\n  siteFin: 'Laboratoire Central',\n  dhLivraison: convertToTimestamp('2023-02-24 08:35'),\n  coursierCharg: 'sebastien.lherlier@novus.fr',\n  coursierLivraison: 'sebastien.lherlier@novus.fr',\n  véhicule: 'GE-695-RT'\n}, {\n  siteDépart: 'Clinique STER',\n  dhDépart: convertToTimestamp('2023-02-24 08:03'),\n  idColis: 'ASG001570783',\n  statut: 'En cours',\n  coursierCharg: 'sebastien.lherlier@novus.fr',\n  véhicule: 'GE-695-RT'\n}, {\n  siteDépart: 'Centre Beau Soleil',\n  dhDépart: convertToTimestamp('2023-02-24 08:16'),\n  idColis: 'MB0004040047',\n  statut: 'En cours',\n  coursierCharg: 'michel.roude@novus.fr',\n  véhicule: 'GL-789-BA'\n}, {\n  siteDépart: 'Laboratoire Purpan',\n  dhDépart: convertToTimestamp('2023-02-24 08:25'),\n  idColis: 'ASG001578924',\n  statut: 'En cours',\n  coursierCharg: 'guillaume.sage@novus.fr',\n  véhicule: 'GI-456-AD'\n}, {\n  siteDépart: 'Clinique Pasteur',\n  dhDépart: convertToTimestamp('2023-02-24 07:10'),\n  idColis: '30072001587',\n  statut: 'Livré',\n  siteFin: 'Laboratoire Central',\n  dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n  coursierCharg: 'jean.dupont@novus.fr',\n  coursierLivraison: 'jean.dupont@novus.fr',\n  véhicule: 'GB-123-AZ'\n}, {\n  siteDépart: 'Cabinet Médical Basso',\n  dhDépart: convertToTimestamp('2023-02-24 08:30'),\n  idColis: 'MB0004042187',\n  statut: 'En cours',\n  coursierCharg: 'michel.roude@novus.fr',\n  véhicule: 'GL-789-BA'\n}];\n\n// Fonction pour vérifier si une collection existe et contient des données\nexport async function collectionHasData(collectionName) {\n  try {\n    const querySnapshot = await getDocs(collection(db, collectionName));\n    return !querySnapshot.empty;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification de la collection ${collectionName}:`, error);\n    throw error; // Propager l'erreur pour une meilleure gestion\n  }\n}\n\n// Fonction pour initialiser la collection passages\nexport async function initializePassagesCollection(forceInitialization = true) {\n  try {\n    // Vérifier si la collection existe déjà\n    const passagesRef = collection(db, 'passages');\n    const querySnapshot = await getDocs(passagesRef);\n\n    // Si forceInitialization est true, on supprime les documents existants\n    if (!querySnapshot.empty && forceInitialization) {\n      console.log(`Suppression des ${querySnapshot.size} documents existants...`);\n\n      // Supprimer tous les documents existants\n      const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));\n      await Promise.all(deletePromises);\n      console.log('Tous les documents ont été supprimés avec succès.');\n    } else if (!querySnapshot.empty) {\n      console.log(`La collection passages contient déjà ${querySnapshot.size} documents. Aucune initialisation nécessaire.`);\n      return false;\n    }\n\n    // Initialiser la collection avec les nouvelles données\n    let addedCount = 0;\n    for (const passage of initialPassages) {\n      await addDoc(passagesRef, passage);\n      addedCount++;\n    }\n    console.log(`Initialisation réussie ! ${addedCount} passages ont été ajoutés à la collection.`);\n    return true;\n  } catch (error) {\n    console.error('Erreur détaillée lors de l\\'initialisation de la collection passages:', error);\n    throw error; // Propager l'erreur pour une meilleure gestion\n  }\n}","map":{"version":3,"names":["db","collection","getDocs","addDoc","Timestamp","deleteDoc","convertToTimestamp","dateTimeString","datePart","timePart","split","year","month","day","map","Number","hour","minute","date","Date","fromDate","initialPassages","siteDépart","dhDépart","idColis","statut","siteFin","dhLivraison","coursierCharg","coursierLivraison","véhicule","collectionHasData","collectionName","querySnapshot","empty","error","console","initializePassagesCollection","forceInitialization","passagesRef","log","size","deletePromises","docs","doc","ref","Promise","all","addedCount","passage"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/scripts/initPassagesFirebase.js"],"sourcesContent":["// Script pour initialiser la collection passages dans Firebase\nimport { db } from '../config/firebase';\nimport { collection, getDocs, addDoc, Timestamp, deleteDoc } from 'firebase/firestore';\n\n// Fonction pour convertir une chaîne de date et heure en Timestamp\nfunction convertToTimestamp(dateTimeString) {\n    const [datePart, timePart] = dateTimeString.split(' ');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hour, minute] = timePart.split(':').map(Number);\n    \n    const date = new Date(year, month - 1, day, hour, minute);\n    return Timestamp.fromDate(date);\n}\n\n// Données initiales pour les passages\nconst initialPassages = [\n    {\n        siteDépart: 'Laboratoire Bonnefoy',\n        dhDépart: convertToTimestamp('2023-02-24 07:25'),\n        idColis: '30072001529',\n        statut: 'Livré',\n        siteFin: 'Clinique SUB',\n        dhLivraison: convertToTimestamp('2023-02-24 08:40'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Clinique Saint-Jean',\n        dhDépart: convertToTimestamp('2023-02-24 07:15'),\n        idColis: '15000434563',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 08:10'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Centre Médical Rangueil',\n        dhDépart: convertToTimestamp('2023-02-24 07:05'),\n        idColis: '15000199845',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Laboratoire Lénisole',\n        dhDépart: convertToTimestamp('2023-02-24 07:44'),\n        idColis: 'ASG001570930',\n        statut: 'Livré',\n        siteFin: 'Clinique La Jayre',\n        dhLivraison: convertToTimestamp('2023-02-24 08:15'),\n        coursierCharg: 'guillaume.sage@novus.fr',\n        coursierLivraison: 'guillaume.sage@novus.fr',\n        véhicule: 'GI-456-AD'\n    },\n    {\n        siteDépart: 'Hôpital Fontroide',\n        dhDépart: convertToTimestamp('2023-02-24 07:47'),\n        idColis: 'ASG001524765',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 08:35'),\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        coursierLivraison: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Clinique STER',\n        dhDépart: convertToTimestamp('2023-02-24 08:03'),\n        idColis: 'ASG001570783',\n        statut: 'En cours',\n        coursierCharg: 'sebastien.lherlier@novus.fr',\n        véhicule: 'GE-695-RT'\n    },\n    {\n        siteDépart: 'Centre Beau Soleil',\n        dhDépart: convertToTimestamp('2023-02-24 08:16'),\n        idColis: 'MB0004040047',\n        statut: 'En cours',\n        coursierCharg: 'michel.roude@novus.fr',\n        véhicule: 'GL-789-BA'\n    },\n    {\n        siteDépart: 'Laboratoire Purpan',\n        dhDépart: convertToTimestamp('2023-02-24 08:25'),\n        idColis: 'ASG001578924',\n        statut: 'En cours',\n        coursierCharg: 'guillaume.sage@novus.fr',\n        véhicule: 'GI-456-AD'\n    },\n    {\n        siteDépart: 'Clinique Pasteur',\n        dhDépart: convertToTimestamp('2023-02-24 07:10'),\n        idColis: '30072001587',\n        statut: 'Livré',\n        siteFin: 'Laboratoire Central',\n        dhLivraison: convertToTimestamp('2023-02-24 07:55'),\n        coursierCharg: 'jean.dupont@novus.fr',\n        coursierLivraison: 'jean.dupont@novus.fr',\n        véhicule: 'GB-123-AZ'\n    },\n    {\n        siteDépart: 'Cabinet Médical Basso',\n        dhDépart: convertToTimestamp('2023-02-24 08:30'),\n        idColis: 'MB0004042187',\n        statut: 'En cours',\n        coursierCharg: 'michel.roude@novus.fr',\n        véhicule: 'GL-789-BA'\n    }\n];\n\n// Fonction pour vérifier si une collection existe et contient des données\nexport async function collectionHasData(collectionName) {\n    try {\n        const querySnapshot = await getDocs(collection(db, collectionName));\n        return !querySnapshot.empty;\n    } catch (error) {\n        console.error(`Erreur lors de la vérification de la collection ${collectionName}:`, error);\n        throw error; // Propager l'erreur pour une meilleure gestion\n    }\n}\n\n// Fonction pour initialiser la collection passages\nexport async function initializePassagesCollection(forceInitialization = true) {\n    try {\n        // Vérifier si la collection existe déjà\n        const passagesRef = collection(db, 'passages');\n        const querySnapshot = await getDocs(passagesRef);\n        \n        // Si forceInitialization est true, on supprime les documents existants\n        if (!querySnapshot.empty && forceInitialization) {\n            console.log(`Suppression des ${querySnapshot.size} documents existants...`);\n            \n            // Supprimer tous les documents existants\n            const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));\n            await Promise.all(deletePromises);\n            \n            console.log('Tous les documents ont été supprimés avec succès.');\n        } else if (!querySnapshot.empty) {\n            console.log(`La collection passages contient déjà ${querySnapshot.size} documents. Aucune initialisation nécessaire.`);\n            return false;\n        }\n        \n        // Initialiser la collection avec les nouvelles données\n        let addedCount = 0;\n        \n        for (const passage of initialPassages) {\n            await addDoc(passagesRef, passage);\n            addedCount++;\n        }\n        \n        console.log(`Initialisation réussie ! ${addedCount} passages ont été ajoutés à la collection.`);\n        return true;\n        \n    } catch (error) {\n        console.error('Erreur détaillée lors de l\\'initialisation de la collection passages:', error);\n        throw error; // Propager l'erreur pour une meilleure gestion\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}