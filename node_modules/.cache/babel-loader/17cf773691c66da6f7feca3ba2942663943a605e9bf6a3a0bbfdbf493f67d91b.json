{"ast":null,"code":"var _RoleService;import{collection,getDocs,doc,getDoc,updateDoc}from'firebase/firestore';import{db}from'../config/firebase';// Type d'événement pour les changements de rôles\n// Liste statique de rôles par défaut\nexport const roles=[{id:'utilisateur',name:'Utilisateur',description:'Utilisateur standard',permissions:['basic.view'],pageAccess:{dashboard:true,passages:true,sites:true,tournees:true,vehicules:true,carte:true},isDefault:true},{id:'admin',name:'Administrateur',description:'Administrateur système',permissions:['*'],// Tous les permissions\npageAccess:{dashboard:true,passages:true,sites:true,tournees:true,vehicules:true,carte:true,userManagement:true,administration:true},isAdmin:true},{id:'manager',name:'Gestionnaire',description:'Gestionnaire de système',permissions:['users.view','users.edit'],pageAccess:{dashboard:true,passages:true,sites:true,tournees:true,vehicules:true,carte:true,userManagement:true}}];export function getRoleByName(roleName){// Essayer de récupérer d'abord depuis l'instance si elle existe\ntry{const roleService=RoleService.getInstance();if(roleService[\"initialized\"]){// Accès à la propriété privée initialized via l'indexeur\nconst roleFromService=roleService[\"roles\"].find(role=>role.name===roleName);if(roleFromService){console.log(`🔍 Rôle '${roleName}' trouvé dans l'instance:`,roleFromService);return roleFromService;}}}catch(error){console.warn(`Erreur lors de la récupération du rôle depuis l'instance:`,error);}// Fallback sur les rôles statiques\nconst roleFromStatic=roles.find(role=>role.name===roleName);console.log(`🔍 Rôle '${roleName}' ${roleFromStatic?'trouvé':'non trouvé'} dans les rôles statiques`);return roleFromStatic;}export function canAccessPage(roleName,pageName){var _role$pageAccess,_role$pageAccess2;const role=getRoleByName(roleName);if(!role){console.warn(`Rôle '${roleName}' non trouvé pour vérifier l'accès à la page ${pageName}`);return false;}// Si c'est un admin, accès total\nif(role.isAdmin===true){console.log(`👑 Rôle '${roleName}' est admin, accès accordé à ${pageName}`);return true;}// Vérification explicite pour chaque page\nconst hasAccess=((_role$pageAccess=role.pageAccess)===null||_role$pageAccess===void 0?void 0:_role$pageAccess[pageName])===true;console.log(`🔐 Vérification d'accès pour '${roleName}' à la page '${pageName}': ${hasAccess?'OUI':'NON'}`);console.log(`   - pageAccess pour ${pageName}:`,(_role$pageAccess2=role.pageAccess)===null||_role$pageAccess2===void 0?void 0:_role$pageAccess2[pageName]);return hasAccess;}export class RoleService{constructor(){this.roles=[];this.initialized=false;this.roleChangeListeners=[];}static getInstance(){if(!RoleService.instance){RoleService.instance=new RoleService();}return RoleService.instance;}// Ajouter un écouteur pour les changements de rôles\naddRoleChangeListener(listener){this.roleChangeListeners.push(listener);}// Supprimer un écouteur\nremoveRoleChangeListener(listener){this.roleChangeListeners=this.roleChangeListeners.filter(l=>l!==listener);}// Notifier tous les écouteurs d'un changement de rôles\nnotifyRoleChangeListeners(){this.roleChangeListeners.forEach(listener=>listener());}async getRoles(){if(!this.initialized){await this.initializeRoles();}return this.roles;}async getRole(roleId){if(!this.initialized){await this.initializeRoles();}return this.roles.find(role=>role.id===roleId)||null;}async getRoleByName(roleName){if(!this.initialized){await this.initializeRoles();}return this.roles.find(role=>role.name===roleName)||null;}async initializeRoles(){try{const rolesCollection=collection(db,'roles');const rolesSnapshot=await getDocs(rolesCollection);this.roles=rolesSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));this.initialized=true;console.log('Roles initialisés:',this.roles);}catch(error){console.error('Erreur lors du chargement des rôles:',error);throw error;}}async updateRolePermissions(roleId,permissions){try{// S'assurer que le service est initialisé\nif(!this.initialized){await this.initializeRoles();}console.log('RoleService: Début de la mise à jour des permissions pour le rôle:',roleId);console.log('RoleService: Nouvelles permissions:',permissions);// Vérifier si le rôle existe dans Firestore\nconst roleRef=doc(db,'roles',roleId);const roleDoc=await getDoc(roleRef);if(!roleDoc.exists()){throw new Error(`Le rôle avec l'ID ${roleId} n'existe pas dans Firestore`);}// Mettre à jour le document dans Firestore\nawait updateDoc(roleRef,{permissions:permissions});console.log('RoleService: Document mis à jour dans Firestore');// Mettre à jour le cache local\nconst roleIndex=this.roles.findIndex(r=>r.id===roleId);if(roleIndex!==-1){this.roles[roleIndex]={...this.roles[roleIndex],permissions:permissions};console.log('RoleService: Cache local mis à jour');}// Rafraîchir les rôles depuis Firestore\nawait this.refreshRoles();console.log('RoleService: Roles rafraîchis depuis Firestore');// Notifier les écouteurs du changement\nthis.notifyRoleChangeListeners();}catch(error){console.error('RoleService: Erreur lors de la mise à jour des permissions:',error);throw error;}}async updatePageAccess(roleId,pageAccess){try{// S'assurer que le service est initialisé\nif(!this.initialized){await this.initializeRoles();}console.log('RoleService: Début de la mise à jour des accès aux pages pour le rôle:',roleId);console.log('RoleService: Nouveaux accès aux pages:',pageAccess);// Vérifier si le rôle existe dans Firestore\nconst roleRef=doc(db,'roles',roleId);const roleDoc=await getDoc(roleRef);if(!roleDoc.exists()){throw new Error(`Le rôle avec l'ID ${roleId} n'existe pas dans Firestore`);}// Mettre à jour le document dans Firestore\nawait updateDoc(roleRef,{pageAccess:pageAccess});console.log('RoleService: Document mis à jour dans Firestore');// Mettre à jour le cache local\nconst roleIndex=this.roles.findIndex(r=>r.id===roleId);if(roleIndex!==-1){this.roles[roleIndex]={...this.roles[roleIndex],pageAccess:pageAccess};console.log('RoleService: Cache local mis à jour');}// Rafraîchir les rôles depuis Firestore\nawait this.refreshRoles();console.log('RoleService: Roles rafraîchis depuis Firestore');// Forcer l'actualisation de tous les rôles statiques globaux\nObject.assign(roles,this.roles);// Notifier les écouteurs du changement\nthis.notifyRoleChangeListeners();}catch(error){console.error('RoleService: Erreur lors de la mise à jour des accès aux pages:',error);throw error;}}async refreshRoles(){this.initialized=false;await this.initializeRoles();// Notifier les écouteurs du changement\nthis.notifyRoleChangeListeners();}}_RoleService=RoleService;RoleService.instance=void 0;","map":{"version":3,"names":["collection","getDocs","doc","getDoc","updateDoc","db","roles","id","name","description","permissions","pageAccess","dashboard","passages","sites","tournees","vehicules","carte","isDefault","userManagement","administration","isAdmin","getRoleByName","roleName","roleService","RoleService","getInstance","roleFromService","find","role","console","log","error","warn","roleFromStatic","canAccessPage","pageName","_role$pageAccess","_role$pageAccess2","hasAccess","constructor","initialized","roleChangeListeners","instance","addRoleChangeListener","listener","push","removeRoleChangeListener","filter","l","notifyRoleChangeListeners","forEach","getRoles","initializeRoles","getRole","roleId","rolesCollection","rolesSnapshot","docs","map","data","updateRolePermissions","roleRef","roleDoc","exists","Error","roleIndex","findIndex","r","refreshRoles","updatePageAccess","Object","assign","_RoleService"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/RoleService.ts"],"sourcesContent":["import { collection, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { Role } from '../types/roles';\nimport { PageName, PAGES } from '../utils/pageAccessUtils';\n\n// Type d'événement pour les changements de rôles\ntype RoleChangeListener = () => void;\n\n// Liste statique de rôles par défaut\nexport const roles: Role[] = [\n  {\n    id: 'utilisateur',\n    name: 'Utilisateur',\n    description: 'Utilisateur standard',\n    permissions: ['basic.view'],\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true\n    },\n    isDefault: true\n  },\n  {\n    id: 'admin',\n    name: 'Administrateur',\n    description: 'Administrateur système',\n    permissions: ['*'], // Tous les permissions\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true,\n      userManagement: true,\n      administration: true\n    },\n    isAdmin: true\n  },\n  {\n    id: 'manager',\n    name: 'Gestionnaire',\n    description: 'Gestionnaire de système',\n    permissions: ['users.view', 'users.edit'],\n    pageAccess: {\n      dashboard: true,\n      passages: true,\n      sites: true,\n      tournees: true,\n      vehicules: true,\n      carte: true,\n      userManagement: true\n    }\n  }\n];\n\nexport function getRoleByName(roleName: string): Role | undefined {\n  // Essayer de récupérer d'abord depuis l'instance si elle existe\n  try {\n    const roleService = RoleService.getInstance();\n    if (roleService[\"initialized\"]) {\n      // Accès à la propriété privée initialized via l'indexeur\n      const roleFromService = roleService[\"roles\"].find(role => role.name === roleName);\n      if (roleFromService) {\n        console.log(`🔍 Rôle '${roleName}' trouvé dans l'instance:`, roleFromService);\n        return roleFromService;\n      }\n    }\n  } catch (error) {\n    console.warn(`Erreur lors de la récupération du rôle depuis l'instance:`, error);\n  }\n  \n  // Fallback sur les rôles statiques\n  const roleFromStatic = roles.find(role => role.name === roleName);\n  console.log(`🔍 Rôle '${roleName}' ${roleFromStatic ? 'trouvé' : 'non trouvé'} dans les rôles statiques`);\n  return roleFromStatic;\n}\n\nexport function canAccessPage(roleName: string, pageName: PageName): boolean {\n  const role = getRoleByName(roleName);\n  \n  if (!role) {\n    console.warn(`Rôle '${roleName}' non trouvé pour vérifier l'accès à la page ${pageName}`);\n    return false;\n  }\n  \n  // Si c'est un admin, accès total\n  if (role.isAdmin === true) {\n    console.log(`👑 Rôle '${roleName}' est admin, accès accordé à ${pageName}`);\n    return true;\n  }\n  \n  // Vérification explicite pour chaque page\n  const hasAccess = role.pageAccess?.[pageName] === true;\n  console.log(`🔐 Vérification d'accès pour '${roleName}' à la page '${pageName}': ${hasAccess ? 'OUI' : 'NON'}`);\n  console.log(`   - pageAccess pour ${pageName}:`, role.pageAccess?.[pageName]);\n  \n  return hasAccess;\n}\n\nexport class RoleService {\n  private static instance: RoleService;\n  private roles: Role[] = [];\n  private initialized = false;\n  private roleChangeListeners: RoleChangeListener[] = [];\n\n  private constructor() {}\n\n  public static getInstance(): RoleService {\n    if (!RoleService.instance) {\n      RoleService.instance = new RoleService();\n    }\n    return RoleService.instance;\n  }\n  \n  // Ajouter un écouteur pour les changements de rôles\n  public addRoleChangeListener(listener: RoleChangeListener): void {\n    this.roleChangeListeners.push(listener);\n  }\n  \n  // Supprimer un écouteur\n  public removeRoleChangeListener(listener: RoleChangeListener): void {\n    this.roleChangeListeners = this.roleChangeListeners.filter(l => l !== listener);\n  }\n  \n  // Notifier tous les écouteurs d'un changement de rôles\n  private notifyRoleChangeListeners(): void {\n    this.roleChangeListeners.forEach(listener => listener());\n  }\n\n  public async getRoles(): Promise<Role[]> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles;\n  }\n\n  public async getRole(roleId: string): Promise<Role | null> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.id === roleId) || null;\n  }\n\n  public async getRoleByName(roleName: string): Promise<Role | null> {\n    if (!this.initialized) {\n      await this.initializeRoles();\n    }\n    return this.roles.find(role => role.name === roleName) || null;\n  }\n\n  private async initializeRoles() {\n    try {\n      const rolesCollection = collection(db, 'roles');\n      const rolesSnapshot = await getDocs(rolesCollection);\n      this.roles = rolesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      } as Role));\n      this.initialized = true;\n      console.log('Roles initialisés:', this.roles);\n    } catch (error) {\n      console.error('Erreur lors du chargement des rôles:', error);\n      throw error;\n    }\n  }\n\n  public async updateRolePermissions(roleId: string, permissions: string[]): Promise<void> {\n    try {\n      // S'assurer que le service est initialisé\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n\n      console.log('RoleService: Début de la mise à jour des permissions pour le rôle:', roleId);\n      console.log('RoleService: Nouvelles permissions:', permissions);\n\n      // Vérifier si le rôle existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n\n      if (!roleDoc.exists()) {\n        throw new Error(`Le rôle avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre à jour le document dans Firestore\n      await updateDoc(roleRef, {\n        permissions: permissions\n      });\n      console.log('RoleService: Document mis à jour dans Firestore');\n\n      // Mettre à jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          permissions: permissions\n        };\n        console.log('RoleService: Cache local mis à jour');\n      }\n\n      // Rafraîchir les rôles depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafraîchis depuis Firestore');\n      \n      // Notifier les écouteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise à jour des permissions:', error);\n      throw error;\n    }\n  }\n\n  public async updatePageAccess(roleId: string, pageAccess: Role['pageAccess']): Promise<void> {\n    try {\n      // S'assurer que le service est initialisé\n      if (!this.initialized) {\n        await this.initializeRoles();\n      }\n\n      console.log('RoleService: Début de la mise à jour des accès aux pages pour le rôle:', roleId);\n      console.log('RoleService: Nouveaux accès aux pages:', pageAccess);\n\n      // Vérifier si le rôle existe dans Firestore\n      const roleRef = doc(db, 'roles', roleId);\n      const roleDoc = await getDoc(roleRef);\n\n      if (!roleDoc.exists()) {\n        throw new Error(`Le rôle avec l'ID ${roleId} n'existe pas dans Firestore`);\n      }\n\n      // Mettre à jour le document dans Firestore\n      await updateDoc(roleRef, {\n        pageAccess: pageAccess\n      });\n      console.log('RoleService: Document mis à jour dans Firestore');\n\n      // Mettre à jour le cache local\n      const roleIndex = this.roles.findIndex(r => r.id === roleId);\n      if (roleIndex !== -1) {\n        this.roles[roleIndex] = {\n          ...this.roles[roleIndex],\n          pageAccess: pageAccess\n        };\n        console.log('RoleService: Cache local mis à jour');\n      }\n\n      // Rafraîchir les rôles depuis Firestore\n      await this.refreshRoles();\n      console.log('RoleService: Roles rafraîchis depuis Firestore');\n      \n      // Forcer l'actualisation de tous les rôles statiques globaux\n      Object.assign(roles, this.roles);\n      \n      // Notifier les écouteurs du changement\n      this.notifyRoleChangeListeners();\n    } catch (error) {\n      console.error('RoleService: Erreur lors de la mise à jour des accès aux pages:', error);\n      throw error;\n    }\n  }\n\n  public async refreshRoles() {\n    this.initialized = false;\n    await this.initializeRoles();\n    \n    // Notifier les écouteurs du changement\n    this.notifyRoleChangeListeners();\n  }\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}