{"ast":null,"code":"var _PoleService,\n  _s = $RefreshSig$();\nimport { collection, getDocs, getDoc, doc, query, where } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { useState, useEffect } from 'react';\n/**\n * Service de gestion des pôles\n */\nexport class PoleService {\n  // Constructeur privé pour le pattern Singleton\n  constructor() {\n    this.collectionName = 'poles';\n    this.poles = [];\n    this.lastFetch = 0;\n    this.fetchPromise = null;\n  }\n\n  // Méthode pour obtenir l'instance\n  static getInstance() {\n    if (!PoleService.instance) {\n      PoleService.instance = new PoleService();\n    }\n    return PoleService.instance;\n  }\n\n  /**\n   * Récupérer tous les pôles avec possibilité de mise en cache\n   * @param forceRefresh Forcer le rafraîchissement des données\n   * @param cacheTime Durée de validité du cache en millisecondes (par défaut 5 minutes)\n   */\n  async getPoles(forceRefresh = false, cacheTime = 5 * 60 * 1000) {\n    const now = Date.now();\n\n    // Si une requête est déjà en cours, attendre son résultat\n    if (this.fetchPromise) {\n      return this.fetchPromise;\n    }\n\n    // Si les données sont en cache et encore valides, les retourner\n    if (!forceRefresh && this.poles.length > 0 && now - this.lastFetch < cacheTime) {\n      return this.poles;\n    }\n\n    // Sinon, faire une nouvelle requête\n    this.fetchPromise = this.fetchPolesFromFirestore();\n    try {\n      this.poles = await this.fetchPromise;\n      this.lastFetch = now;\n      return this.poles;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles:', error);\n      throw error;\n    } finally {\n      this.fetchPromise = null;\n    }\n  }\n\n  /**\n   * Récupérer tous les pôles depuis Firestore\n   */\n  async fetchPolesFromFirestore() {\n    try {\n      const polesRef = collection(db, this.collectionName);\n      const snapshot = await getDocs(polesRef);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles depuis Firestore:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Récupérer un pôle par son ID\n   */\n  async getPoleById(id) {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.id === id);\n        if (cachedPole) return cachedPole;\n      }\n\n      // Sinon, chercher dans Firestore\n      const poleRef = doc(db, this.collectionName, id);\n      const snapshot = await getDoc(poleRef);\n      if (snapshot.exists()) {\n        return {\n          id: snapshot.id,\n          ...snapshot.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du pôle ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Récupérer un pôle par son nom\n   */\n  async getPoleByName(name) {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.nom === name);\n        if (cachedPole) return cachedPole;\n      }\n\n      // Sinon, chercher dans Firestore\n      const polesRef = collection(db, this.collectionName);\n      const q = query(polesRef, where('nom', '==', name));\n      const snapshot = await getDocs(q);\n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0];\n        return {\n          id: doc.id,\n          ...doc.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la recherche du pôle ${name}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Composant React Hook pour utiliser le service des pôles\n_PoleService = PoleService;\nPoleService.instance = void 0;\nexport const usePoles = (forceRefresh = false) => {\n  _s();\n  const [poles, setPoles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPoles = async () => {\n      try {\n        setLoading(true);\n        const poleService = PoleService.getInstance();\n        const fetchedPoles = await poleService.getPoles(forceRefresh);\n        setPoles(fetchedPoles);\n        setError(null);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPoles();\n  }, [forceRefresh]);\n  return {\n    poles,\n    loading,\n    error\n  };\n};\n_s(usePoles, \"YHV92hZbm5HW+gdv83OBzSaO/Pw=\");","map":{"version":3,"names":["collection","getDocs","getDoc","doc","query","where","db","useState","useEffect","PoleService","constructor","collectionName","poles","lastFetch","fetchPromise","getInstance","instance","getPoles","forceRefresh","cacheTime","now","Date","length","fetchPolesFromFirestore","error","console","polesRef","snapshot","docs","map","id","data","getPoleById","cachedPole","find","pole","poleRef","exists","getPoleByName","name","nom","q","empty","_PoleService","usePoles","_s","setPoles","loading","setLoading","setError","fetchPoles","poleService","fetchedPoles","err"],"sources":["C:/Users/LS_110/Documents/GitHub/inovie-SCAN-web-main/src/services/PoleService.ts"],"sourcesContent":["import { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport React, { useState, useEffect } from 'react';\n\nexport interface Pole {\n  id: string;\n  nom: string;\n  description?: string;\n  selasId?: string;\n  dateCreation: string;\n  dateModification: string;\n}\n\n/**\n * Service de gestion des pôles\n */\nexport class PoleService {\n  private static instance: PoleService;\n  private readonly collectionName = 'poles';\n  private poles: Pole[] = [];\n  private lastFetch: number = 0;\n  private fetchPromise: Promise<Pole[]> | null = null;\n  \n  // Constructeur privé pour le pattern Singleton\n  private constructor() {}\n  \n  // Méthode pour obtenir l'instance\n  public static getInstance(): PoleService {\n    if (!PoleService.instance) {\n      PoleService.instance = new PoleService();\n    }\n    return PoleService.instance;\n  }\n  \n  /**\n   * Récupérer tous les pôles avec possibilité de mise en cache\n   * @param forceRefresh Forcer le rafraîchissement des données\n   * @param cacheTime Durée de validité du cache en millisecondes (par défaut 5 minutes)\n   */\n  public async getPoles(forceRefresh = false, cacheTime = 5 * 60 * 1000): Promise<Pole[]> {\n    const now = Date.now();\n    \n    // Si une requête est déjà en cours, attendre son résultat\n    if (this.fetchPromise) {\n      return this.fetchPromise;\n    }\n    \n    // Si les données sont en cache et encore valides, les retourner\n    if (!forceRefresh && this.poles.length > 0 && now - this.lastFetch < cacheTime) {\n      return this.poles;\n    }\n    \n    // Sinon, faire une nouvelle requête\n    this.fetchPromise = this.fetchPolesFromFirestore();\n    \n    try {\n      this.poles = await this.fetchPromise;\n      this.lastFetch = now;\n      return this.poles;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles:', error);\n      throw error;\n    } finally {\n      this.fetchPromise = null;\n    }\n  }\n  \n  /**\n   * Récupérer tous les pôles depuis Firestore\n   */\n  private async fetchPolesFromFirestore(): Promise<Pole[]> {\n    try {\n      const polesRef = collection(db, this.collectionName);\n      const snapshot = await getDocs(polesRef);\n      \n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      } as Pole));\n    } catch (error) {\n      console.error('Erreur lors de la récupération des pôles depuis Firestore:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupérer un pôle par son ID\n   */\n  public async getPoleById(id: string): Promise<Pole | null> {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.id === id);\n        if (cachedPole) return cachedPole;\n      }\n      \n      // Sinon, chercher dans Firestore\n      const poleRef = doc(db, this.collectionName, id);\n      const snapshot = await getDoc(poleRef);\n      \n      if (snapshot.exists()) {\n        return {\n          id: snapshot.id,\n          ...snapshot.data()\n        } as Pole;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du pôle ${id}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupérer un pôle par son nom\n   */\n  public async getPoleByName(name: string): Promise<Pole | null> {\n    try {\n      // D'abord, chercher dans le cache\n      if (this.poles.length > 0) {\n        const cachedPole = this.poles.find(pole => pole.nom === name);\n        if (cachedPole) return cachedPole;\n      }\n      \n      // Sinon, chercher dans Firestore\n      const polesRef = collection(db, this.collectionName);\n      const q = query(polesRef, where('nom', '==', name));\n      const snapshot = await getDocs(q);\n      \n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0];\n        return {\n          id: doc.id,\n          ...doc.data()\n        } as Pole;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Erreur lors de la recherche du pôle ${name}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Composant React Hook pour utiliser le service des pôles\nexport const usePoles = (forceRefresh = false) => {\n  const [poles, setPoles] = useState<Pole[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const fetchPoles = async () => {\n      try {\n        setLoading(true);\n        const poleService = PoleService.getInstance();\n        const fetchedPoles = await poleService.getPoles(forceRefresh);\n        setPoles(fetchedPoles);\n        setError(null);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPoles();\n  }, [forceRefresh]);\n\n  return { poles, loading, error };\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}