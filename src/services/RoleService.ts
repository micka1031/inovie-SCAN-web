import { collection, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../config/firebase';
import { Role } from '../types/roles';
import { PageName, PAGES } from '../utils/pageAccessUtils';

// Type d'√©v√©nement pour les changements de r√¥les
type RoleChangeListener = () => void;

// Liste statique de r√¥les par d√©faut
export const roles: Role[] = [
  {
    id: 'utilisateur',
    name: 'Utilisateur',
    description: 'Utilisateur standard',
    permissions: ['basic.view'],
    pageAccess: {
      dashboard: true,
      passages: true,
      sites: true,
      tournees: true,
      vehicules: true,
      carte: true
    },
    isDefault: true
  },
  {
    id: 'admin',
    name: 'Administrateur',
    description: 'Administrateur syst√®me',
    permissions: ['*'], // Tous les permissions
    pageAccess: {
      dashboard: true,
      passages: true,
      sites: true,
      tournees: true,
      vehicules: true,
      carte: true,
      userManagement: true,
      administration: true
    },
    isAdmin: true
  },
  {
    id: 'manager',
    name: 'Gestionnaire',
    description: 'Gestionnaire de syst√®me',
    permissions: ['users.view', 'users.edit'],
    pageAccess: {
      dashboard: true,
      passages: true,
      sites: true,
      tournees: true,
      vehicules: true,
      carte: true,
      userManagement: true
    }
  }
];

export function getRoleByName(roleName: string): Role | undefined {
  // Essayer de r√©cup√©rer d'abord depuis l'instance si elle existe
  try {
    const roleService = RoleService.getInstance();
    if (roleService["initialized"]) {
      // Acc√®s √† la propri√©t√© priv√©e initialized via l'indexeur
      const roleFromService = roleService["roles"].find(role => role.name === roleName);
      if (roleFromService) {
        console.log(`üîç R√¥le '${roleName}' trouv√© dans l'instance:`, roleFromService);
        return roleFromService;
      }
    }
  } catch (error) {
    console.warn(`Erreur lors de la r√©cup√©ration du r√¥le depuis l'instance:`, error);
  }
  
  // Fallback sur les r√¥les statiques
  const roleFromStatic = roles.find(role => role.name === roleName);
  console.log(`üîç R√¥le '${roleName}' ${roleFromStatic ? 'trouv√©' : 'non trouv√©'} dans les r√¥les statiques`);
  return roleFromStatic;
}

export function canAccessPage(roleName: string, pageName: PageName): boolean {
  const role = getRoleByName(roleName);
  
  if (!role) {
    console.warn(`R√¥le '${roleName}' non trouv√© pour v√©rifier l'acc√®s √† la page ${pageName}`);
    return false;
  }
  
  // Si c'est un admin, acc√®s total
  if (role.isAdmin === true) {
    console.log(`üëë R√¥le '${roleName}' est admin, acc√®s accord√© √† ${pageName}`);
    return true;
  }
  
  // V√©rification explicite pour chaque page
  const hasAccess = role.pageAccess?.[pageName] === true;
  console.log(`üîê V√©rification d'acc√®s pour '${roleName}' √† la page '${pageName}': ${hasAccess ? 'OUI' : 'NON'}`);
  console.log(`   - pageAccess pour ${pageName}:`, role.pageAccess?.[pageName]);
  
  return hasAccess;
}

export class RoleService {
  private static instance: RoleService;
  private roles: Role[] = [];
  private initialized = false;
  private roleChangeListeners: RoleChangeListener[] = [];

  private constructor() {}

  public static getInstance(): RoleService {
    if (!RoleService.instance) {
      RoleService.instance = new RoleService();
    }
    return RoleService.instance;
  }
  
  // Ajouter un √©couteur pour les changements de r√¥les
  public addRoleChangeListener(listener: RoleChangeListener): void {
    this.roleChangeListeners.push(listener);
  }
  
  // Supprimer un √©couteur
  public removeRoleChangeListener(listener: RoleChangeListener): void {
    this.roleChangeListeners = this.roleChangeListeners.filter(l => l !== listener);
  }
  
  // Notifier tous les √©couteurs d'un changement de r√¥les
  private notifyRoleChangeListeners(): void {
    this.roleChangeListeners.forEach(listener => listener());
  }

  public async getRoles(): Promise<Role[]> {
    if (!this.initialized) {
      await this.initializeRoles();
    }
    return this.roles;
  }

  public async getRole(roleId: string): Promise<Role | null> {
    if (!this.initialized) {
      await this.initializeRoles();
    }
    return this.roles.find(role => role.id === roleId) || null;
  }

  public async getRoleByName(roleName: string): Promise<Role | null> {
    if (!this.initialized) {
      await this.initializeRoles();
    }
    return this.roles.find(role => role.name === roleName) || null;
  }

  private async initializeRoles() {
    try {
      const rolesCollection = collection(db, 'roles');
      const rolesSnapshot = await getDocs(rolesCollection);
      this.roles = rolesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Role));
      this.initialized = true;
      console.log('Roles initialis√©s:', this.roles);
    } catch (error) {
      console.error('Erreur lors du chargement des r√¥les:', error);
      throw error;
    }
  }

  public async updateRolePermissions(roleId: string, permissions: string[]): Promise<void> {
    try {
      // S'assurer que le service est initialis√©
      if (!this.initialized) {
        await this.initializeRoles();
      }

      console.log('RoleService: D√©but de la mise √† jour des permissions pour le r√¥le:', roleId);
      console.log('RoleService: Nouvelles permissions:', permissions);

      // V√©rifier si le r√¥le existe dans Firestore
      const roleRef = doc(db, 'roles', roleId);
      const roleDoc = await getDoc(roleRef);

      if (!roleDoc.exists()) {
        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);
      }

      // Mettre √† jour le document dans Firestore
      await updateDoc(roleRef, {
        permissions: permissions
      });
      console.log('RoleService: Document mis √† jour dans Firestore');

      // Mettre √† jour le cache local
      const roleIndex = this.roles.findIndex(r => r.id === roleId);
      if (roleIndex !== -1) {
        this.roles[roleIndex] = {
          ...this.roles[roleIndex],
          permissions: permissions
        };
        console.log('RoleService: Cache local mis √† jour');
      }

      // Rafra√Æchir les r√¥les depuis Firestore
      await this.refreshRoles();
      console.log('RoleService: Roles rafra√Æchis depuis Firestore');
      
      // Notifier les √©couteurs du changement
      this.notifyRoleChangeListeners();
    } catch (error) {
      console.error('RoleService: Erreur lors de la mise √† jour des permissions:', error);
      throw error;
    }
  }

  public async updatePageAccess(roleId: string, pageAccess: Role['pageAccess']): Promise<void> {
    try {
      // S'assurer que le service est initialis√©
      if (!this.initialized) {
        await this.initializeRoles();
      }

      console.log('RoleService: D√©but de la mise √† jour des acc√®s aux pages pour le r√¥le:', roleId);
      console.log('RoleService: Nouveaux acc√®s aux pages:', pageAccess);

      // V√©rifier si le r√¥le existe dans Firestore
      const roleRef = doc(db, 'roles', roleId);
      const roleDoc = await getDoc(roleRef);

      if (!roleDoc.exists()) {
        throw new Error(`Le r√¥le avec l'ID ${roleId} n'existe pas dans Firestore`);
      }

      // Mettre √† jour le document dans Firestore
      await updateDoc(roleRef, {
        pageAccess: pageAccess
      });
      console.log('RoleService: Document mis √† jour dans Firestore');

      // Mettre √† jour le cache local
      const roleIndex = this.roles.findIndex(r => r.id === roleId);
      if (roleIndex !== -1) {
        this.roles[roleIndex] = {
          ...this.roles[roleIndex],
          pageAccess: pageAccess
        };
        console.log('RoleService: Cache local mis √† jour');
      }

      // Rafra√Æchir les r√¥les depuis Firestore
      await this.refreshRoles();
      console.log('RoleService: Roles rafra√Æchis depuis Firestore');
      
      // Forcer l'actualisation de tous les r√¥les statiques globaux
      Object.assign(roles, this.roles);
      
      // Notifier les √©couteurs du changement
      this.notifyRoleChangeListeners();
    } catch (error) {
      console.error('RoleService: Erreur lors de la mise √† jour des acc√®s aux pages:', error);
      throw error;
    }
  }

  public async refreshRoles() {
    this.initialized = false;
    await this.initializeRoles();
    
    // Notifier les √©couteurs du changement
    this.notifyRoleChangeListeners();
  }
} 
